
ENEL500_SAML21E_Prototype.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003848  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000008  20000000  00003848  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00020008  2**0
                  CONTENTS
  3 .bss          00000058  20000008  00003850  00020008  2**2
                  ALLOC
  4 .stack        00001000  20000060  000038a8  00020008  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001fa91  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002cf3  00000000  00000000  0003fb1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000ea7d  00000000  00000000  0004280d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b70  00000000  00000000  0005128a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001078  00000000  00000000  00051dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001ae91  00000000  00000000  00052e72  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000102e1  00000000  00000000  0006dd03  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008e484  00000000  00000000  0007dfe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001ee0  00000000  00000000  0010c468  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	60 10 00 20 25 01 00 00 21 01 00 00 21 01 00 00     `.. %...!...!...
	...
      2c:	21 01 00 00 00 00 00 00 00 00 00 00 21 01 00 00     !...........!...
      3c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      4c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      5c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      6c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      7c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
	...
      94:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      a4:	21 01 00 00 21 01 00 00 21 01 00 00 00 00 00 00     !...!...!.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000008 	.word	0x20000008
      d4:	00000000 	.word	0x00000000
      d8:	00003848 	.word	0x00003848

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000000c 	.word	0x2000000c
     108:	00003848 	.word	0x00003848
     10c:	00003848 	.word	0x00003848
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b01      	ldr	r3, [pc, #4]	; (11c <atmel_start_init+0x8>)
     118:	4798      	blx	r3
}
     11a:	bd10      	pop	{r4, pc}
     11c:	000004dd 	.word	0x000004dd

00000120 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     120:	e7fe      	b.n	120 <Dummy_Handler>
	...

00000124 <Reset_Handler>:
{
     124:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     126:	4a1a      	ldr	r2, [pc, #104]	; (190 <Reset_Handler+0x6c>)
     128:	4b1a      	ldr	r3, [pc, #104]	; (194 <Reset_Handler+0x70>)
     12a:	429a      	cmp	r2, r3
     12c:	d011      	beq.n	152 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     12e:	001a      	movs	r2, r3
     130:	4b19      	ldr	r3, [pc, #100]	; (198 <Reset_Handler+0x74>)
     132:	429a      	cmp	r2, r3
     134:	d20d      	bcs.n	152 <Reset_Handler+0x2e>
     136:	4a19      	ldr	r2, [pc, #100]	; (19c <Reset_Handler+0x78>)
     138:	3303      	adds	r3, #3
     13a:	1a9b      	subs	r3, r3, r2
     13c:	089b      	lsrs	r3, r3, #2
     13e:	3301      	adds	r3, #1
     140:	009b      	lsls	r3, r3, #2
     142:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     144:	4813      	ldr	r0, [pc, #76]	; (194 <Reset_Handler+0x70>)
     146:	4912      	ldr	r1, [pc, #72]	; (190 <Reset_Handler+0x6c>)
     148:	588c      	ldr	r4, [r1, r2]
     14a:	5084      	str	r4, [r0, r2]
     14c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     14e:	429a      	cmp	r2, r3
     150:	d1fa      	bne.n	148 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     152:	4a13      	ldr	r2, [pc, #76]	; (1a0 <Reset_Handler+0x7c>)
     154:	4b13      	ldr	r3, [pc, #76]	; (1a4 <Reset_Handler+0x80>)
     156:	429a      	cmp	r2, r3
     158:	d20a      	bcs.n	170 <Reset_Handler+0x4c>
     15a:	43d3      	mvns	r3, r2
     15c:	4911      	ldr	r1, [pc, #68]	; (1a4 <Reset_Handler+0x80>)
     15e:	185b      	adds	r3, r3, r1
     160:	2103      	movs	r1, #3
     162:	438b      	bics	r3, r1
     164:	3304      	adds	r3, #4
     166:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     168:	2100      	movs	r1, #0
     16a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     16c:	4293      	cmp	r3, r2
     16e:	d1fc      	bne.n	16a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     170:	4a0d      	ldr	r2, [pc, #52]	; (1a8 <Reset_Handler+0x84>)
     172:	21ff      	movs	r1, #255	; 0xff
     174:	4b0d      	ldr	r3, [pc, #52]	; (1ac <Reset_Handler+0x88>)
     176:	438b      	bics	r3, r1
     178:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
     17a:	4a0d      	ldr	r2, [pc, #52]	; (1b0 <Reset_Handler+0x8c>)
     17c:	6853      	ldr	r3, [r2, #4]
     17e:	397f      	subs	r1, #127	; 0x7f
     180:	430b      	orrs	r3, r1
     182:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     184:	4b0b      	ldr	r3, [pc, #44]	; (1b4 <Reset_Handler+0x90>)
     186:	4798      	blx	r3
        main();
     188:	4b0b      	ldr	r3, [pc, #44]	; (1b8 <Reset_Handler+0x94>)
     18a:	4798      	blx	r3
     18c:	e7fe      	b.n	18c <Reset_Handler+0x68>
     18e:	46c0      	nop			; (mov r8, r8)
     190:	00003848 	.word	0x00003848
     194:	20000000 	.word	0x20000000
     198:	20000008 	.word	0x20000008
     19c:	20000004 	.word	0x20000004
     1a0:	20000008 	.word	0x20000008
     1a4:	20000060 	.word	0x20000060
     1a8:	e000ed00 	.word	0xe000ed00
     1ac:	00000000 	.word	0x00000000
     1b0:	41004000 	.word	0x41004000
     1b4:	000036b5 	.word	0x000036b5
     1b8:	00001419 	.word	0x00001419

000001bc <ADC_0_PORT_init>:
struct spi_s_sync_descriptor SPI_0;

struct dac_sync_descriptor DAC_0;

void ADC_0_PORT_init(void)
{
     1bc:	b5f0      	push	{r4, r5, r6, r7, lr}
     1be:	46c6      	mov	lr, r8
     1c0:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     1c2:	27c0      	movs	r7, #192	; 0xc0
     1c4:	05ff      	lsls	r7, r7, #23
     1c6:	2308      	movs	r3, #8
     1c8:	607b      	str	r3, [r7, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     1ca:	4b22      	ldr	r3, [pc, #136]	; (254 <ADC_0_PORT_init+0x98>)
     1cc:	4a22      	ldr	r2, [pc, #136]	; (258 <ADC_0_PORT_init+0x9c>)
     1ce:	629a      	str	r2, [r3, #40]	; 0x28
     1d0:	21c0      	movs	r1, #192	; 0xc0
     1d2:	0609      	lsls	r1, r1, #24
     1d4:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     1d6:	2443      	movs	r4, #67	; 0x43
     1d8:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     1da:	2601      	movs	r6, #1
     1dc:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     1de:	2201      	movs	r2, #1
     1e0:	4690      	mov	r8, r2
     1e2:	4642      	mov	r2, r8
     1e4:	4310      	orrs	r0, r2
     1e6:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     1e8:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     1ea:	2031      	movs	r0, #49	; 0x31
     1ec:	4684      	mov	ip, r0
     1ee:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     1f0:	250f      	movs	r5, #15
     1f2:	4028      	ands	r0, r5
	tmp |= PORT_PMUX_PMUXO(data);
     1f4:	2410      	movs	r4, #16
     1f6:	4320      	orrs	r0, r4
     1f8:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     1fa:	4662      	mov	r2, ip
     1fc:	5498      	strb	r0, [r3, r2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     1fe:	2080      	movs	r0, #128	; 0x80
     200:	6078      	str	r0, [r7, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     202:	4816      	ldr	r0, [pc, #88]	; (25c <ADC_0_PORT_init+0xa0>)
     204:	6298      	str	r0, [r3, #40]	; 0x28
     206:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     208:	3216      	adds	r2, #22
     20a:	4694      	mov	ip, r2
     20c:	5c98      	ldrb	r0, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     20e:	43b0      	bics	r0, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     210:	4642      	mov	r2, r8
     212:	4310      	orrs	r0, r2
     214:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     216:	4662      	mov	r2, ip
     218:	5498      	strb	r0, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     21a:	3a14      	subs	r2, #20
     21c:	5c98      	ldrb	r0, [r3, r2]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     21e:	4028      	ands	r0, r5
	tmp |= PORT_PMUX_PMUXO(data);
     220:	4320      	orrs	r0, r4
     222:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     224:	5498      	strb	r0, [r3, r2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     226:	2080      	movs	r0, #128	; 0x80
     228:	0080      	lsls	r0, r0, #2
     22a:	6078      	str	r0, [r7, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     22c:	480c      	ldr	r0, [pc, #48]	; (260 <ADC_0_PORT_init+0xa4>)
     22e:	6298      	str	r0, [r3, #40]	; 0x28
     230:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     232:	2049      	movs	r0, #73	; 0x49
     234:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     236:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     238:	4642      	mov	r2, r8
     23a:	4311      	orrs	r1, r2
     23c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     23e:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     240:	2134      	movs	r1, #52	; 0x34
     242:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     244:	402a      	ands	r2, r5
	tmp |= PORT_PMUX_PMUXO(data);
     246:	4322      	orrs	r2, r4
     248:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     24a:	545a      	strb	r2, [r3, r1]

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA09, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA09, PINMUX_PA09B_ADC_AIN17);
}
     24c:	bc04      	pop	{r2}
     24e:	4690      	mov	r8, r2
     250:	bdf0      	pop	{r4, r5, r6, r7, pc}
     252:	46c0      	nop			; (mov r8, r8)
     254:	40002800 	.word	0x40002800
     258:	40000008 	.word	0x40000008
     25c:	40000080 	.word	0x40000080
     260:	40000200 	.word	0x40000200

00000264 <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC;
     264:	4a04      	ldr	r2, [pc, #16]	; (278 <ADC_0_CLOCK_init+0x14>)
     266:	6a13      	ldr	r3, [r2, #32]
     268:	2108      	movs	r1, #8
     26a:	430b      	orrs	r3, r1
     26c:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     26e:	3138      	adds	r1, #56	; 0x38
     270:	23f8      	movs	r3, #248	; 0xf8
     272:	4a02      	ldr	r2, [pc, #8]	; (27c <ADC_0_CLOCK_init+0x18>)
     274:	50d1      	str	r1, [r2, r3]

void ADC_0_CLOCK_init(void)
{
	hri_mclk_set_APBDMASK_ADC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC_GCLK_ID, CONF_GCLK_ADC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}
     276:	4770      	bx	lr
     278:	40000400 	.word	0x40000400
     27c:	40001800 	.word	0x40001800

00000280 <ADC_0_init>:

void ADC_0_init(void)
{
     280:	b510      	push	{r4, lr}
	ADC_0_CLOCK_init();
     282:	4b02      	ldr	r3, [pc, #8]	; (28c <ADC_0_init+0xc>)
     284:	4798      	blx	r3
	ADC_0_PORT_init();
     286:	4b02      	ldr	r3, [pc, #8]	; (290 <ADC_0_init+0x10>)
     288:	4798      	blx	r3
//	adc_sync_init(&ADC_0, ADC, (void *)NULL);
}
     28a:	bd10      	pop	{r4, pc}
     28c:	00000265 	.word	0x00000265
     290:	000001bd 	.word	0x000001bd

00000294 <SPI_0_PORT_init>:

void SPI_0_PORT_init(void)
{
     294:	b5f0      	push	{r4, r5, r6, r7, lr}
     296:	46de      	mov	lr, fp
     298:	4657      	mov	r7, sl
     29a:	464e      	mov	r6, r9
     29c:	4645      	mov	r5, r8
     29e:	b5e0      	push	{r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     2a0:	22c0      	movs	r2, #192	; 0xc0
     2a2:	05d2      	lsls	r2, r2, #23
     2a4:	2480      	movs	r4, #128	; 0x80
     2a6:	0124      	lsls	r4, r4, #4
     2a8:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2aa:	4b45      	ldr	r3, [pc, #276]	; (3c0 <SPI_0_PORT_init+0x12c>)
     2ac:	4945      	ldr	r1, [pc, #276]	; (3c4 <SPI_0_PORT_init+0x130>)
     2ae:	6299      	str	r1, [r3, #40]	; 0x28
     2b0:	21c0      	movs	r1, #192	; 0xc0
     2b2:	0609      	lsls	r1, r1, #24
     2b4:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     2b6:	6054      	str	r4, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     2b8:	204b      	movs	r0, #75	; 0x4b
     2ba:	5c19      	ldrb	r1, [r3, r0]
     2bc:	2504      	movs	r5, #4
     2be:	46a9      	mov	r9, r5
     2c0:	2604      	movs	r6, #4
     2c2:	4331      	orrs	r1, r6
     2c4:	b2c9      	uxtb	r1, r1
     2c6:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2c8:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     2ca:	2480      	movs	r4, #128	; 0x80
     2cc:	02e4      	lsls	r4, r4, #11
     2ce:	6054      	str	r4, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2d0:	2180      	movs	r1, #128	; 0x80
     2d2:	05c9      	lsls	r1, r1, #23
     2d4:	6299      	str	r1, [r3, #40]	; 0x28
     2d6:	483c      	ldr	r0, [pc, #240]	; (3c8 <SPI_0_PORT_init+0x134>)
     2d8:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     2da:	6054      	str	r4, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     2dc:	354e      	adds	r5, #78	; 0x4e
     2de:	5d58      	ldrb	r0, [r3, r5]
     2e0:	4330      	orrs	r0, r6
     2e2:	b2c0      	uxtb	r0, r0
     2e4:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2e6:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     2e8:	2080      	movs	r0, #128	; 0x80
     2ea:	0240      	lsls	r0, r0, #9
     2ec:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     2ee:	4837      	ldr	r0, [pc, #220]	; (3cc <SPI_0_PORT_init+0x138>)
     2f0:	4682      	mov	sl, r0
     2f2:	6298      	str	r0, [r3, #40]	; 0x28
     2f4:	4836      	ldr	r0, [pc, #216]	; (3d0 <SPI_0_PORT_init+0x13c>)
     2f6:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     2f8:	2450      	movs	r4, #80	; 0x50
     2fa:	5d18      	ldrb	r0, [r3, r4]
     2fc:	464d      	mov	r5, r9
     2fe:	43a8      	bics	r0, r5
     300:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     302:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     304:	2701      	movs	r7, #1
     306:	43b8      	bics	r0, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     308:	2601      	movs	r6, #1
     30a:	4330      	orrs	r0, r6
     30c:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     30e:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     310:	2038      	movs	r0, #56	; 0x38
     312:	4680      	mov	r8, r0
     314:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     316:	3c41      	subs	r4, #65	; 0x41
     318:	46a4      	mov	ip, r4
     31a:	43a0      	bics	r0, r4
	tmp |= PORT_PMUX_PMUXE(data);
     31c:	3c0c      	subs	r4, #12
     31e:	4320      	orrs	r0, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     320:	4644      	mov	r4, r8
     322:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     324:	2080      	movs	r0, #128	; 0x80
     326:	0280      	lsls	r0, r0, #10
     328:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     32a:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     32c:	6299      	str	r1, [r3, #40]	; 0x28
     32e:	4829      	ldr	r0, [pc, #164]	; (3d4 <SPI_0_PORT_init+0x140>)
     330:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     332:	3419      	adds	r4, #25
     334:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     336:	43b8      	bics	r0, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     338:	4330      	orrs	r0, r6
     33a:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     33c:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     33e:	4640      	mov	r0, r8
     340:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     342:	350b      	adds	r5, #11
     344:	4028      	ands	r0, r5
	tmp |= PORT_PMUX_PMUXO(data);
     346:	2430      	movs	r4, #48	; 0x30
     348:	46a3      	mov	fp, r4
     34a:	465c      	mov	r4, fp
     34c:	4320      	orrs	r0, r4
     34e:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     350:	4644      	mov	r4, r8
     352:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     354:	2080      	movs	r0, #128	; 0x80
     356:	0440      	lsls	r0, r0, #17
     358:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     35a:	4650      	mov	r0, sl
     35c:	6298      	str	r0, [r3, #40]	; 0x28
     35e:	481e      	ldr	r0, [pc, #120]	; (3d8 <SPI_0_PORT_init+0x144>)
     360:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     362:	2058      	movs	r0, #88	; 0x58
     364:	4680      	mov	r8, r0
     366:	5c18      	ldrb	r0, [r3, r0]
     368:	464c      	mov	r4, r9
     36a:	43a0      	bics	r0, r4
     36c:	4644      	mov	r4, r8
     36e:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     370:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     372:	43b8      	bics	r0, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     374:	4330      	orrs	r0, r6
     376:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     378:	5518      	strb	r0, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     37a:	203c      	movs	r0, #60	; 0x3c
     37c:	4680      	mov	r8, r0
     37e:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     380:	4664      	mov	r4, ip
     382:	43a0      	bics	r0, r4
	tmp |= PORT_PMUX_PMUXE(data);
     384:	3c0d      	subs	r4, #13
     386:	4320      	orrs	r0, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     388:	4644      	mov	r4, r8
     38a:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     38c:	2080      	movs	r0, #128	; 0x80
     38e:	0300      	lsls	r0, r0, #12
     390:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     392:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     394:	6299      	str	r1, [r3, #40]	; 0x28
     396:	4a11      	ldr	r2, [pc, #68]	; (3dc <SPI_0_PORT_init+0x148>)
     398:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     39a:	2253      	movs	r2, #83	; 0x53
     39c:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     39e:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3a0:	4331      	orrs	r1, r6
     3a2:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3a4:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3a6:	2139      	movs	r1, #57	; 0x39
     3a8:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3aa:	402a      	ands	r2, r5
	tmp |= PORT_PMUX_PMUXO(data);
     3ac:	4658      	mov	r0, fp
     3ae:	4302      	orrs	r2, r0
     3b0:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3b2:	545a      	strb	r2, [r3, r1]

	// Set pin direction to output
	gpio_set_pin_direction(PA19, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PA19, PINMUX_PA19D_SERCOM3_PAD3);
}
     3b4:	bc3c      	pop	{r2, r3, r4, r5}
     3b6:	4690      	mov	r8, r2
     3b8:	4699      	mov	r9, r3
     3ba:	46a2      	mov	sl, r4
     3bc:	46ab      	mov	fp, r5
     3be:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3c0:	40002800 	.word	0x40002800
     3c4:	40000800 	.word	0x40000800
     3c8:	c0000004 	.word	0xc0000004
     3cc:	40020000 	.word	0x40020000
     3d0:	c0020001 	.word	0xc0020001
     3d4:	c0000002 	.word	0xc0000002
     3d8:	c0020100 	.word	0xc0020100
     3dc:	c0000008 	.word	0xc0000008

000003e0 <SPI_0_CLOCK_init>:
     3e0:	4b06      	ldr	r3, [pc, #24]	; (3fc <SPI_0_CLOCK_init+0x1c>)
     3e2:	2140      	movs	r1, #64	; 0x40
     3e4:	22d4      	movs	r2, #212	; 0xd4
     3e6:	5099      	str	r1, [r3, r2]
     3e8:	3103      	adds	r1, #3
     3ea:	3a10      	subs	r2, #16
     3ec:	5099      	str	r1, [r3, r2]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM3;
     3ee:	4a04      	ldr	r2, [pc, #16]	; (400 <SPI_0_CLOCK_init+0x20>)
     3f0:	69d3      	ldr	r3, [r2, #28]
     3f2:	393b      	subs	r1, #59	; 0x3b
     3f4:	430b      	orrs	r3, r1
     3f6:	61d3      	str	r3, [r2, #28]
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_SLOW, CONF_GCLK_SERCOM3_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBCMASK_SERCOM3_bit(MCLK);
}
     3f8:	4770      	bx	lr
     3fa:	46c0      	nop			; (mov r8, r8)
     3fc:	40001800 	.word	0x40001800
     400:	40000400 	.word	0x40000400

00000404 <SPI_0_init>:

void SPI_0_init(void)
{
     404:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
     406:	4b04      	ldr	r3, [pc, #16]	; (418 <SPI_0_init+0x14>)
     408:	4798      	blx	r3
	spi_s_sync_init(&SPI_0, SERCOM3);
     40a:	4904      	ldr	r1, [pc, #16]	; (41c <SPI_0_init+0x18>)
     40c:	4804      	ldr	r0, [pc, #16]	; (420 <SPI_0_init+0x1c>)
     40e:	4b05      	ldr	r3, [pc, #20]	; (424 <SPI_0_init+0x20>)
     410:	4798      	blx	r3
	SPI_0_PORT_init();
     412:	4b05      	ldr	r3, [pc, #20]	; (428 <SPI_0_init+0x24>)
     414:	4798      	blx	r3
}
     416:	bd10      	pop	{r4, pc}
     418:	000003e1 	.word	0x000003e1
     41c:	42000c00 	.word	0x42000c00
     420:	20000044 	.word	0x20000044
     424:	00000a11 	.word	0x00000a11
     428:	00000295 	.word	0x00000295

0000042c <DAC_0_PORT_init>:

void DAC_0_PORT_init(void)
{
     42c:	b5f0      	push	{r4, r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     42e:	25c0      	movs	r5, #192	; 0xc0
     430:	05ed      	lsls	r5, r5, #23
     432:	2304      	movs	r3, #4
     434:	606b      	str	r3, [r5, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     436:	4b14      	ldr	r3, [pc, #80]	; (488 <DAC_0_PORT_init+0x5c>)
     438:	4a14      	ldr	r2, [pc, #80]	; (48c <DAC_0_PORT_init+0x60>)
     43a:	629a      	str	r2, [r3, #40]	; 0x28
     43c:	22c0      	movs	r2, #192	; 0xc0
     43e:	0612      	lsls	r2, r2, #24
     440:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     442:	2642      	movs	r6, #66	; 0x42
     444:	5d99      	ldrb	r1, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
     446:	2401      	movs	r4, #1
     448:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     44a:	2001      	movs	r0, #1
     44c:	4301      	orrs	r1, r0
     44e:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     450:	5599      	strb	r1, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     452:	3e11      	subs	r6, #17
     454:	5d99      	ldrb	r1, [r3, r6]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     456:	270f      	movs	r7, #15
     458:	43b9      	bics	r1, r7
	tmp |= PORT_PMUX_PMUXE(data);
     45a:	4301      	orrs	r1, r0
     45c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     45e:	5599      	strb	r1, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     460:	2120      	movs	r1, #32
     462:	6069      	str	r1, [r5, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     464:	490a      	ldr	r1, [pc, #40]	; (490 <DAC_0_PORT_init+0x64>)
     466:	6299      	str	r1, [r3, #40]	; 0x28
     468:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     46a:	2145      	movs	r1, #69	; 0x45
     46c:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     46e:	43a2      	bics	r2, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     470:	4302      	orrs	r2, r0
     472:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     474:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     476:	3913      	subs	r1, #19
     478:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     47a:	200f      	movs	r0, #15
     47c:	4002      	ands	r2, r0
	tmp |= PORT_PMUX_PMUXO(data);
     47e:	3001      	adds	r0, #1
     480:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     482:	545a      	strb	r2, [r3, r1]

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA05, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA05, PINMUX_PA05B_DAC_VOUT1);
}
     484:	bdf0      	pop	{r4, r5, r6, r7, pc}
     486:	46c0      	nop			; (mov r8, r8)
     488:	40002800 	.word	0x40002800
     48c:	40000004 	.word	0x40000004
     490:	40000020 	.word	0x40000020

00000494 <DAC_0_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_DAC;
     494:	4a05      	ldr	r2, [pc, #20]	; (4ac <DAC_0_CLOCK_init+0x18>)
     496:	69d1      	ldr	r1, [r2, #28]
     498:	2380      	movs	r3, #128	; 0x80
     49a:	015b      	lsls	r3, r3, #5
     49c:	430b      	orrs	r3, r1
     49e:	61d3      	str	r3, [r2, #28]
     4a0:	2140      	movs	r1, #64	; 0x40
     4a2:	2380      	movs	r3, #128	; 0x80
     4a4:	005b      	lsls	r3, r3, #1
     4a6:	4a02      	ldr	r2, [pc, #8]	; (4b0 <DAC_0_CLOCK_init+0x1c>)
     4a8:	50d1      	str	r1, [r2, r3]
void DAC_0_CLOCK_init(void)
{

	hri_mclk_set_APBCMASK_DAC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, DAC_GCLK_ID, CONF_GCLK_DAC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}
     4aa:	4770      	bx	lr
     4ac:	40000400 	.word	0x40000400
     4b0:	40001800 	.word	0x40001800

000004b4 <DAC_0_init>:

void DAC_0_init(void)
{
     4b4:	b510      	push	{r4, lr}
	DAC_0_CLOCK_init();
     4b6:	4b04      	ldr	r3, [pc, #16]	; (4c8 <DAC_0_init+0x14>)
     4b8:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
     4ba:	4904      	ldr	r1, [pc, #16]	; (4cc <DAC_0_init+0x18>)
     4bc:	4804      	ldr	r0, [pc, #16]	; (4d0 <DAC_0_init+0x1c>)
     4be:	4b05      	ldr	r3, [pc, #20]	; (4d4 <DAC_0_init+0x20>)
     4c0:	4798      	blx	r3
	DAC_0_PORT_init();
     4c2:	4b05      	ldr	r3, [pc, #20]	; (4d8 <DAC_0_init+0x24>)
     4c4:	4798      	blx	r3
}
     4c6:	bd10      	pop	{r4, pc}
     4c8:	00000495 	.word	0x00000495
     4cc:	42003000 	.word	0x42003000
     4d0:	20000030 	.word	0x20000030
     4d4:	0000064d 	.word	0x0000064d
     4d8:	0000042d 	.word	0x0000042d

000004dc <system_init>:

void system_init(void)
{
     4dc:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     4de:	4b04      	ldr	r3, [pc, #16]	; (4f0 <system_init+0x14>)
     4e0:	4798      	blx	r3
	init_mcu();

	ADC_0_init();
     4e2:	4b04      	ldr	r3, [pc, #16]	; (4f4 <system_init+0x18>)
     4e4:	4798      	blx	r3

	SPI_0_init();
     4e6:	4b04      	ldr	r3, [pc, #16]	; (4f8 <system_init+0x1c>)
     4e8:	4798      	blx	r3

	DAC_0_init();
     4ea:	4b04      	ldr	r3, [pc, #16]	; (4fc <system_init+0x20>)
     4ec:	4798      	blx	r3
     4ee:	bd10      	pop	{r4, pc}
     4f0:	00000d39 	.word	0x00000d39
     4f4:	00000281 	.word	0x00000281
     4f8:	00000405 	.word	0x00000405
     4fc:	000004b5 	.word	0x000004b5

00000500 <adc_sync_init>:
#define MAX_ADC_AMOUNT ADC_INST_NUM
/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
     500:	b570      	push	{r4, r5, r6, lr}
     502:	0004      	movs	r4, r0
     504:	000d      	movs	r5, r1
    ASSERT(descr && hw);
     506:	2800      	cmp	r0, #0
     508:	d00c      	beq.n	524 <adc_sync_init+0x24>
     50a:	0008      	movs	r0, r1
     50c:	1e43      	subs	r3, r0, #1
     50e:	4198      	sbcs	r0, r3
     510:	b2c0      	uxtb	r0, r0
     512:	2234      	movs	r2, #52	; 0x34
     514:	4904      	ldr	r1, [pc, #16]	; (528 <adc_sync_init+0x28>)
     516:	4b05      	ldr	r3, [pc, #20]	; (52c <adc_sync_init+0x2c>)
     518:	4798      	blx	r3
    return _adc_sync_init(&descr->device, hw);
     51a:	0029      	movs	r1, r5
     51c:	0020      	movs	r0, r4
     51e:	4b04      	ldr	r3, [pc, #16]	; (530 <adc_sync_init+0x30>)
     520:	4798      	blx	r3
}
     522:	bd70      	pop	{r4, r5, r6, pc}
     524:	2000      	movs	r0, #0
     526:	e7f4      	b.n	512 <adc_sync_init+0x12>
     528:	000036fc 	.word	0x000036fc
     52c:	00000ae1 	.word	0x00000ae1
     530:	00000c5d 	.word	0x00000c5d

00000534 <adc_sync_enable_channel>:
}
/**
 * \brief Enable ADC
 */
int32_t adc_sync_enable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
     534:	b570      	push	{r4, r5, r6, lr}
     536:	0004      	movs	r4, r0
     538:	000d      	movs	r5, r1
    ASSERT(descr);
     53a:	1e43      	subs	r3, r0, #1
     53c:	4198      	sbcs	r0, r3
     53e:	b2c0      	uxtb	r0, r0
     540:	2245      	movs	r2, #69	; 0x45
     542:	4904      	ldr	r1, [pc, #16]	; (554 <adc_sync_enable_channel+0x20>)
     544:	4b04      	ldr	r3, [pc, #16]	; (558 <adc_sync_enable_channel+0x24>)
     546:	4798      	blx	r3
    _adc_sync_enable_channel(&descr->device, channel);
     548:	0029      	movs	r1, r5
     54a:	0020      	movs	r0, r4
     54c:	4b03      	ldr	r3, [pc, #12]	; (55c <adc_sync_enable_channel+0x28>)
     54e:	4798      	blx	r3
    return ERR_NONE;
}
     550:	2000      	movs	r0, #0
     552:	bd70      	pop	{r4, r5, r6, pc}
     554:	000036fc 	.word	0x000036fc
     558:	00000ae1 	.word	0x00000ae1
     55c:	00000c95 	.word	0x00000c95

00000560 <adc_sync_disable_channel>:
/**
 * \brief Disable ADC
 */
int32_t adc_sync_disable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
     560:	b570      	push	{r4, r5, r6, lr}
     562:	0004      	movs	r4, r0
     564:	000d      	movs	r5, r1
    ASSERT(descr);
     566:	1e43      	subs	r3, r0, #1
     568:	4198      	sbcs	r0, r3
     56a:	b2c0      	uxtb	r0, r0
     56c:	224e      	movs	r2, #78	; 0x4e
     56e:	4904      	ldr	r1, [pc, #16]	; (580 <adc_sync_disable_channel+0x20>)
     570:	4b04      	ldr	r3, [pc, #16]	; (584 <adc_sync_disable_channel+0x24>)
     572:	4798      	blx	r3
    _adc_sync_disable_channel(&descr->device, channel);
     574:	0029      	movs	r1, r5
     576:	0020      	movs	r0, r4
     578:	4b03      	ldr	r3, [pc, #12]	; (588 <adc_sync_disable_channel+0x28>)
     57a:	4798      	blx	r3
    return ERR_NONE;
}
     57c:	2000      	movs	r0, #0
     57e:	bd70      	pop	{r4, r5, r6, pc}
     580:	000036fc 	.word	0x000036fc
     584:	00000ae1 	.word	0x00000ae1
     588:	00000ca9 	.word	0x00000ca9

0000058c <adc_sync_read_channel>:
/*
 * \brief Read data from ADC
 */
int32_t adc_sync_read_channel(struct adc_sync_descriptor *const descr, const uint8_t channel, uint8_t *const buffer,
                              const uint16_t length)
{
     58c:	b5f0      	push	{r4, r5, r6, r7, lr}
     58e:	46de      	mov	lr, fp
     590:	4657      	mov	r7, sl
     592:	464e      	mov	r6, r9
     594:	4645      	mov	r5, r8
     596:	b5e0      	push	{r5, r6, r7, lr}
     598:	b083      	sub	sp, #12
     59a:	0006      	movs	r6, r0
     59c:	000d      	movs	r5, r1
     59e:	4691      	mov	r9, r2
     5a0:	9301      	str	r3, [sp, #4]
    uint8_t  data_size;
    uint16_t offset = 0;
    ASSERT(descr && buffer && length);
     5a2:	2800      	cmp	r0, #0
     5a4:	d01e      	beq.n	5e4 <adc_sync_read_channel+0x58>
     5a6:	2a00      	cmp	r2, #0
     5a8:	d01e      	beq.n	5e8 <adc_sync_read_channel+0x5c>
     5aa:	0018      	movs	r0, r3
     5ac:	1e43      	subs	r3, r0, #1
     5ae:	4198      	sbcs	r0, r3
     5b0:	225a      	movs	r2, #90	; 0x5a
     5b2:	491f      	ldr	r1, [pc, #124]	; (630 <adc_sync_read_channel+0xa4>)
     5b4:	4f1f      	ldr	r7, [pc, #124]	; (634 <adc_sync_read_channel+0xa8>)
     5b6:	47b8      	blx	r7
    data_size = _adc_sync_get_data_size(&descr->device);
     5b8:	0034      	movs	r4, r6
     5ba:	0030      	movs	r0, r6
     5bc:	4b1e      	ldr	r3, [pc, #120]	; (638 <adc_sync_read_channel+0xac>)
     5be:	4798      	blx	r3
     5c0:	0001      	movs	r1, r0
     5c2:	4680      	mov	r8, r0
    ASSERT(!(length % data_size));
     5c4:	9801      	ldr	r0, [sp, #4]
     5c6:	4b1d      	ldr	r3, [pc, #116]	; (63c <adc_sync_read_channel+0xb0>)
     5c8:	4798      	blx	r3
     5ca:	4248      	negs	r0, r1
     5cc:	4148      	adcs	r0, r1
     5ce:	b2c0      	uxtb	r0, r0
     5d0:	225c      	movs	r2, #92	; 0x5c
     5d2:	4917      	ldr	r1, [pc, #92]	; (630 <adc_sync_read_channel+0xa4>)
     5d4:	47b8      	blx	r7
    uint16_t offset = 0;
     5d6:	2700      	movs	r7, #0
    do {
        uint16_t result;
        _adc_sync_convert(&descr->device);
     5d8:	4b19      	ldr	r3, [pc, #100]	; (640 <adc_sync_read_channel+0xb4>)
     5da:	469b      	mov	fp, r3
        while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
     5dc:	4e19      	ldr	r6, [pc, #100]	; (644 <adc_sync_read_channel+0xb8>)
            ;
        result         = _adc_sync_read_channel_data(&descr->device, channel);
     5de:	4b1a      	ldr	r3, [pc, #104]	; (648 <adc_sync_read_channel+0xbc>)
     5e0:	469a      	mov	sl, r3
     5e2:	e008      	b.n	5f6 <adc_sync_read_channel+0x6a>
    ASSERT(descr && buffer && length);
     5e4:	2000      	movs	r0, #0
     5e6:	e7e3      	b.n	5b0 <adc_sync_read_channel+0x24>
     5e8:	2000      	movs	r0, #0
     5ea:	e7e1      	b.n	5b0 <adc_sync_read_channel+0x24>
     5ec:	4447      	add	r7, r8
     5ee:	b2bf      	uxth	r7, r7
        buffer[offset] = result;
        if (1 < data_size) {
            buffer[offset + 1] = result >> 8;
        }
        offset += data_size;
    } while (offset < length);
     5f0:	9b01      	ldr	r3, [sp, #4]
     5f2:	42bb      	cmp	r3, r7
     5f4:	d913      	bls.n	61e <adc_sync_read_channel+0x92>
        _adc_sync_convert(&descr->device);
     5f6:	0020      	movs	r0, r4
     5f8:	47d8      	blx	fp
        while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
     5fa:	0029      	movs	r1, r5
     5fc:	0020      	movs	r0, r4
     5fe:	47b0      	blx	r6
     600:	2800      	cmp	r0, #0
     602:	d0fa      	beq.n	5fa <adc_sync_read_channel+0x6e>
        result         = _adc_sync_read_channel_data(&descr->device, channel);
     604:	0029      	movs	r1, r5
     606:	0020      	movs	r0, r4
     608:	47d0      	blx	sl
        buffer[offset] = result;
     60a:	464b      	mov	r3, r9
     60c:	55d8      	strb	r0, [r3, r7]
        if (1 < data_size) {
     60e:	4643      	mov	r3, r8
     610:	2b01      	cmp	r3, #1
     612:	d9eb      	bls.n	5ec <adc_sync_read_channel+0x60>
            buffer[offset + 1] = result >> 8;
     614:	464b      	mov	r3, r9
     616:	19db      	adds	r3, r3, r7
     618:	0a00      	lsrs	r0, r0, #8
     61a:	7058      	strb	r0, [r3, #1]
     61c:	e7e6      	b.n	5ec <adc_sync_read_channel+0x60>
    return offset;
}
     61e:	0038      	movs	r0, r7
     620:	b003      	add	sp, #12
     622:	bc3c      	pop	{r2, r3, r4, r5}
     624:	4690      	mov	r8, r2
     626:	4699      	mov	r9, r3
     628:	46a2      	mov	sl, r4
     62a:	46ab      	mov	fp, r5
     62c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     62e:	46c0      	nop			; (mov r8, r8)
     630:	000036fc 	.word	0x000036fc
     634:	00000ae1 	.word	0x00000ae1
     638:	00000cbd 	.word	0x00000cbd
     63c:	00001fa5 	.word	0x00001fa5
     640:	00000cd9 	.word	0x00000cd9
     644:	00000ccf 	.word	0x00000ccf
     648:	00000ceb 	.word	0x00000ceb

0000064c <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
     64c:	b570      	push	{r4, r5, r6, lr}
     64e:	0005      	movs	r5, r0
     650:	000c      	movs	r4, r1
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
     652:	2800      	cmp	r0, #0
     654:	d013      	beq.n	67e <dac_sync_init+0x32>
     656:	0008      	movs	r0, r1
     658:	1e43      	subs	r3, r0, #1
     65a:	4198      	sbcs	r0, r3
     65c:	b2c0      	uxtb	r0, r0
     65e:	2232      	movs	r2, #50	; 0x32
     660:	4908      	ldr	r1, [pc, #32]	; (684 <dac_sync_init+0x38>)
     662:	4b09      	ldr	r3, [pc, #36]	; (688 <dac_sync_init+0x3c>)
     664:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
     666:	0021      	movs	r1, r4
     668:	0028      	movs	r0, r5
     66a:	4b08      	ldr	r3, [pc, #32]	; (68c <dac_sync_init+0x40>)
     66c:	4798      	blx	r3
	if (rc) {
     66e:	2800      	cmp	r0, #0
     670:	d104      	bne.n	67c <dac_sync_init+0x30>
		return rc;
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
     672:	2300      	movs	r3, #0
     674:	606b      	str	r3, [r5, #4]
		descr->sel_ch[i].length = 0;
     676:	60ab      	str	r3, [r5, #8]
		descr->sel_ch[i].buffer = NULL;
     678:	60eb      	str	r3, [r5, #12]
		descr->sel_ch[i].length = 0;
     67a:	612b      	str	r3, [r5, #16]
	}

	return ERR_NONE;
}
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	2000      	movs	r0, #0
     680:	e7ed      	b.n	65e <dac_sync_init+0x12>
     682:	46c0      	nop			; (mov r8, r8)
     684:	00003718 	.word	0x00003718
     688:	00000ae1 	.word	0x00000ae1
     68c:	00000e05 	.word	0x00000e05

00000690 <dac_sync_enable_channel>:

/**
 * \brief Enable DAC channel
 */
int32_t dac_sync_enable_channel(struct dac_sync_descriptor *const descr, const uint8_t ch)
{
     690:	b570      	push	{r4, r5, r6, lr}
     692:	0004      	movs	r4, r0
     694:	000d      	movs	r5, r1
	ASSERT(descr && (ch < CHANNEL_NUM));
     696:	2800      	cmp	r0, #0
     698:	d010      	beq.n	6bc <dac_sync_enable_channel+0x2c>
     69a:	2000      	movs	r0, #0
     69c:	2301      	movs	r3, #1
     69e:	428b      	cmp	r3, r1
     6a0:	4140      	adcs	r0, r0
     6a2:	b2c0      	uxtb	r0, r0
     6a4:	2301      	movs	r3, #1
     6a6:	4018      	ands	r0, r3
     6a8:	2252      	movs	r2, #82	; 0x52
     6aa:	4905      	ldr	r1, [pc, #20]	; (6c0 <dac_sync_enable_channel+0x30>)
     6ac:	4b05      	ldr	r3, [pc, #20]	; (6c4 <dac_sync_enable_channel+0x34>)
     6ae:	4798      	blx	r3

	_dac_sync_enable_channel(&descr->device, ch);
     6b0:	0029      	movs	r1, r5
     6b2:	0020      	movs	r0, r4
     6b4:	4b04      	ldr	r3, [pc, #16]	; (6c8 <dac_sync_enable_channel+0x38>)
     6b6:	4798      	blx	r3

	return ERR_NONE;
}
     6b8:	2000      	movs	r0, #0
     6ba:	bd70      	pop	{r4, r5, r6, pc}
     6bc:	2000      	movs	r0, #0
     6be:	e7f1      	b.n	6a4 <dac_sync_enable_channel+0x14>
     6c0:	00003718 	.word	0x00003718
     6c4:	00000ae1 	.word	0x00000ae1
     6c8:	00000e31 	.word	0x00000e31

000006cc <dac_sync_disable_channel>:

/**
 * \brief Disable DAC channel
 */
int32_t dac_sync_disable_channel(struct dac_sync_descriptor *const descr, const uint8_t ch)
{
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	0004      	movs	r4, r0
     6d0:	000d      	movs	r5, r1
	ASSERT(descr && (ch < CHANNEL_NUM));
     6d2:	2800      	cmp	r0, #0
     6d4:	d010      	beq.n	6f8 <dac_sync_disable_channel+0x2c>
     6d6:	2000      	movs	r0, #0
     6d8:	2301      	movs	r3, #1
     6da:	428b      	cmp	r3, r1
     6dc:	4140      	adcs	r0, r0
     6de:	b2c0      	uxtb	r0, r0
     6e0:	2301      	movs	r3, #1
     6e2:	4018      	ands	r0, r3
     6e4:	225e      	movs	r2, #94	; 0x5e
     6e6:	4905      	ldr	r1, [pc, #20]	; (6fc <dac_sync_disable_channel+0x30>)
     6e8:	4b05      	ldr	r3, [pc, #20]	; (700 <dac_sync_disable_channel+0x34>)
     6ea:	4798      	blx	r3

	_dac_sync_disable_channel(&descr->device, ch);
     6ec:	0029      	movs	r1, r5
     6ee:	0020      	movs	r0, r4
     6f0:	4b04      	ldr	r3, [pc, #16]	; (704 <dac_sync_disable_channel+0x38>)
     6f2:	4798      	blx	r3

	return ERR_NONE;
}
     6f4:	2000      	movs	r0, #0
     6f6:	bd70      	pop	{r4, r5, r6, pc}
     6f8:	2000      	movs	r0, #0
     6fa:	e7f1      	b.n	6e0 <dac_sync_disable_channel+0x14>
     6fc:	00003718 	.word	0x00003718
     700:	00000ae1 	.word	0x00000ae1
     704:	00000e87 	.word	0x00000e87

00000708 <dac_sync_write>:

/**
 * \brief DAC convert digital data to analog output
 */
int32_t dac_sync_write(struct dac_sync_descriptor *descr, const uint8_t ch, uint16_t *buffer, uint32_t length)
{
     708:	b5f0      	push	{r4, r5, r6, r7, lr}
     70a:	46ce      	mov	lr, r9
     70c:	b500      	push	{lr}
     70e:	b082      	sub	sp, #8
     710:	0007      	movs	r7, r0
     712:	000d      	movs	r5, r1
     714:	4691      	mov	r9, r2
     716:	001e      	movs	r6, r3
	ASSERT(descr && (ch < CHANNEL_NUM) && buffer && length);
     718:	2800      	cmp	r0, #0
     71a:	d02d      	beq.n	778 <dac_sync_write+0x70>
     71c:	2000      	movs	r0, #0
     71e:	2901      	cmp	r1, #1
     720:	d924      	bls.n	76c <dac_sync_write+0x64>
     722:	226a      	movs	r2, #106	; 0x6a
     724:	4919      	ldr	r1, [pc, #100]	; (78c <dac_sync_write+0x84>)
     726:	4b1a      	ldr	r3, [pc, #104]	; (790 <dac_sync_write+0x88>)
     728:	4798      	blx	r3

	/* check whether channel is enable */
	if (!_dac_sync_is_channel_enable(&descr->device, ch)) {
     72a:	9701      	str	r7, [sp, #4]
     72c:	0029      	movs	r1, r5
     72e:	0038      	movs	r0, r7
     730:	4b18      	ldr	r3, [pc, #96]	; (794 <dac_sync_write+0x8c>)
     732:	4798      	blx	r3
     734:	2800      	cmp	r0, #0
     736:	d023      	beq.n	780 <dac_sync_write+0x78>
     738:	00ec      	lsls	r4, r5, #3
     73a:	193c      	adds	r4, r7, r4
		return ERR_NOT_READY;
	}

	descr->sel_ch[ch].buffer = buffer;
     73c:	464b      	mov	r3, r9
     73e:	6063      	str	r3, [r4, #4]
	descr->sel_ch[ch].length = length;
     740:	60a6      	str	r6, [r4, #8]

	while (descr->sel_ch[ch].length) {
     742:	2e00      	cmp	r6, #0
     744:	d01f      	beq.n	786 <dac_sync_write+0x7e>
		_dac_sync_write_data(&descr->device, *(descr->sel_ch[ch].buffer), ch);
     746:	4f14      	ldr	r7, [pc, #80]	; (798 <dac_sync_write+0x90>)
     748:	6863      	ldr	r3, [r4, #4]
     74a:	8819      	ldrh	r1, [r3, #0]
     74c:	002a      	movs	r2, r5
     74e:	9801      	ldr	r0, [sp, #4]
     750:	47b8      	blx	r7
		descr->sel_ch[ch].buffer++;
     752:	6863      	ldr	r3, [r4, #4]
     754:	3302      	adds	r3, #2
     756:	6063      	str	r3, [r4, #4]
		descr->sel_ch[ch].length--;
     758:	68a3      	ldr	r3, [r4, #8]
     75a:	3b01      	subs	r3, #1
     75c:	60a3      	str	r3, [r4, #8]
	while (descr->sel_ch[ch].length) {
     75e:	2b00      	cmp	r3, #0
     760:	d1f2      	bne.n	748 <dac_sync_write+0x40>
	}

	return ERR_NONE;
     762:	2000      	movs	r0, #0
}
     764:	b002      	add	sp, #8
     766:	bc04      	pop	{r2}
     768:	4691      	mov	r9, r2
     76a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ASSERT(descr && (ch < CHANNEL_NUM) && buffer && length);
     76c:	2a00      	cmp	r2, #0
     76e:	d005      	beq.n	77c <dac_sync_write+0x74>
     770:	0030      	movs	r0, r6
     772:	1e43      	subs	r3, r0, #1
     774:	4198      	sbcs	r0, r3
     776:	e7d4      	b.n	722 <dac_sync_write+0x1a>
     778:	2000      	movs	r0, #0
     77a:	e7d2      	b.n	722 <dac_sync_write+0x1a>
     77c:	2000      	movs	r0, #0
     77e:	e7d0      	b.n	722 <dac_sync_write+0x1a>
		return ERR_NOT_READY;
     780:	201d      	movs	r0, #29
     782:	4240      	negs	r0, r0
     784:	e7ee      	b.n	764 <dac_sync_write+0x5c>
	return ERR_NONE;
     786:	2000      	movs	r0, #0
     788:	e7ec      	b.n	764 <dac_sync_write+0x5c>
     78a:	46c0      	nop			; (mov r8, r8)
     78c:	00003718 	.word	0x00003718
     790:	00000ae1 	.word	0x00000ae1
     794:	00000ee1 	.word	0x00000ee1
     798:	00000f03 	.word	0x00000f03

0000079c <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
     79c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
     79e:	4b04      	ldr	r3, [pc, #16]	; (7b0 <delay_us+0x14>)
     7a0:	681c      	ldr	r4, [r3, #0]
     7a2:	4b04      	ldr	r3, [pc, #16]	; (7b4 <delay_us+0x18>)
     7a4:	4798      	blx	r3
     7a6:	0001      	movs	r1, r0
     7a8:	0020      	movs	r0, r4
     7aa:	4b03      	ldr	r3, [pc, #12]	; (7b8 <delay_us+0x1c>)
     7ac:	4798      	blx	r3
}
     7ae:	bd10      	pop	{r4, pc}
     7b0:	2000002c 	.word	0x2000002c
     7b4:	00000cf5 	.word	0x00000cf5
     7b8:	00000d31 	.word	0x00000d31

000007bc <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     7bc:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     7be:	4b04      	ldr	r3, [pc, #16]	; (7d0 <delay_ms+0x14>)
     7c0:	681c      	ldr	r4, [r3, #0]
     7c2:	4b04      	ldr	r3, [pc, #16]	; (7d4 <delay_ms+0x18>)
     7c4:	4798      	blx	r3
     7c6:	0001      	movs	r1, r0
     7c8:	0020      	movs	r0, r4
     7ca:	4b03      	ldr	r3, [pc, #12]	; (7d8 <delay_ms+0x1c>)
     7cc:	4798      	blx	r3
}
     7ce:	bd10      	pop	{r4, pc}
     7d0:	2000002c 	.word	0x2000002c
     7d4:	00000d11 	.word	0x00000d11
     7d8:	00000d31 	.word	0x00000d31

000007dc <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     7dc:	b570      	push	{r4, r5, r6, lr}
     7de:	0006      	movs	r6, r0
     7e0:	000c      	movs	r4, r1
     7e2:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     7e4:	2800      	cmp	r0, #0
     7e6:	d00d      	beq.n	804 <io_write+0x28>
     7e8:	0008      	movs	r0, r1
     7ea:	1e43      	subs	r3, r0, #1
     7ec:	4198      	sbcs	r0, r3
     7ee:	b2c0      	uxtb	r0, r0
     7f0:	2234      	movs	r2, #52	; 0x34
     7f2:	4905      	ldr	r1, [pc, #20]	; (808 <io_write+0x2c>)
     7f4:	4b05      	ldr	r3, [pc, #20]	; (80c <io_write+0x30>)
     7f6:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     7f8:	6833      	ldr	r3, [r6, #0]
     7fa:	002a      	movs	r2, r5
     7fc:	0021      	movs	r1, r4
     7fe:	0030      	movs	r0, r6
     800:	4798      	blx	r3
}
     802:	bd70      	pop	{r4, r5, r6, pc}
     804:	2000      	movs	r0, #0
     806:	e7f3      	b.n	7f0 <io_write+0x14>
     808:	00003734 	.word	0x00003734
     80c:	00000ae1 	.word	0x00000ae1

00000810 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     810:	b570      	push	{r4, r5, r6, lr}
     812:	0006      	movs	r6, r0
     814:	000c      	movs	r4, r1
     816:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     818:	2800      	cmp	r0, #0
     81a:	d00d      	beq.n	838 <io_read+0x28>
     81c:	0008      	movs	r0, r1
     81e:	1e43      	subs	r3, r0, #1
     820:	4198      	sbcs	r0, r3
     822:	b2c0      	uxtb	r0, r0
     824:	223d      	movs	r2, #61	; 0x3d
     826:	4905      	ldr	r1, [pc, #20]	; (83c <io_read+0x2c>)
     828:	4b05      	ldr	r3, [pc, #20]	; (840 <io_read+0x30>)
     82a:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     82c:	6873      	ldr	r3, [r6, #4]
     82e:	002a      	movs	r2, r5
     830:	0021      	movs	r1, r4
     832:	0030      	movs	r0, r6
     834:	4798      	blx	r3
}
     836:	bd70      	pop	{r4, r5, r6, pc}
     838:	2000      	movs	r0, #0
     83a:	e7f3      	b.n	824 <io_read+0x14>
     83c:	00003734 	.word	0x00003734
     840:	00000ae1 	.word	0x00000ae1

00000844 <_spi_s_sync_xfer>:
 *  \return Error or number of characters transferred.
 *  \retval <0 Error.
 *  \retval >=0 Number of characters transferred.
 */
static int32_t _spi_s_sync_xfer(struct spi_s_sync_descriptor *spi, const struct spi_xfer *xfer, const uint8_t flags)
{
     844:	b5f0      	push	{r4, r5, r6, r7, lr}
     846:	46de      	mov	lr, fp
     848:	4657      	mov	r7, sl
     84a:	464e      	mov	r6, r9
     84c:	4645      	mov	r5, r8
     84e:	b5e0      	push	{r5, r6, r7, lr}
     850:	b083      	sub	sp, #12
     852:	1e05      	subs	r5, r0, #0
     854:	468b      	mov	fp, r1
     856:	4691      	mov	r9, r2
		uint16_t u16;
		uint8_t  u8[4];
	} tmp;
	uint32_t n_bytes;

	ASSERT(spi && xfer);
     858:	d01e      	beq.n	898 <_spi_s_sync_xfer+0x54>
     85a:	0008      	movs	r0, r1
     85c:	1e43      	subs	r3, r0, #1
     85e:	4198      	sbcs	r0, r3
     860:	b2c0      	uxtb	r0, r0
     862:	2248      	movs	r2, #72	; 0x48
     864:	4946      	ldr	r1, [pc, #280]	; (980 <_spi_s_sync_xfer+0x13c>)
     866:	4b47      	ldr	r3, [pc, #284]	; (984 <_spi_s_sync_xfer+0x140>)
     868:	4798      	blx	r3

	if (xfer->size == 0) {
     86a:	465b      	mov	r3, fp
     86c:	689e      	ldr	r6, [r3, #8]
		return 0;
     86e:	2000      	movs	r0, #0
	if (xfer->size == 0) {
     870:	2e00      	cmp	r6, #0
     872:	d072      	beq.n	95a <_spi_s_sync_xfer+0x116>
	}

	n_bytes = xfer->size;
	if (spi->dev.char_size > 1) {
     874:	7a2b      	ldrb	r3, [r5, #8]
     876:	2b01      	cmp	r3, #1
     878:	d910      	bls.n	89c <_spi_s_sync_xfer+0x58>
		n_bytes <<= 1;
     87a:	0076      	lsls	r6, r6, #1
	}

	tmp.u16 = 0;
     87c:	2200      	movs	r2, #0
     87e:	ab01      	add	r3, sp, #4
     880:	801a      	strh	r2, [r3, #0]
	for (txcnt = 0, rxcnt = 0; txcnt < n_bytes && rxcnt < n_bytes;) {
     882:	46b0      	mov	r8, r6
     884:	1e37      	subs	r7, r6, #0
     886:	d064      	beq.n	952 <_spi_s_sync_xfer+0x10e>
     888:	2300      	movs	r3, #0
     88a:	4698      	mov	r8, r3
     88c:	2700      	movs	r7, #0
		if (_spi_s_sync_is_error(&spi->dev)) {
			return ERR_IO;
		}
		if ((flags & SPI_XFER_TX_EN) && _spi_s_sync_is_tx_ready(&spi->dev)) {
     88e:	3301      	adds	r3, #1
     890:	464a      	mov	r2, r9
     892:	401a      	ands	r2, r3
     894:	4692      	mov	sl, r2
     896:	e045      	b.n	924 <_spi_s_sync_xfer+0xe0>
     898:	2000      	movs	r0, #0
     89a:	e7e2      	b.n	862 <_spi_s_sync_xfer+0x1e>
	tmp.u16 = 0;
     89c:	2200      	movs	r2, #0
     89e:	ab01      	add	r3, sp, #4
     8a0:	801a      	strh	r2, [r3, #0]
     8a2:	e7f1      	b.n	888 <_spi_s_sync_xfer+0x44>
		if ((flags & SPI_XFER_TX_EN) && _spi_s_sync_is_tx_ready(&spi->dev)) {
     8a4:	0020      	movs	r0, r4
     8a6:	4b38      	ldr	r3, [pc, #224]	; (988 <_spi_s_sync_xfer+0x144>)
     8a8:	4798      	blx	r3
     8aa:	2800      	cmp	r0, #0
     8ac:	d043      	beq.n	936 <_spi_s_sync_xfer+0xf2>
			tmp.u8[0] = xfer->txbuf[txcnt++];
     8ae:	465b      	mov	r3, fp
     8b0:	681b      	ldr	r3, [r3, #0]
     8b2:	1c78      	adds	r0, r7, #1
     8b4:	5dd9      	ldrb	r1, [r3, r7]
     8b6:	aa01      	add	r2, sp, #4
     8b8:	7011      	strb	r1, [r2, #0]
			if (spi->dev.char_size > 1) {
     8ba:	7a2a      	ldrb	r2, [r5, #8]
     8bc:	2a01      	cmp	r2, #1
     8be:	d909      	bls.n	8d4 <_spi_s_sync_xfer+0x90>
				tmp.u8[1] = xfer->txbuf[txcnt++];
     8c0:	3702      	adds	r7, #2
     8c2:	5c1a      	ldrb	r2, [r3, r0]
     8c4:	ab01      	add	r3, sp, #4
     8c6:	705a      	strb	r2, [r3, #1]
			}
			_spi_s_sync_write_one(&spi->dev, tmp.u16);
     8c8:	ab01      	add	r3, sp, #4
     8ca:	8819      	ldrh	r1, [r3, #0]
     8cc:	0020      	movs	r0, r4
     8ce:	4b2f      	ldr	r3, [pc, #188]	; (98c <_spi_s_sync_xfer+0x148>)
     8d0:	4798      	blx	r3
     8d2:	e030      	b.n	936 <_spi_s_sync_xfer+0xf2>
			tmp.u8[0] = xfer->txbuf[txcnt++];
     8d4:	0007      	movs	r7, r0
     8d6:	e7f7      	b.n	8c8 <_spi_s_sync_xfer+0x84>
		}
		if ((flags & SPI_XFER_RX_EN) && _spi_s_sync_is_rx_ready(&spi->dev)) {
     8d8:	0020      	movs	r0, r4
     8da:	4b2d      	ldr	r3, [pc, #180]	; (990 <_spi_s_sync_xfer+0x14c>)
     8dc:	4798      	blx	r3
     8de:	2800      	cmp	r0, #0
     8e0:	d02c      	beq.n	93c <_spi_s_sync_xfer+0xf8>
			tmp.u16 = _spi_s_sync_read_one(&spi->dev);
     8e2:	0020      	movs	r0, r4
     8e4:	4b2b      	ldr	r3, [pc, #172]	; (994 <_spi_s_sync_xfer+0x150>)
     8e6:	4798      	blx	r3
     8e8:	ab01      	add	r3, sp, #4
     8ea:	8018      	strh	r0, [r3, #0]

			if (xfer->rxbuf) {
     8ec:	465b      	mov	r3, fp
     8ee:	685b      	ldr	r3, [r3, #4]
     8f0:	2b00      	cmp	r3, #0
     8f2:	d023      	beq.n	93c <_spi_s_sync_xfer+0xf8>
				xfer->rxbuf[rxcnt++] = tmp.u8[0];
     8f4:	4642      	mov	r2, r8
     8f6:	3201      	adds	r2, #1
     8f8:	a901      	add	r1, sp, #4
     8fa:	7809      	ldrb	r1, [r1, #0]
     8fc:	4640      	mov	r0, r8
     8fe:	5419      	strb	r1, [r3, r0]
				if (spi->dev.char_size > 1) {
     900:	7a2b      	ldrb	r3, [r5, #8]
     902:	2b01      	cmp	r3, #1
     904:	d908      	bls.n	918 <_spi_s_sync_xfer+0xd4>
					xfer->rxbuf[rxcnt++] = tmp.u8[1];
     906:	2302      	movs	r3, #2
     908:	469c      	mov	ip, r3
     90a:	44e0      	add	r8, ip
     90c:	ab01      	add	r3, sp, #4
     90e:	785b      	ldrb	r3, [r3, #1]
     910:	4659      	mov	r1, fp
     912:	6849      	ldr	r1, [r1, #4]
     914:	548b      	strb	r3, [r1, r2]
     916:	e011      	b.n	93c <_spi_s_sync_xfer+0xf8>
				xfer->rxbuf[rxcnt++] = tmp.u8[0];
     918:	4690      	mov	r8, r2
     91a:	e00f      	b.n	93c <_spi_s_sync_xfer+0xf8>
	for (txcnt = 0, rxcnt = 0; txcnt < n_bytes && rxcnt < n_bytes;) {
     91c:	42b7      	cmp	r7, r6
     91e:	d215      	bcs.n	94c <_spi_s_sync_xfer+0x108>
     920:	45b0      	cmp	r8, r6
     922:	d213      	bcs.n	94c <_spi_s_sync_xfer+0x108>
		if (_spi_s_sync_is_error(&spi->dev)) {
     924:	1d2c      	adds	r4, r5, #4
     926:	0020      	movs	r0, r4
     928:	4b1b      	ldr	r3, [pc, #108]	; (998 <_spi_s_sync_xfer+0x154>)
     92a:	4798      	blx	r3
     92c:	2800      	cmp	r0, #0
     92e:	d124      	bne.n	97a <_spi_s_sync_xfer+0x136>
		if ((flags & SPI_XFER_TX_EN) && _spi_s_sync_is_tx_ready(&spi->dev)) {
     930:	4653      	mov	r3, sl
     932:	2b00      	cmp	r3, #0
     934:	d1b6      	bne.n	8a4 <_spi_s_sync_xfer+0x60>
		if ((flags & SPI_XFER_RX_EN) && _spi_s_sync_is_rx_ready(&spi->dev)) {
     936:	464b      	mov	r3, r9
     938:	079b      	lsls	r3, r3, #30
     93a:	d4cd      	bmi.n	8d8 <_spi_s_sync_xfer+0x94>
				}
			}
		}
		if (spi->break_on_ss_det && _spi_s_sync_is_ss_deactivated(&spi->dev)) {
     93c:	7d2b      	ldrb	r3, [r5, #20]
     93e:	2b00      	cmp	r3, #0
     940:	d0ec      	beq.n	91c <_spi_s_sync_xfer+0xd8>
     942:	0020      	movs	r0, r4
     944:	4b15      	ldr	r3, [pc, #84]	; (99c <_spi_s_sync_xfer+0x158>)
     946:	4798      	blx	r3
     948:	2800      	cmp	r0, #0
     94a:	d0e7      	beq.n	91c <_spi_s_sync_xfer+0xd8>
			break;
		}
	}

	if (spi->dev.char_size <= 1) {
     94c:	7a2b      	ldrb	r3, [r5, #8]
     94e:	2b01      	cmp	r3, #1
     950:	d90a      	bls.n	968 <_spi_s_sync_xfer+0x124>
		return (flags & SPI_XFER_RX_EN) ? rxcnt : txcnt;
	}
	return ((flags & SPI_XFER_RX_EN) ? rxcnt : txcnt) >> 1;
     952:	0878      	lsrs	r0, r7, #1
     954:	464b      	mov	r3, r9
     956:	079b      	lsls	r3, r3, #30
     958:	d40c      	bmi.n	974 <_spi_s_sync_xfer+0x130>
}
     95a:	b003      	add	sp, #12
     95c:	bc3c      	pop	{r2, r3, r4, r5}
     95e:	4690      	mov	r8, r2
     960:	4699      	mov	r9, r3
     962:	46a2      	mov	sl, r4
     964:	46ab      	mov	fp, r5
     966:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (flags & SPI_XFER_RX_EN) ? rxcnt : txcnt;
     968:	0038      	movs	r0, r7
     96a:	464b      	mov	r3, r9
     96c:	079b      	lsls	r3, r3, #30
     96e:	d5f4      	bpl.n	95a <_spi_s_sync_xfer+0x116>
     970:	4640      	mov	r0, r8
     972:	e7f2      	b.n	95a <_spi_s_sync_xfer+0x116>
	return ((flags & SPI_XFER_RX_EN) ? rxcnt : txcnt) >> 1;
     974:	4643      	mov	r3, r8
     976:	0858      	lsrs	r0, r3, #1
     978:	e7ef      	b.n	95a <_spi_s_sync_xfer+0x116>
			return ERR_IO;
     97a:	2006      	movs	r0, #6
     97c:	4240      	negs	r0, r0
     97e:	e7ec      	b.n	95a <_spi_s_sync_xfer+0x116>
     980:	00003748 	.word	0x00003748
     984:	00000ae1 	.word	0x00000ae1
     988:	000011f1 	.word	0x000011f1
     98c:	0000118d 	.word	0x0000118d
     990:	00001225 	.word	0x00001225
     994:	000011c1 	.word	0x000011c1
     998:	00001291 	.word	0x00001291
     99c:	00001259 	.word	0x00001259

000009a0 <_spi_s_sync_io_write>:
 *  \retval 0 Success.
 *  \retval -1 Busy, transfer in progress.
 *  \retval -3 Parameter error.
 */
static int32_t _spi_s_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t size)
{
     9a0:	b570      	push	{r4, r5, r6, lr}
     9a2:	b084      	sub	sp, #16
     9a4:	0004      	movs	r4, r0
     9a6:	000e      	movs	r6, r1
     9a8:	0015      	movs	r5, r2
	struct spi_s_sync_descriptor *spi;
	struct spi_xfer               xfer;

	ASSERT(io);
     9aa:	1e43      	subs	r3, r0, #1
     9ac:	4198      	sbcs	r0, r3
     9ae:	b2c0      	uxtb	r0, r0
     9b0:	2288      	movs	r2, #136	; 0x88
     9b2:	4906      	ldr	r1, [pc, #24]	; (9cc <_spi_s_sync_io_write+0x2c>)
     9b4:	4b06      	ldr	r3, [pc, #24]	; (9d0 <_spi_s_sync_io_write+0x30>)
     9b6:	4798      	blx	r3

	spi = CONTAINER_OF(io, struct spi_s_sync_descriptor, io);

	xfer.txbuf = (uint8_t *)buf;
     9b8:	9601      	str	r6, [sp, #4]
	xfer.size  = size;
     9ba:	9503      	str	r5, [sp, #12]
	spi = CONTAINER_OF(io, struct spi_s_sync_descriptor, io);
     9bc:	0020      	movs	r0, r4
     9be:	380c      	subs	r0, #12
	return _spi_s_sync_xfer(spi, &xfer, SPI_XFER_TX_EN);
     9c0:	2201      	movs	r2, #1
     9c2:	a901      	add	r1, sp, #4
     9c4:	4b03      	ldr	r3, [pc, #12]	; (9d4 <_spi_s_sync_io_write+0x34>)
     9c6:	4798      	blx	r3
}
     9c8:	b004      	add	sp, #16
     9ca:	bd70      	pop	{r4, r5, r6, pc}
     9cc:	00003748 	.word	0x00003748
     9d0:	00000ae1 	.word	0x00000ae1
     9d4:	00000845 	.word	0x00000845

000009d8 <_spi_s_sync_io_read>:
 *  \return Read result.
 *  \retval n Number of characters read.
 *  \retval <0 Error.
 */
static int32_t _spi_s_sync_io_read(struct io_descriptor *const io, uint8_t *const buf, const uint16_t size)
{
     9d8:	b570      	push	{r4, r5, r6, lr}
     9da:	b084      	sub	sp, #16
     9dc:	0004      	movs	r4, r0
     9de:	000e      	movs	r6, r1
     9e0:	0015      	movs	r5, r2
	struct spi_s_sync_descriptor *spi;
	struct spi_xfer               xfer;

	ASSERT(io);
     9e2:	1e43      	subs	r3, r0, #1
     9e4:	4198      	sbcs	r0, r3
     9e6:	b2c0      	uxtb	r0, r0
     9e8:	22a6      	movs	r2, #166	; 0xa6
     9ea:	4906      	ldr	r1, [pc, #24]	; (a04 <_spi_s_sync_io_read+0x2c>)
     9ec:	4b06      	ldr	r3, [pc, #24]	; (a08 <_spi_s_sync_io_read+0x30>)
     9ee:	4798      	blx	r3

	spi = CONTAINER_OF(io, struct spi_s_sync_descriptor, io);

	xfer.rxbuf = (uint8_t *)buf;
     9f0:	9602      	str	r6, [sp, #8]
	xfer.size  = size;
     9f2:	9503      	str	r5, [sp, #12]
	spi = CONTAINER_OF(io, struct spi_s_sync_descriptor, io);
     9f4:	0020      	movs	r0, r4
     9f6:	380c      	subs	r0, #12
	return _spi_s_sync_xfer(spi, &xfer, SPI_XFER_RX_EN);
     9f8:	2202      	movs	r2, #2
     9fa:	a901      	add	r1, sp, #4
     9fc:	4b03      	ldr	r3, [pc, #12]	; (a0c <_spi_s_sync_io_read+0x34>)
     9fe:	4798      	blx	r3
}
     a00:	b004      	add	sp, #16
     a02:	bd70      	pop	{r4, r5, r6, pc}
     a04:	00003748 	.word	0x00003748
     a08:	00000ae1 	.word	0x00000ae1
     a0c:	00000845 	.word	0x00000845

00000a10 <spi_s_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_s_sync_hpl_interface *)func;
}

int32_t spi_s_sync_init(struct spi_s_sync_descriptor *spi, void *const hw)
{
     a10:	b570      	push	{r4, r5, r6, lr}
     a12:	0005      	movs	r5, r0
     a14:	000c      	movs	r4, r1
	int32_t rc;
	ASSERT(spi && hw);
     a16:	2800      	cmp	r0, #0
     a18:	d013      	beq.n	a42 <spi_s_sync_init+0x32>
     a1a:	0008      	movs	r0, r1
     a1c:	1e43      	subs	r3, r0, #1
     a1e:	4198      	sbcs	r0, r3
     a20:	b2c0      	uxtb	r0, r0
     a22:	22bb      	movs	r2, #187	; 0xbb
     a24:	4908      	ldr	r1, [pc, #32]	; (a48 <spi_s_sync_init+0x38>)
     a26:	4b09      	ldr	r3, [pc, #36]	; (a4c <spi_s_sync_init+0x3c>)
     a28:	4798      	blx	r3
	rc = _spi_s_sync_init(&spi->dev, hw);
     a2a:	1d28      	adds	r0, r5, #4
     a2c:	0021      	movs	r1, r4
     a2e:	4b08      	ldr	r3, [pc, #32]	; (a50 <spi_s_sync_init+0x40>)
     a30:	4798      	blx	r3

	if (rc < 0) {
     a32:	2800      	cmp	r0, #0
     a34:	db04      	blt.n	a40 <spi_s_sync_init+0x30>
		return rc;
	}

	spi->io.read  = _spi_s_sync_io_read;
     a36:	4b07      	ldr	r3, [pc, #28]	; (a54 <spi_s_sync_init+0x44>)
     a38:	612b      	str	r3, [r5, #16]
	spi->io.write = _spi_s_sync_io_write;
     a3a:	4b07      	ldr	r3, [pc, #28]	; (a58 <spi_s_sync_init+0x48>)
     a3c:	60eb      	str	r3, [r5, #12]

	return ERR_NONE;
     a3e:	2000      	movs	r0, #0
}
     a40:	bd70      	pop	{r4, r5, r6, pc}
     a42:	2000      	movs	r0, #0
     a44:	e7ed      	b.n	a22 <spi_s_sync_init+0x12>
     a46:	46c0      	nop			; (mov r8, r8)
     a48:	00003748 	.word	0x00003748
     a4c:	00000ae1 	.word	0x00000ae1
     a50:	00001115 	.word	0x00001115
     a54:	000009d9 	.word	0x000009d9
     a58:	000009a1 	.word	0x000009a1

00000a5c <spi_s_sync_enable>:
	ASSERT(spi);
	_spi_s_sync_deinit(&spi->dev);
}

void spi_s_sync_enable(struct spi_s_sync_descriptor *spi)
{
     a5c:	b510      	push	{r4, lr}
     a5e:	0004      	movs	r4, r0
	ASSERT(spi);
     a60:	1e43      	subs	r3, r0, #1
     a62:	4198      	sbcs	r0, r3
     a64:	b2c0      	uxtb	r0, r0
     a66:	22d0      	movs	r2, #208	; 0xd0
     a68:	4903      	ldr	r1, [pc, #12]	; (a78 <spi_s_sync_enable+0x1c>)
     a6a:	4b04      	ldr	r3, [pc, #16]	; (a7c <spi_s_sync_enable+0x20>)
     a6c:	4798      	blx	r3
	_spi_s_sync_enable(&spi->dev);
     a6e:	1d20      	adds	r0, r4, #4
     a70:	4b03      	ldr	r3, [pc, #12]	; (a80 <spi_s_sync_enable+0x24>)
     a72:	4798      	blx	r3
}
     a74:	bd10      	pop	{r4, pc}
     a76:	46c0      	nop			; (mov r8, r8)
     a78:	00003748 	.word	0x00003748
     a7c:	00000ae1 	.word	0x00000ae1
     a80:	00001121 	.word	0x00001121

00000a84 <spi_s_sync_set_mode>:
	ASSERT(spi);
	_spi_s_sync_disable(&spi->dev);
}

int32_t spi_s_sync_set_mode(struct spi_s_sync_descriptor *spi, const enum spi_transfer_mode mode)
{
     a84:	b570      	push	{r4, r5, r6, lr}
     a86:	0004      	movs	r4, r0
     a88:	000d      	movs	r5, r1
	ASSERT(spi);
     a8a:	1e43      	subs	r3, r0, #1
     a8c:	4198      	sbcs	r0, r3
     a8e:	b2c0      	uxtb	r0, r0
     a90:	22dc      	movs	r2, #220	; 0xdc
     a92:	4904      	ldr	r1, [pc, #16]	; (aa4 <spi_s_sync_set_mode+0x20>)
     a94:	4b04      	ldr	r3, [pc, #16]	; (aa8 <spi_s_sync_set_mode+0x24>)
     a96:	4798      	blx	r3
	return _spi_s_sync_set_mode(&spi->dev, mode);
     a98:	1d20      	adds	r0, r4, #4
     a9a:	0029      	movs	r1, r5
     a9c:	4b03      	ldr	r3, [pc, #12]	; (aac <spi_s_sync_set_mode+0x28>)
     a9e:	4798      	blx	r3
}
     aa0:	bd70      	pop	{r4, r5, r6, pc}
     aa2:	46c0      	nop			; (mov r8, r8)
     aa4:	00003748 	.word	0x00003748
     aa8:	00000ae1 	.word	0x00000ae1
     aac:	00001155 	.word	0x00001155

00000ab0 <spi_s_sync_get_io_descriptor>:
{
	return _spi_s_sync_xfer(spi, xfer, SPI_XFER_RX_EN | SPI_XFER_TX_EN);
}

int32_t spi_s_sync_get_io_descriptor(struct spi_s_sync_descriptor *spi, struct io_descriptor **io)
{
     ab0:	b570      	push	{r4, r5, r6, lr}
     ab2:	0004      	movs	r4, r0
     ab4:	000d      	movs	r5, r1
	ASSERT(spi && io);
     ab6:	2800      	cmp	r0, #0
     ab8:	d00b      	beq.n	ad2 <spi_s_sync_get_io_descriptor+0x22>
     aba:	0008      	movs	r0, r1
     abc:	1e43      	subs	r3, r0, #1
     abe:	4198      	sbcs	r0, r3
     ac0:	b2c0      	uxtb	r0, r0
     ac2:	22fa      	movs	r2, #250	; 0xfa
     ac4:	4904      	ldr	r1, [pc, #16]	; (ad8 <spi_s_sync_get_io_descriptor+0x28>)
     ac6:	4b05      	ldr	r3, [pc, #20]	; (adc <spi_s_sync_get_io_descriptor+0x2c>)
     ac8:	4798      	blx	r3
	*io = &spi->io;
     aca:	340c      	adds	r4, #12
     acc:	602c      	str	r4, [r5, #0]
	return ERR_NONE;
}
     ace:	2000      	movs	r0, #0
     ad0:	bd70      	pop	{r4, r5, r6, pc}
     ad2:	2000      	movs	r0, #0
     ad4:	e7f5      	b.n	ac2 <spi_s_sync_get_io_descriptor+0x12>
     ad6:	46c0      	nop			; (mov r8, r8)
     ad8:	00003748 	.word	0x00003748
     adc:	00000ae1 	.word	0x00000ae1

00000ae0 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     ae0:	2800      	cmp	r0, #0
     ae2:	d100      	bne.n	ae6 <assert+0x6>
		__asm("BKPT #0");
     ae4:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     ae6:	4770      	bx	lr

00000ae8 <_adc_get_regs>:
/** \brief Return the pointer to register settings of specific ADC
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific ADC.
 */
static uint8_t _adc_get_regs(const uint32_t hw_addr)
{
     ae8:	b510      	push	{r4, lr}
	uint8_t n = hw_addr;
     aea:	b2c0      	uxtb	r0, r0
	uint8_t i;

	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
		if (_adcs[i].number == n) {
     aec:	2800      	cmp	r0, #0
     aee:	d008      	beq.n	b02 <_adc_get_regs+0x1a>
     af0:	2801      	cmp	r0, #1
     af2:	d008      	beq.n	b06 <_adc_get_regs+0x1e>
			return i;
		}
	}

	ASSERT(false);
     af4:	228d      	movs	r2, #141	; 0x8d
     af6:	4905      	ldr	r1, [pc, #20]	; (b0c <_adc_get_regs+0x24>)
     af8:	2000      	movs	r0, #0
     afa:	4b05      	ldr	r3, [pc, #20]	; (b10 <_adc_get_regs+0x28>)
     afc:	4798      	blx	r3
	return 0;
     afe:	2000      	movs	r0, #0
}
     b00:	bd10      	pop	{r4, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
     b02:	2000      	movs	r0, #0
     b04:	e7fc      	b.n	b00 <_adc_get_regs+0x18>
     b06:	2001      	movs	r0, #1
     b08:	e7fa      	b.n	b00 <_adc_get_regs+0x18>
     b0a:	46c0      	nop			; (mov r8, r8)
     b0c:	0000379c 	.word	0x0000379c
     b10:	00000ae1 	.word	0x00000ae1

00000b14 <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
     b14:	b570      	push	{r4, r5, r6, lr}
     b16:	0004      	movs	r4, r0
     b18:	000d      	movs	r5, r1

	ASSERT(hw == ADC);
     b1a:	4b4c      	ldr	r3, [pc, #304]	; (c4c <_adc_init+0x138>)
     b1c:	18c0      	adds	r0, r0, r3
     b1e:	4243      	negs	r3, r0
     b20:	4158      	adcs	r0, r3
     b22:	b2c0      	uxtb	r0, r0
     b24:	22ab      	movs	r2, #171	; 0xab
     b26:	494a      	ldr	r1, [pc, #296]	; (c50 <_adc_init+0x13c>)
     b28:	4b4a      	ldr	r3, [pc, #296]	; (c54 <_adc_init+0x140>)
     b2a:	4798      	blx	r3
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
     b2c:	8c23      	ldrh	r3, [r4, #32]

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
     b2e:	07db      	lsls	r3, r3, #31
     b30:	d418      	bmi.n	b64 <_adc_init+0x50>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     b32:	2203      	movs	r2, #3
     b34:	8c23      	ldrh	r3, [r4, #32]
     b36:	4213      	tst	r3, r2
     b38:	d1fc      	bne.n	b34 <_adc_init+0x20>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
     b3a:	7823      	ldrb	r3, [r4, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
     b3c:	079b      	lsls	r3, r3, #30
     b3e:	d50b      	bpl.n	b58 <_adc_init+0x44>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
     b40:	7823      	ldrb	r3, [r4, #0]
     b42:	2202      	movs	r2, #2
     b44:	4393      	bics	r3, r2
     b46:	7023      	strb	r3, [r4, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     b48:	3201      	adds	r2, #1
     b4a:	8c23      	ldrh	r3, [r4, #32]
     b4c:	4213      	tst	r3, r2
     b4e:	d1fc      	bne.n	b4a <_adc_init+0x36>
     b50:	2202      	movs	r2, #2
     b52:	8c23      	ldrh	r3, [r4, #32]
     b54:	4213      	tst	r3, r2
     b56:	d1fc      	bne.n	b52 <_adc_init+0x3e>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
     b58:	2301      	movs	r3, #1
     b5a:	7023      	strb	r3, [r4, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     b5c:	2203      	movs	r2, #3
     b5e:	8c23      	ldrh	r3, [r4, #32]
     b60:	4213      	tst	r3, r2
     b62:	d1fc      	bne.n	b5e <_adc_init+0x4a>
     b64:	2201      	movs	r2, #1
     b66:	8c23      	ldrh	r3, [r4, #32]
     b68:	4213      	tst	r3, r2
     b6a:	d1fc      	bne.n	b66 <_adc_init+0x52>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
     b6c:	00ea      	lsls	r2, r5, #3
     b6e:	1b52      	subs	r2, r2, r5
     b70:	0092      	lsls	r2, r2, #2
     b72:	4b39      	ldr	r3, [pc, #228]	; (c58 <_adc_init+0x144>)
     b74:	189b      	adds	r3, r3, r2
     b76:	789a      	ldrb	r2, [r3, #2]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
     b78:	7062      	strb	r2, [r4, #1]
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
     b7a:	78da      	ldrb	r2, [r3, #3]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
     b7c:	70a2      	strb	r2, [r4, #2]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
     b7e:	791a      	ldrb	r2, [r3, #4]
}

static inline void hri_adc_write_EVCTRL_reg(const void *const hw, hri_adc_evctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->EVCTRL.reg = data;
     b80:	70e2      	strb	r2, [r4, #3]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
     b82:	88db      	ldrh	r3, [r3, #6]
}

static inline void hri_adc_write_INPUTCTRL_reg(const void *const hw, hri_adc_inputctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->INPUTCTRL.reg = data;
     b84:	8123      	strh	r3, [r4, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     b86:	8c23      	ldrh	r3, [r4, #32]
     b88:	055b      	lsls	r3, r3, #21
     b8a:	d1fc      	bne.n	b86 <_adc_init+0x72>
	hri_adc_write_CTRLC_reg(hw, _adcs[i].ctrl_c);
     b8c:	00eb      	lsls	r3, r5, #3
     b8e:	1b5b      	subs	r3, r3, r5
     b90:	009b      	lsls	r3, r3, #2
     b92:	4a31      	ldr	r2, [pc, #196]	; (c58 <_adc_init+0x144>)
     b94:	18d3      	adds	r3, r2, r3
     b96:	891b      	ldrh	r3, [r3, #8]
}

static inline void hri_adc_write_CTRLC_reg(const void *const hw, hri_adc_ctrlc_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLC.reg = data;
     b98:	8163      	strh	r3, [r4, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     b9a:	8c23      	ldrh	r3, [r4, #32]
     b9c:	055b      	lsls	r3, r3, #21
     b9e:	d1fc      	bne.n	b9a <_adc_init+0x86>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
     ba0:	00eb      	lsls	r3, r5, #3
     ba2:	1b5b      	subs	r3, r3, r5
     ba4:	009b      	lsls	r3, r3, #2
     ba6:	4a2c      	ldr	r2, [pc, #176]	; (c58 <_adc_init+0x144>)
     ba8:	18d3      	adds	r3, r2, r3
     baa:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
     bac:	7323      	strb	r3, [r4, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     bae:	8c23      	ldrh	r3, [r4, #32]
     bb0:	055b      	lsls	r3, r3, #21
     bb2:	d1fc      	bne.n	bae <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
     bb4:	00eb      	lsls	r3, r5, #3
     bb6:	1b5b      	subs	r3, r3, r5
     bb8:	009b      	lsls	r3, r3, #2
     bba:	4a27      	ldr	r2, [pc, #156]	; (c58 <_adc_init+0x144>)
     bbc:	18d3      	adds	r3, r2, r3
     bbe:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
     bc0:	7363      	strb	r3, [r4, #13]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     bc2:	8c23      	ldrh	r3, [r4, #32]
     bc4:	055b      	lsls	r3, r3, #21
     bc6:	d1fc      	bne.n	bc2 <_adc_init+0xae>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
     bc8:	00eb      	lsls	r3, r5, #3
     bca:	1b5b      	subs	r3, r3, r5
     bcc:	009b      	lsls	r3, r3, #2
     bce:	4a22      	ldr	r2, [pc, #136]	; (c58 <_adc_init+0x144>)
     bd0:	18d3      	adds	r3, r2, r3
     bd2:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
     bd4:	81e3      	strh	r3, [r4, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     bd6:	2240      	movs	r2, #64	; 0x40
     bd8:	8c23      	ldrh	r3, [r4, #32]
     bda:	4213      	tst	r3, r2
     bdc:	d1fc      	bne.n	bd8 <_adc_init+0xc4>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
     bde:	00eb      	lsls	r3, r5, #3
     be0:	1b5b      	subs	r3, r3, r5
     be2:	009b      	lsls	r3, r3, #2
     be4:	4a1c      	ldr	r2, [pc, #112]	; (c58 <_adc_init+0x144>)
     be6:	18d3      	adds	r3, r2, r3
     be8:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
     bea:	8223      	strh	r3, [r4, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     bec:	2280      	movs	r2, #128	; 0x80
     bee:	8c23      	ldrh	r3, [r4, #32]
     bf0:	4213      	tst	r3, r2
     bf2:	d1fc      	bne.n	bee <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
     bf4:	00eb      	lsls	r3, r5, #3
     bf6:	1b5b      	subs	r3, r3, r5
     bf8:	009b      	lsls	r3, r3, #2
     bfa:	4a17      	ldr	r2, [pc, #92]	; (c58 <_adc_init+0x144>)
     bfc:	18d3      	adds	r3, r2, r3
     bfe:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
     c00:	8263      	strh	r3, [r4, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     c02:	2280      	movs	r2, #128	; 0x80
     c04:	0052      	lsls	r2, r2, #1
     c06:	8c23      	ldrh	r3, [r4, #32]
     c08:	4213      	tst	r3, r2
     c0a:	d1fc      	bne.n	c06 <_adc_init+0xf2>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
     c0c:	00eb      	lsls	r3, r5, #3
     c0e:	1b5b      	subs	r3, r3, r5
     c10:	009b      	lsls	r3, r3, #2
     c12:	4a11      	ldr	r2, [pc, #68]	; (c58 <_adc_init+0x144>)
     c14:	18d3      	adds	r3, r2, r3
     c16:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
     c18:	82a3      	strh	r3, [r4, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     c1a:	2280      	movs	r2, #128	; 0x80
     c1c:	0092      	lsls	r2, r2, #2
     c1e:	8c23      	ldrh	r3, [r4, #32]
     c20:	4213      	tst	r3, r2
     c22:	d1fc      	bne.n	c1e <_adc_init+0x10a>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
     c24:	490c      	ldr	r1, [pc, #48]	; (c58 <_adc_init+0x144>)
     c26:	00eb      	lsls	r3, r5, #3
     c28:	1b5a      	subs	r2, r3, r5
     c2a:	0092      	lsls	r2, r2, #2
     c2c:	188a      	adds	r2, r1, r2
     c2e:	7d10      	ldrb	r0, [r2, #20]
}

static inline void hri_adc_write_DBGCTRL_reg(const void *const hw, hri_adc_dbgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->DBGCTRL.reg = data;
     c30:	7720      	strb	r0, [r4, #28]
	hri_adc_write_SEQCTRL_reg(hw, _adcs[i].seq_ctrl);
     c32:	6992      	ldr	r2, [r2, #24]
}

static inline void hri_adc_write_SEQCTRL_reg(const void *const hw, hri_adc_seqctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SEQCTRL.reg = data;
     c34:	62a2      	str	r2, [r4, #40]	; 0x28
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
     c36:	1b5d      	subs	r5, r3, r5
     c38:	00ad      	lsls	r5, r5, #2
     c3a:	194d      	adds	r5, r1, r5
     c3c:	786b      	ldrb	r3, [r5, #1]
	((Adc *)hw)->CTRLA.reg = data;
     c3e:	7023      	strb	r3, [r4, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     c40:	2203      	movs	r2, #3
     c42:	8c23      	ldrh	r3, [r4, #32]
     c44:	4213      	tst	r3, r2
     c46:	d1fc      	bne.n	c42 <_adc_init+0x12e>

	return ERR_NONE;
}
     c48:	2000      	movs	r0, #0
     c4a:	bd70      	pop	{r4, r5, r6, pc}
     c4c:	bcfff400 	.word	0xbcfff400
     c50:	0000379c 	.word	0x0000379c
     c54:	00000ae1 	.word	0x00000ae1
     c58:	00003764 	.word	0x00003764

00000c5c <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
     c5c:	b570      	push	{r4, r5, r6, lr}
     c5e:	0004      	movs	r4, r0
     c60:	000d      	movs	r5, r1
	ASSERT(device);
     c62:	1e43      	subs	r3, r0, #1
     c64:	4198      	sbcs	r0, r3
     c66:	b2c0      	uxtb	r0, r0
     c68:	22d8      	movs	r2, #216	; 0xd8
     c6a:	4906      	ldr	r1, [pc, #24]	; (c84 <_adc_sync_init+0x28>)
     c6c:	4b06      	ldr	r3, [pc, #24]	; (c88 <_adc_sync_init+0x2c>)
     c6e:	4798      	blx	r3

	device->hw = hw;
     c70:	6025      	str	r5, [r4, #0]

	return _adc_init(hw, _adc_get_regs(device->channel));
     c72:	6860      	ldr	r0, [r4, #4]
     c74:	4b05      	ldr	r3, [pc, #20]	; (c8c <_adc_sync_init+0x30>)
     c76:	4798      	blx	r3
     c78:	0001      	movs	r1, r0
     c7a:	0028      	movs	r0, r5
     c7c:	4b04      	ldr	r3, [pc, #16]	; (c90 <_adc_sync_init+0x34>)
     c7e:	4798      	blx	r3
}
     c80:	bd70      	pop	{r4, r5, r6, pc}
     c82:	46c0      	nop			; (mov r8, r8)
     c84:	0000379c 	.word	0x0000379c
     c88:	00000ae1 	.word	0x00000ae1
     c8c:	00000ae9 	.word	0x00000ae9
     c90:	00000b15 	.word	0x00000b15

00000c94 <_adc_sync_enable_channel>:
 */
void _adc_sync_enable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
     c94:	6802      	ldr	r2, [r0, #0]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
     c96:	7813      	ldrb	r3, [r2, #0]
     c98:	2102      	movs	r1, #2
     c9a:	430b      	orrs	r3, r1
     c9c:	7013      	strb	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     c9e:	3101      	adds	r1, #1
     ca0:	8c13      	ldrh	r3, [r2, #32]
     ca2:	420b      	tst	r3, r1
     ca4:	d1fc      	bne.n	ca0 <_adc_sync_enable_channel+0xc>
}
     ca6:	4770      	bx	lr

00000ca8 <_adc_sync_disable_channel>:
 */
void _adc_sync_disable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	hri_adc_clear_CTRLA_ENABLE_bit(device->hw);
     ca8:	6802      	ldr	r2, [r0, #0]
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
     caa:	7813      	ldrb	r3, [r2, #0]
     cac:	2102      	movs	r1, #2
     cae:	438b      	bics	r3, r1
     cb0:	7013      	strb	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     cb2:	3101      	adds	r1, #1
     cb4:	8c13      	ldrh	r3, [r2, #32]
     cb6:	420b      	tst	r3, r1
     cb8:	d1fc      	bne.n	cb4 <_adc_sync_disable_channel+0xc>
}
     cba:	4770      	bx	lr

00000cbc <_adc_sync_get_data_size>:
/**
 * \brief Retrieve ADC conversion data size
 */
uint8_t _adc_sync_get_data_size(const struct _adc_sync_device *const device)
{
	return hri_adc_read_CTRLC_RESSEL_bf(device->hw) == ADC_CTRLC_RESSEL_8BIT_Val ? 1 : 2;
     cbc:	6803      	ldr	r3, [r0, #0]
	tmp = ((Adc *)hw)->CTRLC.reg;
     cbe:	8958      	ldrh	r0, [r3, #10]
	tmp = (tmp & ADC_CTRLC_RESSEL_Msk) >> ADC_CTRLC_RESSEL_Pos;
     cc0:	0680      	lsls	r0, r0, #26
     cc2:	0f80      	lsrs	r0, r0, #30
     cc4:	3803      	subs	r0, #3
     cc6:	1e43      	subs	r3, r0, #1
     cc8:	4198      	sbcs	r0, r3
     cca:	3001      	adds	r0, #1
}
     ccc:	4770      	bx	lr

00000cce <_adc_sync_is_channel_conversion_done>:
 */
bool _adc_sync_is_channel_conversion_done(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_get_interrupt_RESRDY_bit(device->hw);
     cce:	6803      	ldr	r3, [r0, #0]
	return (((Adc *)hw)->INTFLAG.reg & ADC_INTFLAG_RESRDY) >> ADC_INTFLAG_RESRDY_Pos;
     cd0:	7998      	ldrb	r0, [r3, #6]
     cd2:	2301      	movs	r3, #1
     cd4:	4018      	ands	r0, r3
}
     cd6:	4770      	bx	lr

00000cd8 <_adc_sync_convert>:
/**
 * \brief Make conversion
 */
void _adc_sync_convert(struct _adc_sync_device *const device)
{
	hri_adc_set_SWTRIG_START_bit(device->hw);
     cd8:	6802      	ldr	r2, [r0, #0]
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
     cda:	7e13      	ldrb	r3, [r2, #24]
     cdc:	2102      	movs	r1, #2
     cde:	430b      	orrs	r3, r1
     ce0:	7613      	strb	r3, [r2, #24]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
     ce2:	8c13      	ldrh	r3, [r2, #32]
     ce4:	055b      	lsls	r3, r3, #21
     ce6:	d1fc      	bne.n	ce2 <_adc_sync_convert+0xa>
}
     ce8:	4770      	bx	lr

00000cea <_adc_sync_read_channel_data>:
 */
uint16_t _adc_sync_read_channel_data(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_read_RESULT_reg(device->hw);
     cea:	6803      	ldr	r3, [r0, #0]
	return ((Adc *)hw)->RESULT.reg;
     cec:	8c98      	ldrh	r0, [r3, #36]	; 0x24
     cee:	b280      	uxth	r0, r0
}
     cf0:	4770      	bx	lr
	...

00000cf4 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
     cf4:	b510      	push	{r4, lr}
     cf6:	0003      	movs	r3, r0
		return (us * (freq / 10000) + 299) / 300;
     cf8:	20c8      	movs	r0, #200	; 0xc8
     cfa:	0040      	lsls	r0, r0, #1
     cfc:	4358      	muls	r0, r3
     cfe:	302c      	adds	r0, #44	; 0x2c
     d00:	30ff      	adds	r0, #255	; 0xff
     d02:	2196      	movs	r1, #150	; 0x96
     d04:	0049      	lsls	r1, r1, #1
     d06:	4b01      	ldr	r3, [pc, #4]	; (d0c <_get_cycles_for_us+0x18>)
     d08:	4798      	blx	r3
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     d0a:	bd10      	pop	{r4, pc}
     d0c:	00001cc5 	.word	0x00001cc5

00000d10 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
     d10:	b510      	push	{r4, lr}
     d12:	0003      	movs	r3, r0
		return (ms * (freq / 10000) + 2) / 3 * 10;
     d14:	20c8      	movs	r0, #200	; 0xc8
     d16:	0040      	lsls	r0, r0, #1
     d18:	4358      	muls	r0, r3
     d1a:	3002      	adds	r0, #2
     d1c:	2103      	movs	r1, #3
     d1e:	4b03      	ldr	r3, [pc, #12]	; (d2c <_get_cycles_for_ms+0x1c>)
     d20:	4798      	blx	r3
     d22:	0003      	movs	r3, r0
     d24:	0080      	lsls	r0, r0, #2
     d26:	18c0      	adds	r0, r0, r3
     d28:	0040      	lsls	r0, r0, #1
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     d2a:	bd10      	pop	{r4, pc}
     d2c:	00001cc5 	.word	0x00001cc5

00000d30 <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
     d30:	3901      	subs	r1, #1
     d32:	d8fd      	bhi.n	d30 <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
     d34:	4770      	bx	lr
	...

00000d38 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     d38:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     d3a:	4b09      	ldr	r3, [pc, #36]	; (d60 <_init_chip+0x28>)
     d3c:	685a      	ldr	r2, [r3, #4]
     d3e:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_set_performance_level(2);
     d40:	2002      	movs	r0, #2
     d42:	4b08      	ldr	r3, [pc, #32]	; (d64 <_init_chip+0x2c>)
     d44:	4798      	blx	r3

	_osc32kctrl_init_sources();
     d46:	4b08      	ldr	r3, [pc, #32]	; (d68 <_init_chip+0x30>)
     d48:	4798      	blx	r3
	_oscctrl_init_sources();
     d4a:	4b08      	ldr	r3, [pc, #32]	; (d6c <_init_chip+0x34>)
     d4c:	4798      	blx	r3
	_mclk_init();
     d4e:	4b08      	ldr	r3, [pc, #32]	; (d70 <_init_chip+0x38>)
     d50:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     d52:	4b08      	ldr	r3, [pc, #32]	; (d74 <_init_chip+0x3c>)
     d54:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     d56:	20ff      	movs	r0, #255	; 0xff
     d58:	4b07      	ldr	r3, [pc, #28]	; (d78 <_init_chip+0x40>)
     d5a:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
     d5c:	bd10      	pop	{r4, pc}
     d5e:	46c0      	nop			; (mov r8, r8)
     d60:	41004000 	.word	0x41004000
     d64:	00000f97 	.word	0x00000f97
     d68:	00000f4d 	.word	0x00000f4d
     d6c:	00000f5d 	.word	0x00000f5d
     d70:	00000f39 	.word	0x00000f39
     d74:	00000f95 	.word	0x00000f95
     d78:	00000f15 	.word	0x00000f15

00000d7c <_dac_init>:
 * \param[in] hw The pointer to DAC hardware instance
 *
 * \return The status of initialization
 */
static int32_t _dac_init(void *const hw)
{
     d7c:	b510      	push	{r4, lr}
     d7e:	0004      	movs	r4, r0
	ASSERT(hw == DAC);
     d80:	4b1d      	ldr	r3, [pc, #116]	; (df8 <_dac_init+0x7c>)
     d82:	18c0      	adds	r0, r0, r3
     d84:	4243      	negs	r3, r0
     d86:	4158      	adcs	r0, r3
     d88:	b2c0      	uxtb	r0, r0
     d8a:	22dc      	movs	r2, #220	; 0xdc
     d8c:	491b      	ldr	r1, [pc, #108]	; (dfc <_dac_init+0x80>)
     d8e:	4b1c      	ldr	r3, [pc, #112]	; (e00 <_dac_init+0x84>)
     d90:	4798      	blx	r3
	};
}

static inline bool hri_dac_is_syncing(const void *const hw, hri_dac_syncbusy_reg_t reg)
{
	return ((Dac *)hw)->SYNCBUSY.reg & reg;
     d92:	68a3      	ldr	r3, [r4, #8]

	if (!hri_dac_is_syncing(hw, DAC_SYNCBUSY_SWRST)) {
     d94:	07db      	lsls	r3, r3, #31
     d96:	d418      	bmi.n	dca <_dac_init+0x4e>
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
     d98:	2203      	movs	r2, #3
     d9a:	68a3      	ldr	r3, [r4, #8]
     d9c:	421a      	tst	r2, r3
     d9e:	d1fc      	bne.n	d9a <_dac_init+0x1e>

static inline hri_dac_ctrla_reg_t hri_dac_get_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST | DAC_SYNCBUSY_ENABLE);
	tmp = ((Dac *)hw)->CTRLA.reg;
     da0:	7823      	ldrb	r3, [r4, #0]
		if (hri_dac_get_CTRLA_reg(hw, DAC_CTRLA_ENABLE)) {
     da2:	079b      	lsls	r3, r3, #30
     da4:	d50b      	bpl.n	dbe <_dac_init+0x42>
	((Dac *)hw)->CTRLA.reg &= ~DAC_CTRLA_ENABLE;
     da6:	7823      	ldrb	r3, [r4, #0]
     da8:	2202      	movs	r2, #2
     daa:	4393      	bics	r3, r2
     dac:	7023      	strb	r3, [r4, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
     dae:	3201      	adds	r2, #1
     db0:	68a3      	ldr	r3, [r4, #8]
     db2:	421a      	tst	r2, r3
     db4:	d1fc      	bne.n	db0 <_dac_init+0x34>
     db6:	2202      	movs	r2, #2
     db8:	68a3      	ldr	r3, [r4, #8]
     dba:	421a      	tst	r2, r3
     dbc:	d1fc      	bne.n	db8 <_dac_init+0x3c>
}

static inline void hri_dac_write_CTRLA_reg(const void *const hw, hri_dac_ctrla_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLA.reg = data;
     dbe:	2301      	movs	r3, #1
     dc0:	7023      	strb	r3, [r4, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
     dc2:	2203      	movs	r2, #3
     dc4:	68a3      	ldr	r3, [r4, #8]
     dc6:	421a      	tst	r2, r3
     dc8:	d1fc      	bne.n	dc4 <_dac_init+0x48>
     dca:	2201      	movs	r2, #1
     dcc:	68a3      	ldr	r3, [r4, #8]
     dce:	421a      	tst	r2, r3
     dd0:	d1fc      	bne.n	dcc <_dac_init+0x50>
}

static inline void hri_dac_write_CTRLB_reg(const void *const hw, hri_dac_ctrlb_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLB.reg = data;
     dd2:	2302      	movs	r3, #2
     dd4:	7063      	strb	r3, [r4, #1]
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
     dd6:	2300      	movs	r3, #0
     dd8:	70a3      	strb	r3, [r4, #2]
}

static inline void hri_dac_write_DACCTRL_reg(const void *const hw, uint8_t index, hri_dac_dacctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DACCTRL[index].reg = data;
     dda:	81a3      	strh	r3, [r4, #12]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
     ddc:	2202      	movs	r2, #2
     dde:	68a3      	ldr	r3, [r4, #8]
     de0:	421a      	tst	r2, r3
     de2:	d1fc      	bne.n	dde <_dac_init+0x62>
	((Dac *)hw)->DACCTRL[index].reg = data;
     de4:	2300      	movs	r3, #0
     de6:	81e3      	strh	r3, [r4, #14]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
     de8:	2202      	movs	r2, #2
     dea:	68a3      	ldr	r3, [r4, #8]
     dec:	421a      	tst	r2, r3
     dee:	d1fc      	bne.n	dea <_dac_init+0x6e>
}

static inline void hri_dac_write_DBGCTRL_reg(const void *const hw, hri_dac_dbgctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DBGCTRL.reg = data;
     df0:	2301      	movs	r3, #1
     df2:	7623      	strb	r3, [r4, #24]
	hri_dac_write_DACCTRL_reg(hw, 0, _dac.dac_ctrl0);
	hri_dac_write_DACCTRL_reg(hw, 1, _dac.dac_ctrl1);
	hri_dac_write_DBGCTRL_reg(hw, _dac.dbg_ctrl);

	return ERR_NONE;
}
     df4:	2000      	movs	r0, #0
     df6:	bd10      	pop	{r4, pc}
     df8:	bdffd000 	.word	0xbdffd000
     dfc:	000037b4 	.word	0x000037b4
     e00:	00000ae1 	.word	0x00000ae1

00000e04 <_dac_sync_init>:
{
     e04:	b570      	push	{r4, r5, r6, lr}
     e06:	0005      	movs	r5, r0
     e08:	000c      	movs	r4, r1
	ASSERT(device);
     e0a:	1e43      	subs	r3, r0, #1
     e0c:	4198      	sbcs	r0, r3
     e0e:	b2c0      	uxtb	r0, r0
     e10:	2252      	movs	r2, #82	; 0x52
     e12:	4904      	ldr	r1, [pc, #16]	; (e24 <_dac_sync_init+0x20>)
     e14:	4b04      	ldr	r3, [pc, #16]	; (e28 <_dac_sync_init+0x24>)
     e16:	4798      	blx	r3
	device->hw = hw;
     e18:	602c      	str	r4, [r5, #0]
	return _dac_init(device->hw);
     e1a:	0020      	movs	r0, r4
     e1c:	4b03      	ldr	r3, [pc, #12]	; (e2c <_dac_sync_init+0x28>)
     e1e:	4798      	blx	r3
}
     e20:	bd70      	pop	{r4, r5, r6, pc}
     e22:	46c0      	nop			; (mov r8, r8)
     e24:	000037b4 	.word	0x000037b4
     e28:	00000ae1 	.word	0x00000ae1
     e2c:	00000d7d 	.word	0x00000d7d

00000e30 <_dac_sync_enable_channel>:
{
     e30:	b510      	push	{r4, lr}
 * \param[in] hw The pointer to hardware instance
 * \param[in] ch The channel to enable
 */
static inline void _dac_enable_channel(void *const hw, const uint8_t ch)
{
	if (ch <= 1) {
     e32:	2901      	cmp	r1, #1
     e34:	d900      	bls.n	e38 <_dac_sync_enable_channel+0x8>
}
     e36:	bd10      	pop	{r4, pc}
	_dac_enable_channel(device->hw, ch);
     e38:	6803      	ldr	r3, [r0, #0]
	((Dac *)hw)->CTRLA.reg &= ~DAC_CTRLA_ENABLE;
     e3a:	781a      	ldrb	r2, [r3, #0]
     e3c:	2002      	movs	r0, #2
     e3e:	4382      	bics	r2, r0
     e40:	701a      	strb	r2, [r3, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
     e42:	3001      	adds	r0, #1
     e44:	689a      	ldr	r2, [r3, #8]
     e46:	4210      	tst	r0, r2
     e48:	d1fc      	bne.n	e44 <_dac_sync_enable_channel+0x14>
     e4a:	004a      	lsls	r2, r1, #1
     e4c:	189a      	adds	r2, r3, r2
	((Dac *)hw)->DACCTRL[index].reg |= DAC_DACCTRL_ENABLE;
     e4e:	8990      	ldrh	r0, [r2, #12]
     e50:	2402      	movs	r4, #2
     e52:	4320      	orrs	r0, r4
     e54:	8190      	strh	r0, [r2, #12]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
     e56:	2002      	movs	r0, #2
     e58:	689a      	ldr	r2, [r3, #8]
     e5a:	4210      	tst	r0, r2
     e5c:	d1fc      	bne.n	e58 <_dac_sync_enable_channel+0x28>
	((Dac *)hw)->CTRLA.reg |= DAC_CTRLA_ENABLE;
     e5e:	781a      	ldrb	r2, [r3, #0]
     e60:	2002      	movs	r0, #2
     e62:	4302      	orrs	r2, r0
     e64:	701a      	strb	r2, [r3, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
     e66:	3001      	adds	r0, #1
     e68:	689a      	ldr	r2, [r3, #8]
     e6a:	4210      	tst	r0, r2
     e6c:	d1fc      	bne.n	e68 <_dac_sync_enable_channel+0x38>
		hri_dac_clear_CTRLA_ENABLE_bit(hw);
		hri_dac_set_DACCTRL_ENABLE_bit(hw, ch);
		hri_dac_set_CTRLA_ENABLE_bit(hw);

		if (0 == ch) {
     e6e:	2900      	cmp	r1, #0
     e70:	d104      	bne.n	e7c <_dac_sync_enable_channel+0x4c>
			while (!hri_dac_get_STATUS_READY0_bit(hw))
     e72:	3101      	adds	r1, #1
	return (((Dac *)hw)->STATUS.reg & DAC_STATUS_READY0) >> DAC_STATUS_READY0_Pos;
     e74:	79da      	ldrb	r2, [r3, #7]
     e76:	420a      	tst	r2, r1
     e78:	d0fc      	beq.n	e74 <_dac_sync_enable_channel+0x44>
     e7a:	e7dc      	b.n	e36 <_dac_sync_enable_channel+0x6>
				;
		} else {
			while (!hri_dac_get_STATUS_READY1_bit(hw))
     e7c:	2102      	movs	r1, #2
	return (((Dac *)hw)->STATUS.reg & DAC_STATUS_READY1) >> DAC_STATUS_READY1_Pos;
     e7e:	79da      	ldrb	r2, [r3, #7]
     e80:	420a      	tst	r2, r1
     e82:	d0fc      	beq.n	e7e <_dac_sync_enable_channel+0x4e>
     e84:	e7d7      	b.n	e36 <_dac_sync_enable_channel+0x6>

00000e86 <_dac_sync_disable_channel>:
{
     e86:	b510      	push	{r4, lr}
 * \param[in] hw The pointer to hardware instance
 * \param[in] ch The channel to disable
 */
static inline void _dac_disable_channel(void *const hw, const uint8_t ch)
{
	if (ch <= 1) {
     e88:	2901      	cmp	r1, #1
     e8a:	d900      	bls.n	e8e <_dac_sync_disable_channel+0x8>
}
     e8c:	bd10      	pop	{r4, pc}
	_dac_disable_channel(device->hw, ch);
     e8e:	6803      	ldr	r3, [r0, #0]
	((Dac *)hw)->CTRLA.reg &= ~DAC_CTRLA_ENABLE;
     e90:	781a      	ldrb	r2, [r3, #0]
     e92:	2002      	movs	r0, #2
     e94:	4382      	bics	r2, r0
     e96:	701a      	strb	r2, [r3, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
     e98:	3001      	adds	r0, #1
     e9a:	689a      	ldr	r2, [r3, #8]
     e9c:	4210      	tst	r0, r2
     e9e:	d1fc      	bne.n	e9a <_dac_sync_disable_channel+0x14>
     ea0:	004a      	lsls	r2, r1, #1
     ea2:	189a      	adds	r2, r3, r2
	((Dac *)hw)->DACCTRL[index].reg &= ~DAC_DACCTRL_ENABLE;
     ea4:	8990      	ldrh	r0, [r2, #12]
     ea6:	2402      	movs	r4, #2
     ea8:	43a0      	bics	r0, r4
     eaa:	8190      	strh	r0, [r2, #12]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
     eac:	2002      	movs	r0, #2
     eae:	689a      	ldr	r2, [r3, #8]
     eb0:	4210      	tst	r0, r2
     eb2:	d1fc      	bne.n	eae <_dac_sync_disable_channel+0x28>
		hri_dac_clear_CTRLA_ENABLE_bit(hw);
		hri_dac_clear_DACCTRL_ENABLE_bit(hw, ch);

		if (hri_dac_get_DACCTRL_ENABLE_bit(hw, !ch)) {
     eb4:	424a      	negs	r2, r1
     eb6:	4151      	adcs	r1, r2
     eb8:	b2c9      	uxtb	r1, r1
     eba:	2002      	movs	r0, #2
     ebc:	689a      	ldr	r2, [r3, #8]
     ebe:	4210      	tst	r0, r2
     ec0:	d1fc      	bne.n	ebc <_dac_sync_disable_channel+0x36>
	tmp = ((Dac *)hw)->DACCTRL[index].reg;
     ec2:	3104      	adds	r1, #4
     ec4:	0049      	lsls	r1, r1, #1
     ec6:	1859      	adds	r1, r3, r1
     ec8:	888a      	ldrh	r2, [r1, #4]
     eca:	0792      	lsls	r2, r2, #30
     ecc:	d5de      	bpl.n	e8c <_dac_sync_disable_channel+0x6>
	((Dac *)hw)->CTRLA.reg |= DAC_CTRLA_ENABLE;
     ece:	781a      	ldrb	r2, [r3, #0]
     ed0:	2102      	movs	r1, #2
     ed2:	430a      	orrs	r2, r1
     ed4:	701a      	strb	r2, [r3, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
     ed6:	3101      	adds	r1, #1
     ed8:	689a      	ldr	r2, [r3, #8]
     eda:	4211      	tst	r1, r2
     edc:	d1fc      	bne.n	ed8 <_dac_sync_disable_channel+0x52>
     ede:	e7d5      	b.n	e8c <_dac_sync_disable_channel+0x6>

00000ee0 <_dac_sync_is_channel_enable>:
{
	if (ch <= 1) {
		return hri_dac_get_DACCTRL_ENABLE_bit(hw, ch);
	}

	return false;
     ee0:	2300      	movs	r3, #0
	if (ch <= 1) {
     ee2:	2901      	cmp	r1, #1
     ee4:	d901      	bls.n	eea <_dac_sync_is_channel_enable+0xa>
}
     ee6:	0018      	movs	r0, r3
     ee8:	4770      	bx	lr
	return _dac_is_channel_enabled(device->hw, ch);
     eea:	6802      	ldr	r2, [r0, #0]
     eec:	2002      	movs	r0, #2
     eee:	6893      	ldr	r3, [r2, #8]
     ef0:	4218      	tst	r0, r3
     ef2:	d1fc      	bne.n	eee <_dac_sync_is_channel_enable+0xe>
	tmp = ((Dac *)hw)->DACCTRL[index].reg;
     ef4:	3104      	adds	r1, #4
     ef6:	0049      	lsls	r1, r1, #1
     ef8:	1852      	adds	r2, r2, r1
     efa:	8893      	ldrh	r3, [r2, #4]
	return (bool)tmp;
     efc:	079b      	lsls	r3, r3, #30
     efe:	0fdb      	lsrs	r3, r3, #31
     f00:	e7f1      	b.n	ee6 <_dac_sync_is_channel_enable+0x6>

00000f02 <_dac_sync_write_data>:
	hri_dac_write_DATA_reg(device->hw, ch, data);
     f02:	6800      	ldr	r0, [r0, #0]
}

static inline void hri_dac_write_DATA_reg(const void *const hw, uint8_t index, hri_dac_data_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DATA[index].reg = data;
     f04:	3208      	adds	r2, #8
     f06:	0052      	lsls	r2, r2, #1
     f08:	5211      	strh	r1, [r2, r0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
     f0a:	220c      	movs	r2, #12
     f0c:	6883      	ldr	r3, [r0, #8]
     f0e:	421a      	tst	r2, r3
     f10:	d1fc      	bne.n	f0c <_dac_sync_write_data+0xa>
}
     f12:	4770      	bx	lr

00000f14 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     f14:	07c3      	lsls	r3, r0, #31
     f16:	d507      	bpl.n	f28 <_gclk_init_generators_by_fref+0x14>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     f18:	4a04      	ldr	r2, [pc, #16]	; (f2c <_gclk_init_generators_by_fref+0x18>)
     f1a:	4b05      	ldr	r3, [pc, #20]	; (f30 <_gclk_init_generators_by_fref+0x1c>)
     f1c:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     f1e:	0019      	movs	r1, r3
     f20:	4a04      	ldr	r2, [pc, #16]	; (f34 <_gclk_init_generators_by_fref+0x20>)
     f22:	684b      	ldr	r3, [r1, #4]
     f24:	4213      	tst	r3, r2
     f26:	d1fc      	bne.n	f22 <_gclk_init_generators_by_fref+0xe>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
     f28:	4770      	bx	lr
     f2a:	46c0      	nop			; (mov r8, r8)
     f2c:	00010106 	.word	0x00010106
     f30:	40001800 	.word	0x40001800
     f34:	000007fd 	.word	0x000007fd

00000f38 <_mclk_init>:
	((Mclk *)hw)->BUPDIV.reg = data;
     f38:	4b03      	ldr	r3, [pc, #12]	; (f48 <_mclk_init+0x10>)
     f3a:	2208      	movs	r2, #8
     f3c:	719a      	strb	r2, [r3, #6]
	((Mclk *)hw)->LPDIV.reg = data;
     f3e:	3a04      	subs	r2, #4
     f40:	715a      	strb	r2, [r3, #5]
	((Mclk *)hw)->CPUDIV.reg = data;
     f42:	3a03      	subs	r2, #3
     f44:	711a      	strb	r2, [r3, #4]
{
	void *hw = (void *)MCLK;
	hri_mclk_write_BUPDIV_reg(hw, MCLK_BUPDIV_BUPDIV(CONF_MCLK_BUPDIV));
	hri_mclk_write_LPDIV_reg(hw, MCLK_LPDIV_LPDIV(CONF_MCLK_LPDIV));
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
     f46:	4770      	bx	lr
     f48:	40000400 	.word	0x40000400

00000f4c <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
     f4c:	4b02      	ldr	r3, [pc, #8]	; (f58 <_osc32kctrl_init_sources+0xc>)
     f4e:	2286      	movs	r2, #134	; 0x86
     f50:	615a      	str	r2, [r3, #20]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     f52:	3a85      	subs	r2, #133	; 0x85
     f54:	611a      	str	r2, [r3, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
     f56:	4770      	bx	lr
     f58:	40001000 	.word	0x40001000

00000f5c <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
     f5c:	2282      	movs	r2, #130	; 0x82
     f5e:	4b0c      	ldr	r3, [pc, #48]	; (f90 <_oscctrl_init_sources+0x34>)
     f60:	751a      	strb	r2, [r3, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     f62:	0018      	movs	r0, r3
     f64:	2138      	movs	r1, #56	; 0x38
     f66:	3a80      	subs	r2, #128	; 0x80
     f68:	5c43      	ldrb	r3, [r0, r1]
     f6a:	4213      	tst	r3, r2
     f6c:	d1fc      	bne.n	f68 <_oscctrl_init_sources+0xc>
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
     f6e:	4908      	ldr	r1, [pc, #32]	; (f90 <_oscctrl_init_sources+0x34>)
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
     f70:	2210      	movs	r2, #16
     f72:	68cb      	ldr	r3, [r1, #12]
     f74:	421a      	tst	r2, r3
     f76:	d0fc      	beq.n	f72 <_oscctrl_init_sources+0x16>
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
     f78:	4a05      	ldr	r2, [pc, #20]	; (f90 <_oscctrl_init_sources+0x34>)
     f7a:	7d13      	ldrb	r3, [r2, #20]
     f7c:	2180      	movs	r1, #128	; 0x80
     f7e:	430b      	orrs	r3, r1
     f80:	7513      	strb	r3, [r2, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     f82:	0010      	movs	r0, r2
     f84:	3948      	subs	r1, #72	; 0x48
     f86:	220e      	movs	r2, #14
     f88:	5c43      	ldrb	r3, [r0, r1]
     f8a:	4213      	tst	r3, r2
     f8c:	d1fc      	bne.n	f88 <_oscctrl_init_sources+0x2c>
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
     f8e:	4770      	bx	lr
     f90:	40000c00 	.word	0x40000c00

00000f94 <_oscctrl_init_referenced_generators>:
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
     f94:	4770      	bx	lr

00000f96 <_set_performance_level>:
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
     f96:	2380      	movs	r3, #128	; 0x80
     f98:	05db      	lsls	r3, r3, #23
     f9a:	789b      	ldrb	r3, [r3, #2]
/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
     f9c:	2203      	movs	r2, #3
     f9e:	4013      	ands	r3, r2
     fa0:	4298      	cmp	r0, r3
     fa2:	d00c      	beq.n	fbe <_set_performance_level+0x28>
	((Pm *)hw)->INTFLAG.reg = mask;
     fa4:	2280      	movs	r2, #128	; 0x80
     fa6:	05d2      	lsls	r2, r2, #23
     fa8:	23ff      	movs	r3, #255	; 0xff
     faa:	7193      	strb	r3, [r2, #6]

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
     fac:	7893      	ldrb	r3, [r2, #2]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
     fae:	2103      	movs	r1, #3
     fb0:	438b      	bics	r3, r1
	tmp |= PM_PLCFG_PLSEL(data);
     fb2:	4008      	ands	r0, r1
     fb4:	4318      	orrs	r0, r3
	((Pm *)hw)->PLCFG.reg = tmp;
     fb6:	7090      	strb	r0, [r2, #2]
	return ((Pm *)hw)->INTFLAG.reg;
     fb8:	7993      	ldrb	r3, [r2, #6]
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
		while (!hri_pm_read_INTFLAG_reg(PM))
     fba:	2b00      	cmp	r3, #0
     fbc:	d0fc      	beq.n	fb8 <_set_performance_level+0x22>
			;
	}
}
     fbe:	4770      	bx	lr

00000fc0 <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
     fc0:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
     fc2:	07db      	lsls	r3, r3, #31
     fc4:	d409      	bmi.n	fda <_spi_sync_enable+0x1a>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     fc6:	6803      	ldr	r3, [r0, #0]
     fc8:	2202      	movs	r2, #2
     fca:	4313      	orrs	r3, r2
     fcc:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     fce:	3201      	adds	r2, #1
     fd0:	69c3      	ldr	r3, [r0, #28]
     fd2:	421a      	tst	r2, r3
     fd4:	d1fc      	bne.n	fd0 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
     fd6:	2000      	movs	r0, #0
}
     fd8:	4770      	bx	lr
		return ERR_BUSY;
     fda:	2004      	movs	r0, #4
     fdc:	4240      	negs	r0, r0
     fde:	e7fb      	b.n	fd8 <_spi_sync_enable+0x18>

00000fe0 <_spi_set_mode>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
     fe0:	69c3      	ldr	r3, [r0, #28]
 */
static int32_t _spi_set_mode(void *const hw, const enum spi_transfer_mode mode)
{
	uint32_t ctrla;

	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE)) {
     fe2:	079b      	lsls	r3, r3, #30
     fe4:	d112      	bne.n	100c <STACK_SIZE+0xc>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
     fe6:	2203      	movs	r2, #3
     fe8:	69c3      	ldr	r3, [r0, #28]
     fea:	421a      	tst	r2, r3
     fec:	d1fc      	bne.n	fe8 <_spi_set_mode+0x8>
}

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_read_CTRLA_reg(const void *const hw)
{
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->SPI.CTRLA.reg;
     fee:	6803      	ldr	r3, [r0, #0]
		return ERR_BUSY;
	}

	ctrla = hri_sercomspi_read_CTRLA_reg(hw);
	ctrla &= ~(SERCOM_SPI_CTRLA_CPOL | SERCOM_SPI_CTRLA_CPHA);
     ff0:	4a08      	ldr	r2, [pc, #32]	; (1014 <STACK_SIZE+0x14>)
     ff2:	4013      	ands	r3, r2
	ctrla |= (mode & 0x3u) << SERCOM_SPI_CTRLA_CPHA_Pos;
     ff4:	0709      	lsls	r1, r1, #28
     ff6:	22c0      	movs	r2, #192	; 0xc0
     ff8:	0592      	lsls	r2, r2, #22
     ffa:	4011      	ands	r1, r2
     ffc:	4319      	orrs	r1, r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
     ffe:	6001      	str	r1, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1000:	2203      	movs	r2, #3
    1002:	69c3      	ldr	r3, [r0, #28]
    1004:	421a      	tst	r2, r3
    1006:	d1fc      	bne.n	1002 <STACK_SIZE+0x2>
	hri_sercomspi_write_CTRLA_reg(hw, ctrla);

	return ERR_NONE;
    1008:	2000      	movs	r0, #0
}
    100a:	4770      	bx	lr
		return ERR_BUSY;
    100c:	2004      	movs	r0, #4
    100e:	4240      	negs	r0, r0
    1010:	e7fb      	b.n	100a <STACK_SIZE+0xa>
    1012:	46c0      	nop			; (mov r8, r8)
    1014:	cfffffff 	.word	0xcfffffff

00001018 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1018:	b570      	push	{r4, r5, r6, lr}
    101a:	0005      	movs	r5, r0
    101c:	000c      	movs	r4, r1
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
    101e:	4b36      	ldr	r3, [pc, #216]	; (10f8 <_spi_m_sync_init+0xe0>)
    1020:	4299      	cmp	r1, r3
    1022:	d003      	beq.n	102c <_spi_m_sync_init+0x14>
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1024:	038b      	lsls	r3, r1, #14
		if (sercomspi_regs[i].n == n) {
    1026:	0e1b      	lsrs	r3, r3, #24
    1028:	2b03      	cmp	r3, #3
    102a:	d00b      	beq.n	1044 <_spi_m_sync_init+0x2c>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    102c:	2d00      	cmp	r5, #0
    102e:	d052      	beq.n	10d6 <_spi_m_sync_init+0xbe>
    1030:	1e60      	subs	r0, r4, #1
    1032:	4184      	sbcs	r4, r0
    1034:	b2e0      	uxtb	r0, r4
    1036:	4a31      	ldr	r2, [pc, #196]	; (10fc <_spi_m_sync_init+0xe4>)
    1038:	4931      	ldr	r1, [pc, #196]	; (1100 <_spi_m_sync_init+0xe8>)
    103a:	4b32      	ldr	r3, [pc, #200]	; (1104 <_spi_m_sync_init+0xec>)
    103c:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    103e:	200d      	movs	r0, #13
    1040:	4240      	negs	r0, r0
    1042:	e047      	b.n	10d4 <_spi_m_sync_init+0xbc>
	ASSERT(dev && hw);
    1044:	2800      	cmp	r0, #0
    1046:	d14e      	bne.n	10e6 <_spi_m_sync_init+0xce>
    1048:	4a2c      	ldr	r2, [pc, #176]	; (10fc <_spi_m_sync_init+0xe4>)
    104a:	492d      	ldr	r1, [pc, #180]	; (1100 <_spi_m_sync_init+0xe8>)
    104c:	2000      	movs	r0, #0
    104e:	4b2d      	ldr	r3, [pc, #180]	; (1104 <_spi_m_sync_init+0xec>)
    1050:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1052:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1054:	07db      	lsls	r3, r3, #31
    1056:	d418      	bmi.n	108a <_spi_m_sync_init+0x72>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1058:	2203      	movs	r2, #3
    105a:	69e3      	ldr	r3, [r4, #28]
    105c:	421a      	tst	r2, r3
    105e:	d1fc      	bne.n	105a <_spi_m_sync_init+0x42>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1060:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    1062:	079b      	lsls	r3, r3, #30
    1064:	d50b      	bpl.n	107e <_spi_m_sync_init+0x66>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1066:	6823      	ldr	r3, [r4, #0]
    1068:	2202      	movs	r2, #2
    106a:	4393      	bics	r3, r2
    106c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    106e:	3201      	adds	r2, #1
    1070:	69e3      	ldr	r3, [r4, #28]
    1072:	421a      	tst	r2, r3
    1074:	d1fc      	bne.n	1070 <_spi_m_sync_init+0x58>
    1076:	2202      	movs	r2, #2
    1078:	69e3      	ldr	r3, [r4, #28]
    107a:	421a      	tst	r2, r3
    107c:	d1fc      	bne.n	1078 <_spi_m_sync_init+0x60>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    107e:	2309      	movs	r3, #9
    1080:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1082:	2203      	movs	r2, #3
    1084:	69e3      	ldr	r3, [r4, #28]
    1086:	421a      	tst	r2, r3
    1088:	d1fc      	bne.n	1084 <_spi_m_sync_init+0x6c>
    108a:	2201      	movs	r2, #1
    108c:	69e3      	ldr	r3, [r4, #28]
    108e:	421a      	tst	r2, r3
    1090:	d1fc      	bne.n	108c <_spi_m_sync_init+0x74>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    1092:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    1094:	0020      	movs	r0, r4
    1096:	1e43      	subs	r3, r0, #1
    1098:	4198      	sbcs	r0, r3
    109a:	b2c0      	uxtb	r0, r0
    109c:	4a1a      	ldr	r2, [pc, #104]	; (1108 <_spi_m_sync_init+0xf0>)
    109e:	4918      	ldr	r1, [pc, #96]	; (1100 <_spi_m_sync_init+0xe8>)
    10a0:	4b18      	ldr	r3, [pc, #96]	; (1104 <_spi_m_sync_init+0xec>)
    10a2:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    10a4:	4b19      	ldr	r3, [pc, #100]	; (110c <_spi_m_sync_init+0xf4>)
    10a6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    10a8:	2203      	movs	r2, #3
    10aa:	69e3      	ldr	r3, [r4, #28]
    10ac:	421a      	tst	r2, r3
    10ae:	d1fc      	bne.n	10aa <_spi_m_sync_init+0x92>
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    10b0:	4b17      	ldr	r3, [pc, #92]	; (1110 <_spi_m_sync_init+0xf8>)
    10b2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    10b4:	2207      	movs	r2, #7
    10b6:	69e3      	ldr	r3, [r4, #28]
    10b8:	421a      	tst	r2, r3
    10ba:	d1fc      	bne.n	10b6 <_spi_m_sync_init+0x9e>
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    10bc:	2300      	movs	r3, #0
    10be:	6263      	str	r3, [r4, #36]	; 0x24
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    10c0:	2230      	movs	r2, #48	; 0x30
    10c2:	54a3      	strb	r3, [r4, r2]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    10c4:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    10c6:	2b00      	cmp	r3, #0
    10c8:	d1fc      	bne.n	10c4 <_spi_m_sync_init+0xac>
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    10ca:	3301      	adds	r3, #1
    10cc:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    10ce:	2300      	movs	r3, #0
    10d0:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    10d2:	2000      	movs	r0, #0
}
    10d4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    10d6:	4a09      	ldr	r2, [pc, #36]	; (10fc <_spi_m_sync_init+0xe4>)
    10d8:	4909      	ldr	r1, [pc, #36]	; (1100 <_spi_m_sync_init+0xe8>)
    10da:	2000      	movs	r0, #0
    10dc:	4b09      	ldr	r3, [pc, #36]	; (1104 <_spi_m_sync_init+0xec>)
    10de:	4798      	blx	r3
		return ERR_INVALID_ARG;
    10e0:	200d      	movs	r0, #13
    10e2:	4240      	negs	r0, r0
    10e4:	e7f6      	b.n	10d4 <_spi_m_sync_init+0xbc>
	ASSERT(dev && hw);
    10e6:	0008      	movs	r0, r1
    10e8:	1e43      	subs	r3, r0, #1
    10ea:	4198      	sbcs	r0, r3
    10ec:	b2c0      	uxtb	r0, r0
    10ee:	4a03      	ldr	r2, [pc, #12]	; (10fc <_spi_m_sync_init+0xe4>)
    10f0:	4903      	ldr	r1, [pc, #12]	; (1100 <_spi_m_sync_init+0xe8>)
    10f2:	4b04      	ldr	r3, [pc, #16]	; (1104 <_spi_m_sync_init+0xec>)
    10f4:	4798      	blx	r3
    10f6:	e7ac      	b.n	1052 <_spi_m_sync_init+0x3a>
    10f8:	43000400 	.word	0x43000400
    10fc:	0000091c 	.word	0x0000091c
    1100:	000037cc 	.word	0x000037cc
    1104:	00000ae1 	.word	0x00000ae1
    1108:	000008fa 	.word	0x000008fa
    110c:	10020008 	.word	0x10020008
    1110:	00020240 	.word	0x00020240

00001114 <_spi_s_sync_init>:

int32_t _spi_s_sync_init(struct _spi_s_sync_dev *dev, void *const hw)
{
    1114:	b510      	push	{r4, lr}
	return _spi_m_sync_init(dev, hw);
    1116:	4b01      	ldr	r3, [pc, #4]	; (111c <_spi_s_sync_init+0x8>)
    1118:	4798      	blx	r3
}
    111a:	bd10      	pop	{r4, pc}
    111c:	00001019 	.word	0x00001019

00001120 <_spi_s_sync_enable>:

	return _spi_sync_enable(dev->prvt);
}

int32_t _spi_s_sync_enable(struct _spi_s_sync_dev *dev)
{
    1120:	b510      	push	{r4, lr}
    1122:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    1124:	d00b      	beq.n	113e <_spi_s_sync_enable+0x1e>
    1126:	6800      	ldr	r0, [r0, #0]
    1128:	1e43      	subs	r3, r0, #1
    112a:	4198      	sbcs	r0, r3
    112c:	b2c0      	uxtb	r0, r0
    112e:	4a05      	ldr	r2, [pc, #20]	; (1144 <_spi_s_sync_enable+0x24>)
    1130:	4905      	ldr	r1, [pc, #20]	; (1148 <_spi_s_sync_enable+0x28>)
    1132:	4b06      	ldr	r3, [pc, #24]	; (114c <_spi_s_sync_enable+0x2c>)
    1134:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    1136:	6820      	ldr	r0, [r4, #0]
    1138:	4b05      	ldr	r3, [pc, #20]	; (1150 <_spi_s_sync_enable+0x30>)
    113a:	4798      	blx	r3
}
    113c:	bd10      	pop	{r4, pc}
    113e:	2000      	movs	r0, #0
    1140:	e7f5      	b.n	112e <_spi_s_sync_enable+0xe>
    1142:	46c0      	nop			; (mov r8, r8)
    1144:	0000097e 	.word	0x0000097e
    1148:	000037cc 	.word	0x000037cc
    114c:	00000ae1 	.word	0x00000ae1
    1150:	00000fc1 	.word	0x00000fc1

00001154 <_spi_s_sync_set_mode>:

	return _spi_set_mode(dev->prvt, mode);
}

int32_t _spi_s_sync_set_mode(struct _spi_s_sync_dev *dev, const enum spi_transfer_mode mode)
{
    1154:	b570      	push	{r4, r5, r6, lr}
    1156:	0005      	movs	r5, r0
    1158:	000c      	movs	r4, r1
	ASSERT(dev && dev->prvt);
    115a:	2800      	cmp	r0, #0
    115c:	d00c      	beq.n	1178 <_spi_s_sync_set_mode+0x24>
    115e:	6800      	ldr	r0, [r0, #0]
    1160:	1e43      	subs	r3, r0, #1
    1162:	4198      	sbcs	r0, r3
    1164:	b2c0      	uxtb	r0, r0
    1166:	4a05      	ldr	r2, [pc, #20]	; (117c <_spi_s_sync_set_mode+0x28>)
    1168:	4905      	ldr	r1, [pc, #20]	; (1180 <_spi_s_sync_set_mode+0x2c>)
    116a:	4b06      	ldr	r3, [pc, #24]	; (1184 <_spi_s_sync_set_mode+0x30>)
    116c:	4798      	blx	r3

	return _spi_set_mode(dev->prvt, mode);
    116e:	6828      	ldr	r0, [r5, #0]
    1170:	0021      	movs	r1, r4
    1172:	4b05      	ldr	r3, [pc, #20]	; (1188 <_spi_s_sync_set_mode+0x34>)
    1174:	4798      	blx	r3
}
    1176:	bd70      	pop	{r4, r5, r6, pc}
    1178:	2000      	movs	r0, #0
    117a:	e7f4      	b.n	1166 <_spi_s_sync_set_mode+0x12>
    117c:	000009c4 	.word	0x000009c4
    1180:	000037cc 	.word	0x000037cc
    1184:	00000ae1 	.word	0x00000ae1
    1188:	00000fe1 	.word	0x00000fe1

0000118c <_spi_s_sync_write_one>:

	return ERR_NONE;
}

int32_t _spi_s_sync_write_one(struct _spi_s_sync_dev *dev, uint16_t data)
{
    118c:	b570      	push	{r4, r5, r6, lr}
    118e:	0004      	movs	r4, r0
    1190:	000d      	movs	r5, r1
	ASSERT(dev && dev->prvt);
    1192:	2800      	cmp	r0, #0
    1194:	d00b      	beq.n	11ae <_spi_s_sync_write_one+0x22>
    1196:	6800      	ldr	r0, [r0, #0]
    1198:	1e43      	subs	r3, r0, #1
    119a:	4198      	sbcs	r0, r3
    119c:	b2c0      	uxtb	r0, r0
    119e:	4a05      	ldr	r2, [pc, #20]	; (11b4 <_spi_s_sync_write_one+0x28>)
    11a0:	4905      	ldr	r1, [pc, #20]	; (11b8 <_spi_s_sync_write_one+0x2c>)
    11a2:	4b06      	ldr	r3, [pc, #24]	; (11bc <_spi_s_sync_write_one+0x30>)
    11a4:	4798      	blx	r3

	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    11a6:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    11a8:	629d      	str	r5, [r3, #40]	; 0x28

	return ERR_NONE;
}
    11aa:	2000      	movs	r0, #0
    11ac:	bd70      	pop	{r4, r5, r6, pc}
    11ae:	2000      	movs	r0, #0
    11b0:	e7f5      	b.n	119e <_spi_s_sync_write_one+0x12>
    11b2:	46c0      	nop			; (mov r8, r8)
    11b4:	00000af3 	.word	0x00000af3
    11b8:	000037cc 	.word	0x000037cc
    11bc:	00000ae1 	.word	0x00000ae1

000011c0 <_spi_s_sync_read_one>:

	return hri_sercomspi_read_DATA_reg(dev->prvt);
}

uint16_t _spi_s_sync_read_one(struct _spi_s_sync_dev *dev)
{
    11c0:	b510      	push	{r4, lr}
    11c2:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    11c4:	d00b      	beq.n	11de <_spi_s_sync_read_one+0x1e>
    11c6:	6800      	ldr	r0, [r0, #0]
    11c8:	1e43      	subs	r3, r0, #1
    11ca:	4198      	sbcs	r0, r3
    11cc:	b2c0      	uxtb	r0, r0
    11ce:	4a05      	ldr	r2, [pc, #20]	; (11e4 <_spi_s_sync_read_one+0x24>)
    11d0:	4905      	ldr	r1, [pc, #20]	; (11e8 <_spi_s_sync_read_one+0x28>)
    11d2:	4b06      	ldr	r3, [pc, #24]	; (11ec <_spi_s_sync_read_one+0x2c>)
    11d4:	4798      	blx	r3

	return hri_sercomspi_read_DATA_reg(dev->prvt);
    11d6:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    11d8:	6a98      	ldr	r0, [r3, #40]	; 0x28
    11da:	b280      	uxth	r0, r0
}
    11dc:	bd10      	pop	{r4, pc}
    11de:	2000      	movs	r0, #0
    11e0:	e7f5      	b.n	11ce <_spi_s_sync_read_one+0xe>
    11e2:	46c0      	nop			; (mov r8, r8)
    11e4:	00000b0a 	.word	0x00000b0a
    11e8:	000037cc 	.word	0x000037cc
    11ec:	00000ae1 	.word	0x00000ae1

000011f0 <_spi_s_sync_is_tx_ready>:
{
	return _spi_m_async_register_callback(dev, cb_type, func);
}

bool _spi_s_sync_is_tx_ready(struct _spi_s_sync_dev *dev)
{
    11f0:	b570      	push	{r4, r5, r6, lr}
    11f2:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    11f4:	d00d      	beq.n	1212 <_spi_s_sync_is_tx_ready+0x22>
    11f6:	6800      	ldr	r0, [r0, #0]
    11f8:	1e43      	subs	r3, r0, #1
    11fa:	4198      	sbcs	r0, r3
    11fc:	b2c0      	uxtb	r0, r0
    11fe:	2501      	movs	r5, #1
    1200:	4028      	ands	r0, r5
    1202:	4a05      	ldr	r2, [pc, #20]	; (1218 <_spi_s_sync_is_tx_ready+0x28>)
    1204:	4905      	ldr	r1, [pc, #20]	; (121c <_spi_s_sync_is_tx_ready+0x2c>)
    1206:	4b06      	ldr	r3, [pc, #24]	; (1220 <_spi_s_sync_is_tx_ready+0x30>)
    1208:	4798      	blx	r3

	return hri_sercomi2cm_get_INTFLAG_reg(dev->prvt, SERCOM_SPI_INTFLAG_DRE);
    120a:	6823      	ldr	r3, [r4, #0]
	tmp = ((Sercom *)hw)->I2CM.INTFLAG.reg;
    120c:	7e18      	ldrb	r0, [r3, #24]
    120e:	4028      	ands	r0, r5
}
    1210:	bd70      	pop	{r4, r5, r6, pc}
    1212:	2000      	movs	r0, #0
    1214:	e7f3      	b.n	11fe <_spi_s_sync_is_tx_ready+0xe>
    1216:	46c0      	nop			; (mov r8, r8)
    1218:	00000b25 	.word	0x00000b25
    121c:	000037cc 	.word	0x000037cc
    1220:	00000ae1 	.word	0x00000ae1

00001224 <_spi_s_sync_is_rx_ready>:

bool _spi_s_sync_is_rx_ready(struct _spi_s_sync_dev *dev)
{
    1224:	b570      	push	{r4, r5, r6, lr}
    1226:	1e05      	subs	r5, r0, #0
	ASSERT(dev && dev->prvt);
    1228:	d00e      	beq.n	1248 <_spi_s_sync_is_rx_ready+0x24>
    122a:	6800      	ldr	r0, [r0, #0]
    122c:	1e43      	subs	r3, r0, #1
    122e:	4198      	sbcs	r0, r3
    1230:	b2c0      	uxtb	r0, r0
    1232:	2401      	movs	r4, #1
    1234:	4020      	ands	r0, r4
    1236:	4a05      	ldr	r2, [pc, #20]	; (124c <_spi_s_sync_is_rx_ready+0x28>)
    1238:	4905      	ldr	r1, [pc, #20]	; (1250 <_spi_s_sync_is_rx_ready+0x2c>)
    123a:	4b06      	ldr	r3, [pc, #24]	; (1254 <_spi_s_sync_is_rx_ready+0x30>)
    123c:	4798      	blx	r3

	return hri_sercomi2cm_get_INTFLAG_reg(dev->prvt, SERCOM_SPI_INTFLAG_RXC);
    123e:	682b      	ldr	r3, [r5, #0]
    1240:	7e18      	ldrb	r0, [r3, #24]
    1242:	0880      	lsrs	r0, r0, #2
    1244:	4020      	ands	r0, r4
}
    1246:	bd70      	pop	{r4, r5, r6, pc}
    1248:	2000      	movs	r0, #0
    124a:	e7f2      	b.n	1232 <_spi_s_sync_is_rx_ready+0xe>
    124c:	00000b2c 	.word	0x00000b2c
    1250:	000037cc 	.word	0x000037cc
    1254:	00000ae1 	.word	0x00000ae1

00001258 <_spi_s_sync_is_ss_deactivated>:

bool _spi_s_sync_is_ss_deactivated(struct _spi_s_sync_dev *dev)
{
    1258:	b510      	push	{r4, lr}
	void *hw = dev->prvt;
    125a:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev && hw);
    125c:	2800      	cmp	r0, #0
    125e:	d00f      	beq.n	1280 <_spi_s_sync_is_ss_deactivated+0x28>
    1260:	0020      	movs	r0, r4
    1262:	1e43      	subs	r3, r0, #1
    1264:	4198      	sbcs	r0, r3
    1266:	b2c0      	uxtb	r0, r0
    1268:	4a06      	ldr	r2, [pc, #24]	; (1284 <_spi_s_sync_is_ss_deactivated+0x2c>)
    126a:	4907      	ldr	r1, [pc, #28]	; (1288 <_spi_s_sync_is_ss_deactivated+0x30>)
    126c:	4b07      	ldr	r3, [pc, #28]	; (128c <_spi_s_sync_is_ss_deactivated+0x34>)
    126e:	4798      	blx	r3
    1270:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomi2cm_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC)) {
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
		return true;
	}
	return false;
    1272:	2000      	movs	r0, #0
	if (hri_sercomi2cm_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC)) {
    1274:	079b      	lsls	r3, r3, #30
    1276:	d502      	bpl.n	127e <_spi_s_sync_is_ss_deactivated+0x26>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1278:	2302      	movs	r3, #2
    127a:	7623      	strb	r3, [r4, #24]
		return true;
    127c:	3001      	adds	r0, #1
}
    127e:	bd10      	pop	{r4, pc}
    1280:	2000      	movs	r0, #0
    1282:	e7f1      	b.n	1268 <_spi_s_sync_is_ss_deactivated+0x10>
    1284:	00000b35 	.word	0x00000b35
    1288:	000037cc 	.word	0x000037cc
    128c:	00000ae1 	.word	0x00000ae1

00001290 <_spi_s_sync_is_error>:

bool _spi_s_sync_is_error(struct _spi_s_sync_dev *dev)
{
    1290:	b510      	push	{r4, lr}
	void *hw = dev->prvt;
    1292:	6804      	ldr	r4, [r0, #0]

	ASSERT(dev && hw);
    1294:	2800      	cmp	r0, #0
    1296:	d00d      	beq.n	12b4 <_spi_s_sync_is_error+0x24>
    1298:	0020      	movs	r0, r4
    129a:	1e43      	subs	r3, r0, #1
    129c:	4198      	sbcs	r0, r3
    129e:	b2c0      	uxtb	r0, r0
    12a0:	4a08      	ldr	r2, [pc, #32]	; (12c4 <_spi_s_sync_is_error+0x34>)
    12a2:	4909      	ldr	r1, [pc, #36]	; (12c8 <_spi_s_sync_is_error+0x38>)
    12a4:	4b09      	ldr	r3, [pc, #36]	; (12cc <_spi_s_sync_is_error+0x3c>)
    12a6:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.INTFLAG.reg;
    12a8:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomi2cm_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR)) {
    12aa:	b25b      	sxtb	r3, r3
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		return true;
	}
	return false;
    12ac:	2000      	movs	r0, #0
	if (hri_sercomi2cm_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR)) {
    12ae:	2b00      	cmp	r3, #0
    12b0:	db02      	blt.n	12b8 <_spi_s_sync_is_error+0x28>
}
    12b2:	bd10      	pop	{r4, pc}
    12b4:	2000      	movs	r0, #0
    12b6:	e7f3      	b.n	12a0 <_spi_s_sync_is_error+0x10>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    12b8:	2304      	movs	r3, #4
    12ba:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    12bc:	337c      	adds	r3, #124	; 0x7c
    12be:	7623      	strb	r3, [r4, #24]
		return true;
    12c0:	3001      	adds	r0, #1
    12c2:	e7f6      	b.n	12b2 <_spi_s_sync_is_error+0x22>
    12c4:	00000b42 	.word	0x00000b42
    12c8:	000037cc 	.word	0x000037cc
    12cc:	00000ae1 	.word	0x00000ae1

000012d0 <Run_DAC_with_Time>:





void Run_DAC_with_Time(uint16_t Voltage_Num, uint16_t time_delay, uint8_t DAC_Num){
    12d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    12d2:	46d6      	mov	lr, sl
    12d4:	b500      	push	{lr}
    12d6:	b084      	sub	sp, #16
    12d8:	468a      	mov	sl, r1
    12da:	0017      	movs	r7, r2
	uint16_t Voltage = Voltage_Num;
    12dc:	ab02      	add	r3, sp, #8
    12de:	1d9c      	adds	r4, r3, #6
    12e0:	80d8      	strh	r0, [r3, #6]
	dac_sync_write(&DAC_0, DAC_Num, &Voltage, 1);
    12e2:	4d18      	ldr	r5, [pc, #96]	; (1344 <Run_DAC_with_Time+0x74>)
    12e4:	2301      	movs	r3, #1
    12e6:	0022      	movs	r2, r4
    12e8:	0039      	movs	r1, r7
    12ea:	0028      	movs	r0, r5
    12ec:	4e16      	ldr	r6, [pc, #88]	; (1348 <Run_DAC_with_Time+0x78>)
    12ee:	47b0      	blx	r6
	dac_sync_write(&DAC_0, DAC_Num, &Voltage, 1);
    12f0:	2301      	movs	r3, #1
    12f2:	0022      	movs	r2, r4
    12f4:	9700      	str	r7, [sp, #0]
    12f6:	0039      	movs	r1, r7
    12f8:	0028      	movs	r0, r5
    12fa:	47b0      	blx	r6
	//half a delay
	delay_ms(time_delay/2);
    12fc:	4653      	mov	r3, sl
    12fe:	085b      	lsrs	r3, r3, #1
    1300:	9301      	str	r3, [sp, #4]
    1302:	0018      	movs	r0, r3
    1304:	4f11      	ldr	r7, [pc, #68]	; (134c <Run_DAC_with_Time+0x7c>)
    1306:	47b8      	blx	r7
	//continue writing to the DAC
	dac_sync_write(&DAC_0, DAC_Num, &Voltage, 1);
    1308:	2301      	movs	r3, #1
    130a:	0022      	movs	r2, r4
    130c:	9900      	ldr	r1, [sp, #0]
    130e:	0028      	movs	r0, r5
    1310:	47b0      	blx	r6
	dac_sync_write(&DAC_0, DAC_Num, &Voltage, 1);
    1312:	2301      	movs	r3, #1
    1314:	0022      	movs	r2, r4
    1316:	9900      	ldr	r1, [sp, #0]
    1318:	0028      	movs	r0, r5
    131a:	47b0      	blx	r6
	//other half of the delay
	delay_ms(time_delay/2);
    131c:	9801      	ldr	r0, [sp, #4]
    131e:	47b8      	blx	r7
	//write to the DAC
	dac_sync_write(&DAC_0, DAC_Num, &Voltage, 1);
    1320:	2301      	movs	r3, #1
    1322:	0022      	movs	r2, r4
    1324:	9900      	ldr	r1, [sp, #0]
    1326:	0028      	movs	r0, r5
    1328:	47b0      	blx	r6
	//If the delay was an odd number, will rectify this with an additional 1 ms delay here:
	delay_ms(time_delay%2);
    132a:	2001      	movs	r0, #1
    132c:	4653      	mov	r3, sl
    132e:	4018      	ands	r0, r3
    1330:	47b8      	blx	r7
	//write to the DAC just before 1st read:
	dac_sync_write(&DAC_0, DAC_Num, &Voltage, 1);
    1332:	2301      	movs	r3, #1
    1334:	0022      	movs	r2, r4
    1336:	9900      	ldr	r1, [sp, #0]
    1338:	0028      	movs	r0, r5
    133a:	47b0      	blx	r6
}
    133c:	b004      	add	sp, #16
    133e:	bc04      	pop	{r2}
    1340:	4692      	mov	sl, r2
    1342:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1344:	20000030 	.word	0x20000030
    1348:	00000709 	.word	0x00000709
    134c:	000007bd 	.word	0x000007bd

00001350 <Run_ADC>:

uint16_t Run_ADC(uint16_t Voltage_Num, uint8_t DAC_Num){
    1350:	b5f0      	push	{r4, r5, r6, r7, lr}
    1352:	b085      	sub	sp, #20
    1354:	000c      	movs	r4, r1
	uint8_t buffer[2];
	uint16_t Voltage = Voltage_Num;
    1356:	ab02      	add	r3, sp, #8
    1358:	8058      	strh	r0, [r3, #2]
    135a:	270a      	movs	r7, #10
	double result = 0;
    135c:	2200      	movs	r2, #0
    135e:	2300      	movs	r3, #0
    1360:	9200      	str	r2, [sp, #0]
    1362:	9301      	str	r3, [sp, #4]
	uint16_t temp = 0;
	int16_t temp1 = 0;
	for(uint8_t i = 0; i < 10; i++){
		
		dac_sync_write(&DAC_0, DAC_Num, &Voltage, 1);
    1364:	4e21      	ldr	r6, [pc, #132]	; (13ec <Run_ADC+0x9c>)
    1366:	e01e      	b.n	13a6 <Run_ADC+0x56>
		dac_sync_write(&DAC_0, DAC_Num, &Voltage, 1);
		if(DAC_Num == 1){
			adc_sync_enable_channel(&ADC_1, 0);
    1368:	4d21      	ldr	r5, [pc, #132]	; (13f0 <Run_ADC+0xa0>)
    136a:	2100      	movs	r1, #0
    136c:	0028      	movs	r0, r5
    136e:	4b21      	ldr	r3, [pc, #132]	; (13f4 <Run_ADC+0xa4>)
    1370:	4798      	blx	r3
			adc_sync_read_channel(&ADC_1, 1, buffer, 2); //changed (&ADC_0, 0, buffer, 2) to (&ADC_0, 1, buffer, 2)
    1372:	2302      	movs	r3, #2
    1374:	aa03      	add	r2, sp, #12
    1376:	2101      	movs	r1, #1
    1378:	0028      	movs	r0, r5
    137a:	4d1f      	ldr	r5, [pc, #124]	; (13f8 <Run_ADC+0xa8>)
    137c:	47a8      	blx	r5
		{
			adc_sync_enable_channel(&ADC_0, 0);
			adc_sync_read_channel(&ADC_0, 0, buffer, 2); //changed (&ADC_0, 0, buffer, 2) to (&ADC_0, 1, buffer, 2)
		}
		//temp = buffer[0]|buffer[1]<<8;
		temp1 = buffer[0]|buffer[1]<<8;
    137e:	aa03      	add	r2, sp, #12
    1380:	7853      	ldrb	r3, [r2, #1]
    1382:	021b      	lsls	r3, r3, #8
    1384:	7810      	ldrb	r0, [r2, #0]
    1386:	4318      	orrs	r0, r3
		result += temp1;
    1388:	b200      	sxth	r0, r0
    138a:	4b1c      	ldr	r3, [pc, #112]	; (13fc <Run_ADC+0xac>)
    138c:	4798      	blx	r3
    138e:	0002      	movs	r2, r0
    1390:	000b      	movs	r3, r1
    1392:	9800      	ldr	r0, [sp, #0]
    1394:	9901      	ldr	r1, [sp, #4]
    1396:	4d1a      	ldr	r5, [pc, #104]	; (1400 <Run_ADC+0xb0>)
    1398:	47a8      	blx	r5
    139a:	9000      	str	r0, [sp, #0]
    139c:	9101      	str	r1, [sp, #4]
    139e:	3f01      	subs	r7, #1
    13a0:	b2ff      	uxtb	r7, r7
	for(uint8_t i = 0; i < 10; i++){
    13a2:	2f00      	cmp	r7, #0
    13a4:	d018      	beq.n	13d8 <Run_ADC+0x88>
		dac_sync_write(&DAC_0, DAC_Num, &Voltage, 1);
    13a6:	2301      	movs	r3, #1
    13a8:	aa02      	add	r2, sp, #8
    13aa:	3202      	adds	r2, #2
    13ac:	0021      	movs	r1, r4
    13ae:	4815      	ldr	r0, [pc, #84]	; (1404 <Run_ADC+0xb4>)
    13b0:	47b0      	blx	r6
		dac_sync_write(&DAC_0, DAC_Num, &Voltage, 1);
    13b2:	2301      	movs	r3, #1
    13b4:	aa02      	add	r2, sp, #8
    13b6:	3202      	adds	r2, #2
    13b8:	0021      	movs	r1, r4
    13ba:	4812      	ldr	r0, [pc, #72]	; (1404 <Run_ADC+0xb4>)
    13bc:	47b0      	blx	r6
		if(DAC_Num == 1){
    13be:	2c01      	cmp	r4, #1
    13c0:	d0d2      	beq.n	1368 <Run_ADC+0x18>
			adc_sync_enable_channel(&ADC_0, 0);
    13c2:	2100      	movs	r1, #0
    13c4:	4810      	ldr	r0, [pc, #64]	; (1408 <Run_ADC+0xb8>)
    13c6:	4b0b      	ldr	r3, [pc, #44]	; (13f4 <Run_ADC+0xa4>)
    13c8:	4798      	blx	r3
			adc_sync_read_channel(&ADC_0, 0, buffer, 2); //changed (&ADC_0, 0, buffer, 2) to (&ADC_0, 1, buffer, 2)
    13ca:	2302      	movs	r3, #2
    13cc:	aa03      	add	r2, sp, #12
    13ce:	2100      	movs	r1, #0
    13d0:	480d      	ldr	r0, [pc, #52]	; (1408 <Run_ADC+0xb8>)
    13d2:	4d09      	ldr	r5, [pc, #36]	; (13f8 <Run_ADC+0xa8>)
    13d4:	47a8      	blx	r5
    13d6:	e7d2      	b.n	137e <Run_ADC+0x2e>
	}
	result = result/10;
    13d8:	2200      	movs	r2, #0
    13da:	4b0c      	ldr	r3, [pc, #48]	; (140c <Run_ADC+0xbc>)
    13dc:	4c0c      	ldr	r4, [pc, #48]	; (1410 <Run_ADC+0xc0>)
    13de:	47a0      	blx	r4
	temp = (uint16_t)result;
    13e0:	4b0c      	ldr	r3, [pc, #48]	; (1414 <Run_ADC+0xc4>)
    13e2:	4798      	blx	r3
	return temp;
    13e4:	b280      	uxth	r0, r0
}
    13e6:	b005      	add	sp, #20
    13e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13ea:	46c0      	nop			; (mov r8, r8)
    13ec:	00000709 	.word	0x00000709
    13f0:	20000000 	.word	0x20000000
    13f4:	00000535 	.word	0x00000535
    13f8:	0000058d 	.word	0x0000058d
    13fc:	00003585 	.word	0x00003585
    1400:	00002069 	.word	0x00002069
    1404:	20000030 	.word	0x20000030
    1408:	20000024 	.word	0x20000024
    140c:	40240000 	.word	0x40240000
    1410:	00002689 	.word	0x00002689
    1414:	0000202d 	.word	0x0000202d

00001418 <main>:


int main(void)
{
    1418:	b5f0      	push	{r4, r5, r6, r7, lr}
    141a:	46de      	mov	lr, fp
    141c:	4657      	mov	r7, sl
    141e:	464e      	mov	r6, r9
    1420:	4645      	mov	r5, r8
    1422:	b5e0      	push	{r5, r6, r7, lr}
    1424:	4cd9      	ldr	r4, [pc, #868]	; (178c <main+0x374>)
    1426:	44a5      	add	sp, r4
    1428:	af00      	add	r7, sp, #0
	
	
	atmel_start_init();
    142a:	4bd9      	ldr	r3, [pc, #868]	; (1790 <main+0x378>)
    142c:	4798      	blx	r3
	uint16_t total_steps = 0; // total number of steps (both up and down)
	uint16_t DAC_Pulse_Width_1	= Pulse_Width_1 -2; //initialized value (received from SPI)
	uint16_t DAC_Step_Time_1 = Step_Time_1 - Pulse_Width_1 -2;
	uint16_t DAC_Step_Height_1	= Step_Height_1; //initialized value (received from SPI)
	uint16_t DAC_Pulse_Amplitude_1 = Pulse_Amplitude_1; //initialized value (received from SPI)
	uint16_t DAC_Start_Offset_1= Start_Offset_1; //initialized value (received from SPI)
    142e:	23b8      	movs	r3, #184	; 0xb8
    1430:	00db      	lsls	r3, r3, #3
    1432:	4ad8      	ldr	r2, [pc, #864]	; (1794 <main+0x37c>)
    1434:	2120      	movs	r1, #32
    1436:	468c      	mov	ip, r1
    1438:	44bc      	add	ip, r7
    143a:	4462      	add	r2, ip
    143c:	8013      	strh	r3, [r2, #0]
	
	uint16_t DAC_Pulse_Width_2	= Pulse_Width_2 - 9; //initialized value (received from SPI)
	uint16_t DAC_Step_Time_2 = Step_Time_2 - Pulse_Width_2 - 9;
	uint16_t DAC_Step_Height_2 	= Step_Height_2; //initialized value (received from SPI)
	uint16_t DAC_Pulse_Amplitude_2 = Pulse_Amplitude_2; //initialized value (received from SPI)
	uint16_t DAC_Start_Offset_2= Start_Offset_2; //initialized value (received from SPI)
    143e:	4ad6      	ldr	r2, [pc, #856]	; (1798 <main+0x380>)
    1440:	468c      	mov	ip, r1
    1442:	44bc      	add	ip, r7
    1444:	4462      	add	r2, ip
    1446:	8013      	strh	r3, [r2, #0]
	double step_number = 0;
	uint16_t highcount = 0;
	//uint16_t lowcount = 0;
	uint8_t buffer[2]; //stores the ADC result, to be passed into the value of the pointer
	uint16_t to_buffer;
	uint16_t stepheight = DAC_Start_Offset_2+DAC_Pulse_Amplitude_2; //value that drives the DAC, will initialize the DAC high
    1448:	4ad4      	ldr	r2, [pc, #848]	; (179c <main+0x384>)
    144a:	4bd5      	ldr	r3, [pc, #852]	; (17a0 <main+0x388>)
    144c:	468c      	mov	ip, r1
    144e:	44bc      	add	ip, r7
    1450:	4463      	add	r3, ip
    1452:	801a      	strh	r2, [r3, #0]
	uint8_t high_or_low = 0;
	
	
	delay_ms(2000);
    1454:	20fa      	movs	r0, #250	; 0xfa
    1456:	00c0      	lsls	r0, r0, #3
    1458:	4bd2      	ldr	r3, [pc, #840]	; (17a4 <main+0x38c>)
    145a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    145c:	22c0      	movs	r2, #192	; 0xc0
    145e:	05d2      	lsls	r2, r2, #23
    1460:	2180      	movs	r1, #128	; 0x80
    1462:	0109      	lsls	r1, r1, #4
    1464:	6091      	str	r1, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1466:	4bd0      	ldr	r3, [pc, #832]	; (17a8 <main+0x390>)
    1468:	48d0      	ldr	r0, [pc, #832]	; (17ac <main+0x394>)
    146a:	6298      	str	r0, [r3, #40]	; 0x28
    146c:	20c0      	movs	r0, #192	; 0xc0
    146e:	0600      	lsls	r0, r0, #24
    1470:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1472:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1474:	244b      	movs	r4, #75	; 0x4b
    1476:	5d18      	ldrb	r0, [r3, r4]
    1478:	2504      	movs	r5, #4
    147a:	4328      	orrs	r0, r5
    147c:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    147e:	6151      	str	r1, [r2, #20]

	
	/* Initializes MCU, drivers and middleware */
	

	spi_s_sync_set_mode(&SPI_0, 0);
    1480:	4ccb      	ldr	r4, [pc, #812]	; (17b0 <main+0x398>)
    1482:	2100      	movs	r1, #0
    1484:	0020      	movs	r0, r4
    1486:	4bcb      	ldr	r3, [pc, #812]	; (17b4 <main+0x39c>)
    1488:	4798      	blx	r3
	/* Replace with your application code */
	struct io_descriptor *io;
	spi_s_sync_get_io_descriptor(&SPI_0, &io);
    148a:	4bcb      	ldr	r3, [pc, #812]	; (17b8 <main+0x3a0>)
    148c:	2220      	movs	r2, #32
    148e:	18ba      	adds	r2, r7, r2
    1490:	18d1      	adds	r1, r2, r3
    1492:	0020      	movs	r0, r4
    1494:	4bc9      	ldr	r3, [pc, #804]	; (17bc <main+0x3a4>)
    1496:	4798      	blx	r3

	spi_s_sync_enable(&SPI_0);
    1498:	0020      	movs	r0, r4
    149a:	4bc9      	ldr	r3, [pc, #804]	; (17c0 <main+0x3a8>)
    149c:	4798      	blx	r3
	
	uint8_t volatile data_in[100];
	uint8_t volatile data_out[2000];
	
	START:data_in[0] = 0x00;
    149e:	23fc      	movs	r3, #252	; 0xfc
    14a0:	00db      	lsls	r3, r3, #3
    14a2:	2220      	movs	r2, #32
    14a4:	18ba      	adds	r2, r7, r2
    14a6:	18d6      	adds	r6, r2, r3
    14a8:	2300      	movs	r3, #0
    14aa:	469b      	mov	fp, r3
	//io_write(io, data_in, 3);
	
	bool test_flag = true;
	gpio_set_pin_level(PA11, true);
	delay_us(1);
    14ac:	4bc5      	ldr	r3, [pc, #788]	; (17c4 <main+0x3ac>)
    14ae:	469a      	mov	sl, r3
    14b0:	e014      	b.n	14dc <main+0xc4>
	
	// monitor for start command
	// This should be interrupt based, but with the board we have we cant :/
	int count = 0;
	while(1){
		data_in[0] = 0;
    14b2:	465b      	mov	r3, fp
    14b4:	7033      	strb	r3, [r6, #0]
		io_read(io, data_in, 2);
    14b6:	2202      	movs	r2, #2
    14b8:	0031      	movs	r1, r6
    14ba:	4bbf      	ldr	r3, [pc, #764]	; (17b8 <main+0x3a0>)
    14bc:	2020      	movs	r0, #32
    14be:	4684      	mov	ip, r0
    14c0:	44bc      	add	ip, r7
    14c2:	4463      	add	r3, ip
    14c4:	6818      	ldr	r0, [r3, #0]
    14c6:	47a8      	blx	r5
		if(data_in[0] == START_CYCLE) {sensor_run = data_in[1]; break;}
    14c8:	7833      	ldrb	r3, [r6, #0]
    14ca:	2b45      	cmp	r3, #69	; 0x45
    14cc:	d038      	beq.n	1540 <main+0x128>
		else if(data_in[0] == 171) {goto HANDSHAKE;}
    14ce:	7833      	ldrb	r3, [r6, #0]
    14d0:	b2db      	uxtb	r3, r3
    14d2:	2bab      	cmp	r3, #171	; 0xab
    14d4:	d024      	beq.n	1520 <main+0x108>
    14d6:	3c01      	subs	r4, #1
		else {count++; if(count > 5) {goto START;}}
    14d8:	2c00      	cmp	r4, #0
    14da:	d1ea      	bne.n	14b2 <main+0x9a>
	START:data_in[0] = 0x00;
    14dc:	465b      	mov	r3, fp
    14de:	7033      	strb	r3, [r6, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    14e0:	24c0      	movs	r4, #192	; 0xc0
    14e2:	05e4      	lsls	r4, r4, #23
    14e4:	2580      	movs	r5, #128	; 0x80
    14e6:	012d      	lsls	r5, r5, #4
    14e8:	61a5      	str	r5, [r4, #24]
	delay_us(1);
    14ea:	2001      	movs	r0, #1
    14ec:	47d0      	blx	sl
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    14ee:	6165      	str	r5, [r4, #20]
	delay_us(1);
    14f0:	2001      	movs	r0, #1
    14f2:	47d0      	blx	sl
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    14f4:	61a5      	str	r5, [r4, #24]
	delay_us(1);
    14f6:	2001      	movs	r0, #1
    14f8:	47d0      	blx	sl
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    14fa:	6165      	str	r5, [r4, #20]
		io_read(io, data_in, 1);
    14fc:	2201      	movs	r2, #1
    14fe:	0031      	movs	r1, r6
    1500:	4bad      	ldr	r3, [pc, #692]	; (17b8 <main+0x3a0>)
    1502:	2020      	movs	r0, #32
    1504:	4684      	mov	ip, r0
    1506:	44bc      	add	ip, r7
    1508:	4463      	add	r3, ip
    150a:	6818      	ldr	r0, [r3, #0]
    150c:	4bae      	ldr	r3, [pc, #696]	; (17c8 <main+0x3b0>)
    150e:	4798      	blx	r3
		if(data_in[0] == 171) {
    1510:	7833      	ldrb	r3, [r6, #0]
    1512:	b2db      	uxtb	r3, r3
    1514:	2bab      	cmp	r3, #171	; 0xab
    1516:	d1f1      	bne.n	14fc <main+0xe4>
			data_out[0] = 0x59;
    1518:	3b52      	subs	r3, #82	; 0x52
    151a:	2230      	movs	r2, #48	; 0x30
    151c:	18ba      	adds	r2, r7, r2
    151e:	7013      	strb	r3, [r2, #0]
			HANDSHAKE: io_write(io, data_out, 1);
    1520:	2201      	movs	r2, #1
    1522:	2310      	movs	r3, #16
    1524:	2120      	movs	r1, #32
    1526:	1879      	adds	r1, r7, r1
    1528:	18c9      	adds	r1, r1, r3
    152a:	4ba3      	ldr	r3, [pc, #652]	; (17b8 <main+0x3a0>)
    152c:	2020      	movs	r0, #32
    152e:	4684      	mov	ip, r0
    1530:	44bc      	add	ip, r7
    1532:	4463      	add	r3, ip
    1534:	6818      	ldr	r0, [r3, #0]
    1536:	4ba5      	ldr	r3, [pc, #660]	; (17cc <main+0x3b4>)
    1538:	4798      	blx	r3
    153a:	2406      	movs	r4, #6
		io_read(io, data_in, 2);
    153c:	4da2      	ldr	r5, [pc, #648]	; (17c8 <main+0x3b0>)
    153e:	e7b8      	b.n	14b2 <main+0x9a>
		if(data_in[0] == START_CYCLE) {sensor_run = data_in[1]; break;}
    1540:	7873      	ldrb	r3, [r6, #1]
    1542:	b2db      	uxtb	r3, r3
    1544:	4699      	mov	r9, r3
    1546:	4ba2      	ldr	r3, [pc, #648]	; (17d0 <main+0x3b8>)
    1548:	464a      	mov	r2, r9
    154a:	701a      	strb	r2, [r3, #0]
	//{
	//dac_sync_write(&DAC_0,0,&i,1);
	//delay_us(1000);
	//}
	
	if(sensor_run == 2) {
    154c:	464b      	mov	r3, r9
    154e:	2b02      	cmp	r3, #2
    1550:	d042      	beq.n	15d8 <main+0x1c0>
		
		gpio_set_pin_level(PA11, true);
		delay_us(1);
		gpio_set_pin_level(PA11, false);
		delay_us(1);
		} else if (sensor_run == 1) {
    1552:	464b      	mov	r3, r9
    1554:	2b01      	cmp	r3, #1
    1556:	d100      	bne.n	155a <main+0x142>
    1558:	e1ca      	b.n	18f0 <main+0x4d8>
	//gpio_set_pin_level(PA11, false);
	//
	//delay_us(1);
	
	uint8_t data_[10];
	data_[0] = CONVERSION_COMPLETE;
    155a:	23aa      	movs	r3, #170	; 0xaa
    155c:	2224      	movs	r2, #36	; 0x24
    155e:	18ba      	adds	r2, r7, r2
    1560:	7013      	strb	r3, [r2, #0]
	io_write(io, data_, 1);
    1562:	2201      	movs	r2, #1
    1564:	3b86      	subs	r3, #134	; 0x86
    1566:	18f9      	adds	r1, r7, r3
    1568:	4b93      	ldr	r3, [pc, #588]	; (17b8 <main+0x3a0>)
    156a:	2020      	movs	r0, #32
    156c:	4684      	mov	ip, r0
    156e:	44bc      	add	ip, r7
    1570:	4463      	add	r3, ip
    1572:	6818      	ldr	r0, [r3, #0]
    1574:	4b95      	ldr	r3, [pc, #596]	; (17cc <main+0x3b4>)
    1576:	4798      	blx	r3
	
	//delay_us(100);
	// Retrieve configs
	data_in[0] = 0; data_in[1] = 0;
    1578:	2300      	movs	r3, #0
    157a:	7033      	strb	r3, [r6, #0]
    157c:	2300      	movs	r3, #0
    157e:	7073      	strb	r3, [r6, #1]
	while(1){
		delay_us(1);
    1580:	4c90      	ldr	r4, [pc, #576]	; (17c4 <main+0x3ac>)
		io_read(io, data_in, 2);
    1582:	4b91      	ldr	r3, [pc, #580]	; (17c8 <main+0x3b0>)
    1584:	4698      	mov	r8, r3
		delay_us(1);
    1586:	2001      	movs	r0, #1
    1588:	47a0      	blx	r4
		io_read(io, data_in, 2);
    158a:	2202      	movs	r2, #2
    158c:	0031      	movs	r1, r6
    158e:	4b8a      	ldr	r3, [pc, #552]	; (17b8 <main+0x3a0>)
    1590:	2020      	movs	r0, #32
    1592:	4684      	mov	ip, r0
    1594:	44bc      	add	ip, r7
    1596:	4463      	add	r3, ip
    1598:	6818      	ldr	r0, [r3, #0]
    159a:	47c0      	blx	r8
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    159c:	25c0      	movs	r5, #192	; 0xc0
    159e:	05ed      	lsls	r5, r5, #23
    15a0:	2380      	movs	r3, #128	; 0x80
    15a2:	011b      	lsls	r3, r3, #4
    15a4:	4699      	mov	r9, r3
    15a6:	61ab      	str	r3, [r5, #24]
		gpio_set_pin_level(PA11, true);
		delay_us(1);
    15a8:	2001      	movs	r0, #1
    15aa:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    15ac:	464b      	mov	r3, r9
    15ae:	616b      	str	r3, [r5, #20]
		gpio_set_pin_level(PA11, false);
		delay_us(1);
    15b0:	2001      	movs	r0, #1
    15b2:	47a0      	blx	r4
		//gpio_set_pin_level(PA11, true);
		if((data_in[0] == START_DATA) && (data_in[1] != 0x00)) {
    15b4:	7833      	ldrb	r3, [r6, #0]
    15b6:	2b42      	cmp	r3, #66	; 0x42
    15b8:	d100      	bne.n	15bc <main+0x1a4>
    15ba:	e2c1      	b.n	1b40 <main+0x728>
				io_write(io, &data_out[i], 1);
				delay_us(5);
			}
			goto START;
			//break;
			} else if ((data_in[1] == START_DATA) && (data_in[0] != 0x00)) {
    15bc:	7873      	ldrb	r3, [r6, #1]
    15be:	2b42      	cmp	r3, #66	; 0x42
    15c0:	d100      	bne.n	15c4 <main+0x1ac>
    15c2:	e30f      	b.n	1be4 <main+0x7cc>
				io_write(io, &data_out[i], 1);
				delay_us(5);
			}
			goto START;
		}
		if((data_in[0] == data_in[1]) && data_in[0] == 171) {goto HANDSHAKE;}
    15c4:	7833      	ldrb	r3, [r6, #0]
    15c6:	7872      	ldrb	r2, [r6, #1]
    15c8:	b2db      	uxtb	r3, r3
    15ca:	4293      	cmp	r3, r2
    15cc:	d1db      	bne.n	1586 <main+0x16e>
    15ce:	7833      	ldrb	r3, [r6, #0]
    15d0:	b2db      	uxtb	r3, r3
    15d2:	2bab      	cmp	r3, #171	; 0xab
    15d4:	d1d7      	bne.n	1586 <main+0x16e>
    15d6:	e7a3      	b.n	1520 <main+0x108>
	if(sensor_run == 2) {
    15d8:	466b      	mov	r3, sp
    15da:	613b      	str	r3, [r7, #16]
		step_number = ((DAC_End_Value_2 - DAC_Start_Offset_2)/ DAC_Step_Height_2);
    15dc:	4b6e      	ldr	r3, [pc, #440]	; (1798 <main+0x380>)
    15de:	2220      	movs	r2, #32
    15e0:	4694      	mov	ip, r2
    15e2:	44bc      	add	ip, r7
    15e4:	4463      	add	r3, ip
    15e6:	881d      	ldrh	r5, [r3, #0]
    15e8:	487a      	ldr	r0, [pc, #488]	; (17d4 <main+0x3bc>)
    15ea:	1b40      	subs	r0, r0, r5
    15ec:	2106      	movs	r1, #6
    15ee:	4b7a      	ldr	r3, [pc, #488]	; (17d8 <main+0x3c0>)
    15f0:	4798      	blx	r3
		total_steps = (uint16_t)step_number;
    15f2:	b282      	uxth	r2, r0
    15f4:	4690      	mov	r8, r2
		step_number = ((DAC_End_Value_2 - DAC_Start_Offset_2)/ DAC_Step_Height_2);
    15f6:	6178      	str	r0, [r7, #20]
    15f8:	4b78      	ldr	r3, [pc, #480]	; (17dc <main+0x3c4>)
    15fa:	4798      	blx	r3
    15fc:	61b8      	str	r0, [r7, #24]
    15fe:	61f9      	str	r1, [r7, #28]
		if((double)total_steps < step_number){
    1600:	4640      	mov	r0, r8
    1602:	4b77      	ldr	r3, [pc, #476]	; (17e0 <main+0x3c8>)
    1604:	4798      	blx	r3
    1606:	0002      	movs	r2, r0
    1608:	000b      	movs	r3, r1
    160a:	69b8      	ldr	r0, [r7, #24]
    160c:	69f9      	ldr	r1, [r7, #28]
    160e:	4c75      	ldr	r4, [pc, #468]	; (17e4 <main+0x3cc>)
    1610:	47a0      	blx	r4
    1612:	2800      	cmp	r0, #0
    1614:	d034      	beq.n	1680 <main+0x268>
			total_steps = (total_steps+1)*2;
    1616:	8abb      	ldrh	r3, [r7, #20]
    1618:	3301      	adds	r3, #1
    161a:	005b      	lsls	r3, r3, #1
    161c:	b29b      	uxth	r3, r3
    161e:	61bb      	str	r3, [r7, #24]
		uint8_t result_2_high[total_steps];
    1620:	69bb      	ldr	r3, [r7, #24]
    1622:	3307      	adds	r3, #7
    1624:	08db      	lsrs	r3, r3, #3
    1626:	00db      	lsls	r3, r3, #3
    1628:	466a      	mov	r2, sp
    162a:	1ad2      	subs	r2, r2, r3
    162c:	4695      	mov	sp, r2
    162e:	46e9      	mov	r9, sp
		uint8_t result_2_low[total_steps];
    1630:	1ad2      	subs	r2, r2, r3
    1632:	4695      	mov	sp, r2
    1634:	617a      	str	r2, [r7, #20]
		stepheight = DAC_Start_Offset_2; //value that drives the DAC, will initialize the DAC high
    1636:	4a5a      	ldr	r2, [pc, #360]	; (17a0 <main+0x388>)
    1638:	2320      	movs	r3, #32
    163a:	18fb      	adds	r3, r7, r3
    163c:	189c      	adds	r4, r3, r2
    163e:	8025      	strh	r5, [r4, #0]
		adc_sync_init(&ADC_1, ADC, (void *)NULL); //initialize the values for the second ADC 1
    1640:	4d69      	ldr	r5, [pc, #420]	; (17e8 <main+0x3d0>)
    1642:	2200      	movs	r2, #0
    1644:	4969      	ldr	r1, [pc, #420]	; (17ec <main+0x3d4>)
    1646:	0028      	movs	r0, r5
    1648:	4b69      	ldr	r3, [pc, #420]	; (17f0 <main+0x3d8>)
    164a:	4798      	blx	r3
		dac_sync_enable_channel(&DAC_0, 1); //enable the DAC 1 channel
    164c:	2101      	movs	r1, #1
    164e:	4869      	ldr	r0, [pc, #420]	; (17f4 <main+0x3dc>)
    1650:	4b69      	ldr	r3, [pc, #420]	; (17f8 <main+0x3e0>)
    1652:	4798      	blx	r3
		adc_sync_enable_channel(&ADC_1, 0); //0x43000c00 //enable the channel of the ADC
    1654:	2100      	movs	r1, #0
    1656:	0028      	movs	r0, r5
    1658:	4b68      	ldr	r3, [pc, #416]	; (17fc <main+0x3e4>)
    165a:	4798      	blx	r3
		dac_sync_write(&DAC_0, 1, &stepheight, 1); //write the first value, which will be a high offset
    165c:	2301      	movs	r3, #1
    165e:	0022      	movs	r2, r4
    1660:	0019      	movs	r1, r3
    1662:	4864      	ldr	r0, [pc, #400]	; (17f4 <main+0x3dc>)
    1664:	4c66      	ldr	r4, [pc, #408]	; (1800 <main+0x3e8>)
    1666:	47a0      	blx	r4
		for(uint16_t i = 0; i < total_steps; i++) {
    1668:	69bb      	ldr	r3, [r7, #24]
    166a:	2b00      	cmp	r3, #0
    166c:	d100      	bne.n	1670 <main+0x258>
    166e:	e2dc      	b.n	1c2a <main+0x812>
    1670:	2200      	movs	r2, #0
    1672:	4690      	mov	r8, r2
    1674:	0015      	movs	r5, r2
					dac_sync_write(&DAC_0, 1, &DAC_Start_Offset_2, 1);
    1676:	61ba      	str	r2, [r7, #24]
    1678:	4659      	mov	r1, fp
    167a:	7339      	strb	r1, [r7, #12]
    167c:	469b      	mov	fp, r3
    167e:	e06e      	b.n	175e <main+0x346>
			total_steps = total_steps*2;
    1680:	4643      	mov	r3, r8
    1682:	005b      	lsls	r3, r3, #1
    1684:	b29b      	uxth	r3, r3
    1686:	61bb      	str	r3, [r7, #24]
    1688:	e7ca      	b.n	1620 <main+0x208>
				Run_DAC_with_Time(stepheight,DAC_Step_Time_2,1);
    168a:	4b45      	ldr	r3, [pc, #276]	; (17a0 <main+0x388>)
    168c:	2220      	movs	r2, #32
    168e:	4694      	mov	ip, r2
    1690:	44bc      	add	ip, r7
    1692:	4463      	add	r3, ip
    1694:	8818      	ldrh	r0, [r3, #0]
    1696:	3a1f      	subs	r2, #31
    1698:	215b      	movs	r1, #91	; 0x5b
    169a:	4b5a      	ldr	r3, [pc, #360]	; (1804 <main+0x3ec>)
    169c:	4798      	blx	r3
				stepheight = DAC_Start_Offset_2+DAC_Pulse_Amplitude_2+DAC_Step_Height_2;
    169e:	4b3e      	ldr	r3, [pc, #248]	; (1798 <main+0x380>)
    16a0:	2220      	movs	r2, #32
    16a2:	4694      	mov	ip, r2
    16a4:	44bc      	add	ip, r7
    16a6:	4463      	add	r3, ip
    16a8:	8818      	ldrh	r0, [r3, #0]
    16aa:	302c      	adds	r0, #44	; 0x2c
    16ac:	b280      	uxth	r0, r0
    16ae:	4b3c      	ldr	r3, [pc, #240]	; (17a0 <main+0x388>)
    16b0:	4694      	mov	ip, r2
    16b2:	44bc      	add	ip, r7
    16b4:	4463      	add	r3, ip
    16b6:	8018      	strh	r0, [r3, #0]
				Run_DAC_with_Time(stepheight,DAC_Pulse_Width_2,1);
    16b8:	3a1f      	subs	r2, #31
    16ba:	215b      	movs	r1, #91	; 0x5b
    16bc:	4b51      	ldr	r3, [pc, #324]	; (1804 <main+0x3ec>)
    16be:	4798      	blx	r3
				to_buffer= Run_ADC(stepheight, 1);
    16c0:	4b37      	ldr	r3, [pc, #220]	; (17a0 <main+0x388>)
    16c2:	2220      	movs	r2, #32
    16c4:	4694      	mov	ip, r2
    16c6:	44bc      	add	ip, r7
    16c8:	4463      	add	r3, ip
    16ca:	8818      	ldrh	r0, [r3, #0]
    16cc:	2101      	movs	r1, #1
    16ce:	4b4e      	ldr	r3, [pc, #312]	; (1808 <main+0x3f0>)
    16d0:	4798      	blx	r3
				result_2_high[highcount] = to_buffer;
    16d2:	464b      	mov	r3, r9
    16d4:	4642      	mov	r2, r8
    16d6:	5498      	strb	r0, [r3, r2]
				highcount++;
    16d8:	4643      	mov	r3, r8
    16da:	3301      	adds	r3, #1
				result_2_high[highcount] = to_buffer >> 8;
    16dc:	b29b      	uxth	r3, r3
    16de:	0a00      	lsrs	r0, r0, #8
    16e0:	464a      	mov	r2, r9
    16e2:	54d0      	strb	r0, [r2, r3]
				highcount++;
    16e4:	4643      	mov	r3, r8
    16e6:	3302      	adds	r3, #2
    16e8:	b29b      	uxth	r3, r3
    16ea:	4698      	mov	r8, r3
				dac_sync_write(&DAC_0, 1, &stepheight, 1);
    16ec:	2301      	movs	r3, #1
    16ee:	4a2c      	ldr	r2, [pc, #176]	; (17a0 <main+0x388>)
    16f0:	2120      	movs	r1, #32
    16f2:	468c      	mov	ip, r1
    16f4:	44bc      	add	ip, r7
    16f6:	4462      	add	r2, ip
    16f8:	0019      	movs	r1, r3
    16fa:	483e      	ldr	r0, [pc, #248]	; (17f4 <main+0x3dc>)
    16fc:	4c40      	ldr	r4, [pc, #256]	; (1800 <main+0x3e8>)
    16fe:	47a0      	blx	r4
    1700:	e028      	b.n	1754 <main+0x33c>
						stepheight = MAX_DAC_Voltage_Number;
    1702:	4a42      	ldr	r2, [pc, #264]	; (180c <main+0x3f4>)
    1704:	4b26      	ldr	r3, [pc, #152]	; (17a0 <main+0x388>)
    1706:	2120      	movs	r1, #32
    1708:	468c      	mov	ip, r1
    170a:	44bc      	add	ip, r7
    170c:	4463      	add	r3, ip
    170e:	801a      	strh	r2, [r3, #0]
					Run_DAC_with_Time(stepheight,DAC_Pulse_Width_2,1);
    1710:	4b23      	ldr	r3, [pc, #140]	; (17a0 <main+0x388>)
    1712:	2220      	movs	r2, #32
    1714:	18ba      	adds	r2, r7, r2
    1716:	18d4      	adds	r4, r2, r3
    1718:	8820      	ldrh	r0, [r4, #0]
    171a:	2201      	movs	r2, #1
    171c:	215b      	movs	r1, #91	; 0x5b
    171e:	4b39      	ldr	r3, [pc, #228]	; (1804 <main+0x3ec>)
    1720:	4798      	blx	r3
					to_buffer= Run_ADC(stepheight, 1);
    1722:	8820      	ldrh	r0, [r4, #0]
    1724:	2101      	movs	r1, #1
    1726:	4b38      	ldr	r3, [pc, #224]	; (1808 <main+0x3f0>)
    1728:	4798      	blx	r3
					result_2_high[highcount] = to_buffer;
    172a:	464b      	mov	r3, r9
    172c:	4642      	mov	r2, r8
    172e:	5498      	strb	r0, [r3, r2]
					highcount++;
    1730:	4643      	mov	r3, r8
    1732:	3301      	adds	r3, #1
					result_2_high[highcount] = to_buffer >> 8;
    1734:	b29b      	uxth	r3, r3
    1736:	0a00      	lsrs	r0, r0, #8
    1738:	464a      	mov	r2, r9
    173a:	54d0      	strb	r0, [r2, r3]
					highcount++;
    173c:	4643      	mov	r3, r8
    173e:	3302      	adds	r3, #2
    1740:	b29b      	uxth	r3, r3
    1742:	4698      	mov	r8, r3
					dac_sync_write(&DAC_0, 1, &stepheight, 1);
    1744:	2301      	movs	r3, #1
    1746:	0022      	movs	r2, r4
    1748:	2101      	movs	r1, #1
    174a:	482a      	ldr	r0, [pc, #168]	; (17f4 <main+0x3dc>)
    174c:	4c2c      	ldr	r4, [pc, #176]	; (1800 <main+0x3e8>)
    174e:	47a0      	blx	r4
					high_or_low = 0;
    1750:	2300      	movs	r3, #0
    1752:	61bb      	str	r3, [r7, #24]
		for(uint16_t i = 0; i < total_steps; i++) {
    1754:	3501      	adds	r5, #1
    1756:	b2ad      	uxth	r5, r5
    1758:	45ab      	cmp	fp, r5
    175a:	d100      	bne.n	175e <main+0x346>
    175c:	e07c      	b.n	1858 <main+0x440>
			if(i ==0)
    175e:	2d00      	cmp	r5, #0
    1760:	d093      	beq.n	168a <main+0x272>
				if(high_or_low){
    1762:	69bb      	ldr	r3, [r7, #24]
    1764:	2b00      	cmp	r3, #0
    1766:	d053      	beq.n	1810 <main+0x3f8>
					stepheight += DAC_Step_Height_2 + DAC_Pulse_Amplitude_2;
    1768:	4b0d      	ldr	r3, [pc, #52]	; (17a0 <main+0x388>)
    176a:	2220      	movs	r2, #32
    176c:	4694      	mov	ip, r2
    176e:	44bc      	add	ip, r7
    1770:	4463      	add	r3, ip
    1772:	881b      	ldrh	r3, [r3, #0]
    1774:	332c      	adds	r3, #44	; 0x2c
    1776:	b29b      	uxth	r3, r3
					if(stepheight > MAX_DAC_Voltage_Number)
    1778:	4a24      	ldr	r2, [pc, #144]	; (180c <main+0x3f4>)
    177a:	4293      	cmp	r3, r2
    177c:	d8c1      	bhi.n	1702 <main+0x2ea>
					stepheight += DAC_Step_Height_2 + DAC_Pulse_Amplitude_2;
    177e:	4a08      	ldr	r2, [pc, #32]	; (17a0 <main+0x388>)
    1780:	2120      	movs	r1, #32
    1782:	468c      	mov	ip, r1
    1784:	44bc      	add	ip, r7
    1786:	4462      	add	r2, ip
    1788:	8013      	strh	r3, [r2, #0]
    178a:	e7c1      	b.n	1710 <main+0x2f8>
    178c:	fffff78c 	.word	0xfffff78c
    1790:	00000115 	.word	0x00000115
    1794:	0000084e 	.word	0x0000084e
    1798:	0000084c 	.word	0x0000084c
    179c:	000005e6 	.word	0x000005e6
    17a0:	0000084a 	.word	0x0000084a
    17a4:	000007bd 	.word	0x000007bd
    17a8:	40002800 	.word	0x40002800
    17ac:	40000800 	.word	0x40000800
    17b0:	20000044 	.word	0x20000044
    17b4:	00000a85 	.word	0x00000a85
    17b8:	00000844 	.word	0x00000844
    17bc:	00000ab1 	.word	0x00000ab1
    17c0:	00000a5d 	.word	0x00000a5d
    17c4:	0000079d 	.word	0x0000079d
    17c8:	00000811 	.word	0x00000811
    17cc:	000007dd 	.word	0x000007dd
    17d0:	2000005c 	.word	0x2000005c
    17d4:	00000abf 	.word	0x00000abf
    17d8:	00001dd9 	.word	0x00001dd9
    17dc:	00003585 	.word	0x00003585
    17e0:	00003609 	.word	0x00003609
    17e4:	00002005 	.word	0x00002005
    17e8:	20000000 	.word	0x20000000
    17ec:	43000c00 	.word	0x43000c00
    17f0:	00000501 	.word	0x00000501
    17f4:	20000030 	.word	0x20000030
    17f8:	00000691 	.word	0x00000691
    17fc:	00000535 	.word	0x00000535
    1800:	00000709 	.word	0x00000709
    1804:	000012d1 	.word	0x000012d1
    1808:	00001351 	.word	0x00001351
    180c:	00000fff 	.word	0x00000fff
					stepheight -= DAC_Pulse_Amplitude_2;
    1810:	4bdd      	ldr	r3, [pc, #884]	; (1b88 <main+0x770>)
    1812:	2220      	movs	r2, #32
    1814:	18ba      	adds	r2, r7, r2
    1816:	18d2      	adds	r2, r2, r3
    1818:	8813      	ldrh	r3, [r2, #0]
    181a:	3b26      	subs	r3, #38	; 0x26
    181c:	8013      	strh	r3, [r2, #0]
					Run_DAC_with_Time(DAC_Start_Offset_2,DAC_Step_Time_2,1);
    181e:	4bdb      	ldr	r3, [pc, #876]	; (1b8c <main+0x774>)
    1820:	2220      	movs	r2, #32
    1822:	18ba      	adds	r2, r7, r2
    1824:	18d4      	adds	r4, r2, r3
    1826:	8820      	ldrh	r0, [r4, #0]
    1828:	2201      	movs	r2, #1
    182a:	215b      	movs	r1, #91	; 0x5b
    182c:	4bd8      	ldr	r3, [pc, #864]	; (1b90 <main+0x778>)
    182e:	4798      	blx	r3
					to_buffer= Run_ADC(DAC_Start_Offset_2, 1);
    1830:	8820      	ldrh	r0, [r4, #0]
    1832:	2101      	movs	r1, #1
    1834:	4bd7      	ldr	r3, [pc, #860]	; (1b94 <main+0x77c>)
    1836:	4798      	blx	r3
					result_2_low[highcount-2] = to_buffer;
    1838:	697b      	ldr	r3, [r7, #20]
    183a:	4443      	add	r3, r8
    183c:	1e9a      	subs	r2, r3, #2
    183e:	7010      	strb	r0, [r2, #0]
					result_2_low[highcount-1] = to_buffer >> 8;
    1840:	3b01      	subs	r3, #1
    1842:	0a00      	lsrs	r0, r0, #8
    1844:	7018      	strb	r0, [r3, #0]
					dac_sync_write(&DAC_0, 1, &DAC_Start_Offset_2, 1);
    1846:	2301      	movs	r3, #1
    1848:	0022      	movs	r2, r4
    184a:	2101      	movs	r1, #1
    184c:	48d2      	ldr	r0, [pc, #840]	; (1b98 <main+0x780>)
    184e:	4cd3      	ldr	r4, [pc, #844]	; (1b9c <main+0x784>)
    1850:	47a0      	blx	r4
					high_or_low = 1;
    1852:	2301      	movs	r3, #1
    1854:	61bb      	str	r3, [r7, #24]
    1856:	e77d      	b.n	1754 <main+0x33c>
    1858:	4644      	mov	r4, r8
    185a:	7b3b      	ldrb	r3, [r7, #12]
    185c:	469b      	mov	fp, r3
		stepheight = 0;
    185e:	4bca      	ldr	r3, [pc, #808]	; (1b88 <main+0x770>)
    1860:	2220      	movs	r2, #32
    1862:	18ba      	adds	r2, r7, r2
    1864:	18d2      	adds	r2, r2, r3
    1866:	2300      	movs	r3, #0
    1868:	8013      	strh	r3, [r2, #0]
		dac_sync_write(&DAC_0, 1, &stepheight, 1);
    186a:	2301      	movs	r3, #1
    186c:	0019      	movs	r1, r3
    186e:	48ca      	ldr	r0, [pc, #808]	; (1b98 <main+0x780>)
    1870:	4dca      	ldr	r5, [pc, #808]	; (1b9c <main+0x784>)
    1872:	47a8      	blx	r5
		adc_sync_disable_channel(&ADC_1, 0);
    1874:	2100      	movs	r1, #0
    1876:	48ca      	ldr	r0, [pc, #808]	; (1ba0 <main+0x788>)
    1878:	4bca      	ldr	r3, [pc, #808]	; (1ba4 <main+0x78c>)
    187a:	4798      	blx	r3
		dac_sync_disable_channel(&DAC_0, 1);
    187c:	2101      	movs	r1, #1
    187e:	48c6      	ldr	r0, [pc, #792]	; (1b98 <main+0x780>)
    1880:	4bc9      	ldr	r3, [pc, #804]	; (1ba8 <main+0x790>)
    1882:	4798      	blx	r3
		data_out[0] = 0xAA;
    1884:	23aa      	movs	r3, #170	; 0xaa
    1886:	2230      	movs	r2, #48	; 0x30
    1888:	18ba      	adds	r2, r7, r2
    188a:	7013      	strb	r3, [r2, #0]
		data_out[1] = 0xAA;
    188c:	2231      	movs	r2, #49	; 0x31
    188e:	18ba      	adds	r2, r7, r2
    1890:	7013      	strb	r3, [r2, #0]
		for(int i = 0; i < highcount; i+=2) {
    1892:	2c00      	cmp	r4, #0
    1894:	dd1c      	ble.n	18d0 <main+0x4b8>
    1896:	4648      	mov	r0, r9
    1898:	6979      	ldr	r1, [r7, #20]
    189a:	3c01      	subs	r4, #1
    189c:	0864      	lsrs	r4, r4, #1
    189e:	00a4      	lsls	r4, r4, #2
    18a0:	1da3      	adds	r3, r4, #6
    18a2:	469c      	mov	ip, r3
    18a4:	2302      	movs	r3, #2
			data_out[j] = result_2_high[i];
    18a6:	2210      	movs	r2, #16
    18a8:	2420      	movs	r4, #32
    18aa:	46a0      	mov	r8, r4
    18ac:	44b8      	add	r8, r7
    18ae:	4442      	add	r2, r8
    18b0:	7804      	ldrb	r4, [r0, #0]
    18b2:	54d4      	strb	r4, [r2, r3]
    18b4:	1c5c      	adds	r4, r3, #1
			data_out[j+1] = result_2_high[i+1];
    18b6:	7845      	ldrb	r5, [r0, #1]
    18b8:	5515      	strb	r5, [r2, r4]
    18ba:	1c9c      	adds	r4, r3, #2
			data_out[j] = result_2_low[i];
    18bc:	780d      	ldrb	r5, [r1, #0]
    18be:	5515      	strb	r5, [r2, r4]
    18c0:	1cdc      	adds	r4, r3, #3
			data_out[j+1] = result_2_low[i+1];
    18c2:	784d      	ldrb	r5, [r1, #1]
    18c4:	5515      	strb	r5, [r2, r4]
			j += 2;
    18c6:	3304      	adds	r3, #4
    18c8:	3002      	adds	r0, #2
    18ca:	3102      	adds	r1, #2
		for(int i = 0; i < highcount; i+=2) {
    18cc:	4563      	cmp	r3, ip
    18ce:	d1ef      	bne.n	18b0 <main+0x498>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    18d0:	25c0      	movs	r5, #192	; 0xc0
    18d2:	05ed      	lsls	r5, r5, #23
    18d4:	2380      	movs	r3, #128	; 0x80
    18d6:	011b      	lsls	r3, r3, #4
    18d8:	4698      	mov	r8, r3
    18da:	61ab      	str	r3, [r5, #24]
		delay_us(1);
    18dc:	2001      	movs	r0, #1
    18de:	4cb3      	ldr	r4, [pc, #716]	; (1bac <main+0x794>)
    18e0:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    18e2:	4643      	mov	r3, r8
    18e4:	616b      	str	r3, [r5, #20]
		delay_us(1);
    18e6:	2001      	movs	r0, #1
    18e8:	47a0      	blx	r4
    18ea:	693b      	ldr	r3, [r7, #16]
    18ec:	469d      	mov	sp, r3
    18ee:	e634      	b.n	155a <main+0x142>
		} else if (sensor_run == 1) {
    18f0:	466b      	mov	r3, sp
    18f2:	607b      	str	r3, [r7, #4]
		step_number = ((DAC_End_Value_1 - DAC_Start_Offset_1)/ DAC_Step_Height_1);
    18f4:	4bae      	ldr	r3, [pc, #696]	; (1bb0 <main+0x798>)
    18f6:	2220      	movs	r2, #32
    18f8:	4694      	mov	ip, r2
    18fa:	44bc      	add	ip, r7
    18fc:	4463      	add	r3, ip
    18fe:	881c      	ldrh	r4, [r3, #0]
    1900:	48ac      	ldr	r0, [pc, #688]	; (1bb4 <main+0x79c>)
    1902:	1b00      	subs	r0, r0, r4
    1904:	2106      	movs	r1, #6
    1906:	4bac      	ldr	r3, [pc, #688]	; (1bb8 <main+0x7a0>)
    1908:	4798      	blx	r3
    190a:	6138      	str	r0, [r7, #16]
    190c:	b2c3      	uxtb	r3, r0
    190e:	001d      	movs	r5, r3
    1910:	4baa      	ldr	r3, [pc, #680]	; (1bbc <main+0x7a4>)
    1912:	4698      	mov	r8, r3
    1914:	4798      	blx	r3
    1916:	61b8      	str	r0, [r7, #24]
    1918:	61f9      	str	r1, [r7, #28]
		if(total_steps < step_number){
    191a:	617d      	str	r5, [r7, #20]
    191c:	0028      	movs	r0, r5
    191e:	47c0      	blx	r8
    1920:	0002      	movs	r2, r0
    1922:	000b      	movs	r3, r1
    1924:	69b8      	ldr	r0, [r7, #24]
    1926:	69f9      	ldr	r1, [r7, #28]
    1928:	4da5      	ldr	r5, [pc, #660]	; (1bc0 <main+0x7a8>)
    192a:	47a8      	blx	r5
    192c:	2800      	cmp	r0, #0
    192e:	d03b      	beq.n	19a8 <main+0x590>
			total_steps = 2*(total_steps+1);
    1930:	697b      	ldr	r3, [r7, #20]
    1932:	005d      	lsls	r5, r3, #1
    1934:	1cab      	adds	r3, r5, #2
    1936:	617b      	str	r3, [r7, #20]
		uint8_t result_1_high[total_steps];
    1938:	697b      	ldr	r3, [r7, #20]
    193a:	3307      	adds	r3, #7
    193c:	08db      	lsrs	r3, r3, #3
    193e:	00db      	lsls	r3, r3, #3
    1940:	466a      	mov	r2, sp
    1942:	1ad2      	subs	r2, r2, r3
    1944:	4695      	mov	sp, r2
    1946:	60ba      	str	r2, [r7, #8]
		uint8_t result_1_low[total_steps];
    1948:	4669      	mov	r1, sp
    194a:	1ac9      	subs	r1, r1, r3
    194c:	468d      	mov	sp, r1
    194e:	6139      	str	r1, [r7, #16]
		stepheight = DAC_Start_Offset_1; //value that drives the DAC, will initialize the DAC high
    1950:	498d      	ldr	r1, [pc, #564]	; (1b88 <main+0x770>)
    1952:	2320      	movs	r3, #32
    1954:	18fb      	adds	r3, r7, r3
    1956:	185d      	adds	r5, r3, r1
    1958:	802c      	strh	r4, [r5, #0]
		adc_sync_init(&ADC_0, ADC, (void *)NULL); //start the ADC, initializing the 0 values
    195a:	4c9a      	ldr	r4, [pc, #616]	; (1bc4 <main+0x7ac>)
    195c:	2200      	movs	r2, #0
    195e:	499a      	ldr	r1, [pc, #616]	; (1bc8 <main+0x7b0>)
    1960:	0020      	movs	r0, r4
    1962:	4b9a      	ldr	r3, [pc, #616]	; (1bcc <main+0x7b4>)
    1964:	4798      	blx	r3
		dac_sync_enable_channel(&DAC_0, 0); //enable channel 0 of the DAC
    1966:	2100      	movs	r1, #0
    1968:	488b      	ldr	r0, [pc, #556]	; (1b98 <main+0x780>)
    196a:	4b99      	ldr	r3, [pc, #612]	; (1bd0 <main+0x7b8>)
    196c:	4798      	blx	r3
		adc_sync_enable_channel(&ADC_0, 0); //enable the 0 channel of the ADC
    196e:	2100      	movs	r1, #0
    1970:	0020      	movs	r0, r4
    1972:	4b98      	ldr	r3, [pc, #608]	; (1bd4 <main+0x7bc>)
    1974:	4798      	blx	r3
		dac_sync_write(&DAC_0, 0, &stepheight, 1); //write the first value, which will be a high offset
    1976:	2301      	movs	r3, #1
    1978:	002a      	movs	r2, r5
    197a:	2100      	movs	r1, #0
    197c:	4886      	ldr	r0, [pc, #536]	; (1b98 <main+0x780>)
    197e:	4c87      	ldr	r4, [pc, #540]	; (1b9c <main+0x784>)
    1980:	47a0      	blx	r4
		for(uint16_t i = 0; i < total_steps; i++) {
    1982:	697b      	ldr	r3, [r7, #20]
    1984:	2b00      	cmp	r3, #0
    1986:	d100      	bne.n	198a <main+0x572>
    1988:	e16b      	b.n	1c62 <main+0x84a>
    198a:	2300      	movs	r3, #0
    198c:	4698      	mov	r8, r3
					stepheight -= DAC_Pulse_Amplitude_1;
    198e:	497e      	ldr	r1, [pc, #504]	; (1b88 <main+0x770>)
    1990:	2220      	movs	r2, #32
    1992:	18ba      	adds	r2, r7, r2
    1994:	1854      	adds	r4, r2, r1
					Run_DAC_with_Time(DAC_Start_Offset_1, DAC_Step_Time_1,0);
    1996:	4649      	mov	r1, r9
    1998:	60f9      	str	r1, [r7, #12]
    199a:	4699      	mov	r9, r3
    199c:	61bb      	str	r3, [r7, #24]
    199e:	465b      	mov	r3, fp
    19a0:	70fb      	strb	r3, [r7, #3]
    19a2:	68ba      	ldr	r2, [r7, #8]
    19a4:	4693      	mov	fp, r2
    19a6:	e054      	b.n	1a52 <main+0x63a>
		total_steps = (uint8_t)step_number;
    19a8:	7c3d      	ldrb	r5, [r7, #16]
			total_steps = 2*total_steps;
    19aa:	006b      	lsls	r3, r5, #1
    19ac:	617b      	str	r3, [r7, #20]
    19ae:	e7c3      	b.n	1938 <main+0x520>
				Run_DAC_with_Time(stepheight,DAC_Step_Time_1,0);
    19b0:	8820      	ldrh	r0, [r4, #0]
    19b2:	2200      	movs	r2, #0
    19b4:	2162      	movs	r1, #98	; 0x62
    19b6:	4b76      	ldr	r3, [pc, #472]	; (1b90 <main+0x778>)
    19b8:	4798      	blx	r3
				stepheight = DAC_Start_Offset_1+DAC_Pulse_Amplitude_1+DAC_Step_Height_1;
    19ba:	4b7d      	ldr	r3, [pc, #500]	; (1bb0 <main+0x798>)
    19bc:	2220      	movs	r2, #32
    19be:	4694      	mov	ip, r2
    19c0:	44bc      	add	ip, r7
    19c2:	4463      	add	r3, ip
    19c4:	8818      	ldrh	r0, [r3, #0]
    19c6:	302c      	adds	r0, #44	; 0x2c
    19c8:	b280      	uxth	r0, r0
    19ca:	8020      	strh	r0, [r4, #0]
				Run_DAC_with_Time(stepheight,DAC_Pulse_Width_1,0);
    19cc:	2200      	movs	r2, #0
    19ce:	2162      	movs	r1, #98	; 0x62
    19d0:	4b6f      	ldr	r3, [pc, #444]	; (1b90 <main+0x778>)
    19d2:	4798      	blx	r3
				to_buffer= Run_ADC(stepheight, 0);
    19d4:	8820      	ldrh	r0, [r4, #0]
    19d6:	2100      	movs	r1, #0
    19d8:	4b6e      	ldr	r3, [pc, #440]	; (1b94 <main+0x77c>)
    19da:	4798      	blx	r3
				result_1_high[highcount] = to_buffer;
    19dc:	465b      	mov	r3, fp
    19de:	464a      	mov	r2, r9
    19e0:	5498      	strb	r0, [r3, r2]
				highcount++;
    19e2:	464b      	mov	r3, r9
    19e4:	3301      	adds	r3, #1
				result_1_high[highcount] = to_buffer >> 8;
    19e6:	b29b      	uxth	r3, r3
    19e8:	0a00      	lsrs	r0, r0, #8
    19ea:	465a      	mov	r2, fp
    19ec:	54d0      	strb	r0, [r2, r3]
				highcount++;
    19ee:	464b      	mov	r3, r9
    19f0:	3302      	adds	r3, #2
    19f2:	b29b      	uxth	r3, r3
    19f4:	4699      	mov	r9, r3
				dac_sync_write(&DAC_0, 0, &stepheight, 1);
    19f6:	2301      	movs	r3, #1
    19f8:	0022      	movs	r2, r4
    19fa:	2100      	movs	r1, #0
    19fc:	4866      	ldr	r0, [pc, #408]	; (1b98 <main+0x780>)
    19fe:	4d67      	ldr	r5, [pc, #412]	; (1b9c <main+0x784>)
    1a00:	47a8      	blx	r5
    1a02:	e01f      	b.n	1a44 <main+0x62c>
						stepheight = MAX_DAC_Voltage_Number;
    1a04:	4b74      	ldr	r3, [pc, #464]	; (1bd8 <main+0x7c0>)
    1a06:	8023      	strh	r3, [r4, #0]
					Run_DAC_with_Time(stepheight,DAC_Pulse_Width_1,0);
    1a08:	8820      	ldrh	r0, [r4, #0]
    1a0a:	2200      	movs	r2, #0
    1a0c:	2162      	movs	r1, #98	; 0x62
    1a0e:	4b60      	ldr	r3, [pc, #384]	; (1b90 <main+0x778>)
    1a10:	4798      	blx	r3
					to_buffer= Run_ADC(stepheight, 0);
    1a12:	8820      	ldrh	r0, [r4, #0]
    1a14:	2100      	movs	r1, #0
    1a16:	4b5f      	ldr	r3, [pc, #380]	; (1b94 <main+0x77c>)
    1a18:	4798      	blx	r3
					result_1_high[highcount] = to_buffer;
    1a1a:	465b      	mov	r3, fp
    1a1c:	464a      	mov	r2, r9
    1a1e:	5498      	strb	r0, [r3, r2]
					highcount++;
    1a20:	464b      	mov	r3, r9
    1a22:	3301      	adds	r3, #1
					result_1_high[highcount] = to_buffer >> 8;
    1a24:	b29b      	uxth	r3, r3
    1a26:	0a00      	lsrs	r0, r0, #8
    1a28:	465a      	mov	r2, fp
    1a2a:	54d0      	strb	r0, [r2, r3]
					highcount++;
    1a2c:	464b      	mov	r3, r9
    1a2e:	3302      	adds	r3, #2
    1a30:	b29b      	uxth	r3, r3
    1a32:	4699      	mov	r9, r3
					dac_sync_write(&DAC_0, 0, &stepheight, 1);
    1a34:	2301      	movs	r3, #1
    1a36:	0022      	movs	r2, r4
    1a38:	2100      	movs	r1, #0
    1a3a:	4857      	ldr	r0, [pc, #348]	; (1b98 <main+0x780>)
    1a3c:	4d57      	ldr	r5, [pc, #348]	; (1b9c <main+0x784>)
    1a3e:	47a8      	blx	r5
					high_or_low = 0;
    1a40:	2300      	movs	r3, #0
    1a42:	61bb      	str	r3, [r7, #24]
		for(uint16_t i = 0; i < total_steps; i++) {
    1a44:	4643      	mov	r3, r8
    1a46:	3301      	adds	r3, #1
    1a48:	b29b      	uxth	r3, r3
    1a4a:	4698      	mov	r8, r3
    1a4c:	697b      	ldr	r3, [r7, #20]
    1a4e:	4543      	cmp	r3, r8
    1a50:	d037      	beq.n	1ac2 <main+0x6aa>
			if(i ==0)
    1a52:	4643      	mov	r3, r8
    1a54:	2b00      	cmp	r3, #0
    1a56:	d0ab      	beq.n	19b0 <main+0x598>
				if(high_or_low){
    1a58:	69bb      	ldr	r3, [r7, #24]
    1a5a:	2b00      	cmp	r3, #0
    1a5c:	d007      	beq.n	1a6e <main+0x656>
					stepheight += DAC_Step_Height_1 + DAC_Pulse_Amplitude_1;
    1a5e:	8823      	ldrh	r3, [r4, #0]
    1a60:	332c      	adds	r3, #44	; 0x2c
    1a62:	b29b      	uxth	r3, r3
					if(stepheight > MAX_DAC_Voltage_Number)
    1a64:	4a5c      	ldr	r2, [pc, #368]	; (1bd8 <main+0x7c0>)
    1a66:	4293      	cmp	r3, r2
    1a68:	d8cc      	bhi.n	1a04 <main+0x5ec>
					stepheight += DAC_Step_Height_1 + DAC_Pulse_Amplitude_1;
    1a6a:	8023      	strh	r3, [r4, #0]
    1a6c:	e7cc      	b.n	1a08 <main+0x5f0>
					stepheight -= DAC_Pulse_Amplitude_1;
    1a6e:	8823      	ldrh	r3, [r4, #0]
    1a70:	3b26      	subs	r3, #38	; 0x26
    1a72:	8023      	strh	r3, [r4, #0]
					Run_DAC_with_Time(DAC_Start_Offset_1, DAC_Step_Time_1,0);
    1a74:	4b4e      	ldr	r3, [pc, #312]	; (1bb0 <main+0x798>)
    1a76:	2220      	movs	r2, #32
    1a78:	4694      	mov	ip, r2
    1a7a:	44bc      	add	ip, r7
    1a7c:	4463      	add	r3, ip
    1a7e:	8818      	ldrh	r0, [r3, #0]
    1a80:	2200      	movs	r2, #0
    1a82:	2162      	movs	r1, #98	; 0x62
    1a84:	4b42      	ldr	r3, [pc, #264]	; (1b90 <main+0x778>)
    1a86:	4798      	blx	r3
					to_buffer= Run_ADC(DAC_Start_Offset_1, 0);
    1a88:	4b49      	ldr	r3, [pc, #292]	; (1bb0 <main+0x798>)
    1a8a:	2220      	movs	r2, #32
    1a8c:	4694      	mov	ip, r2
    1a8e:	44bc      	add	ip, r7
    1a90:	4463      	add	r3, ip
    1a92:	8818      	ldrh	r0, [r3, #0]
    1a94:	2100      	movs	r1, #0
    1a96:	4b3f      	ldr	r3, [pc, #252]	; (1b94 <main+0x77c>)
    1a98:	4798      	blx	r3
					result_1_low[highcount-2] = to_buffer;
    1a9a:	693b      	ldr	r3, [r7, #16]
    1a9c:	444b      	add	r3, r9
    1a9e:	1e9a      	subs	r2, r3, #2
    1aa0:	7010      	strb	r0, [r2, #0]
					result_1_low[highcount-1] = to_buffer >> 8;
    1aa2:	3b01      	subs	r3, #1
    1aa4:	0a00      	lsrs	r0, r0, #8
    1aa6:	7018      	strb	r0, [r3, #0]
					dac_sync_write(&DAC_0, 0, &DAC_Start_Offset_1, 1);
    1aa8:	2301      	movs	r3, #1
    1aaa:	4a41      	ldr	r2, [pc, #260]	; (1bb0 <main+0x798>)
    1aac:	2120      	movs	r1, #32
    1aae:	468c      	mov	ip, r1
    1ab0:	44bc      	add	ip, r7
    1ab2:	4462      	add	r2, ip
    1ab4:	2100      	movs	r1, #0
    1ab6:	4838      	ldr	r0, [pc, #224]	; (1b98 <main+0x780>)
    1ab8:	4d38      	ldr	r5, [pc, #224]	; (1b9c <main+0x784>)
    1aba:	47a8      	blx	r5
					high_or_low = 1;
    1abc:	68fb      	ldr	r3, [r7, #12]
    1abe:	61bb      	str	r3, [r7, #24]
    1ac0:	e7c0      	b.n	1a44 <main+0x62c>
    1ac2:	464d      	mov	r5, r9
    1ac4:	78fb      	ldrb	r3, [r7, #3]
    1ac6:	469b      	mov	fp, r3
		stepheight = 0;
    1ac8:	4b2f      	ldr	r3, [pc, #188]	; (1b88 <main+0x770>)
    1aca:	2220      	movs	r2, #32
    1acc:	18ba      	adds	r2, r7, r2
    1ace:	18d2      	adds	r2, r2, r3
    1ad0:	2300      	movs	r3, #0
    1ad2:	8013      	strh	r3, [r2, #0]
		dac_sync_write(&DAC_0, 0, &stepheight, 1);
    1ad4:	2301      	movs	r3, #1
    1ad6:	2100      	movs	r1, #0
    1ad8:	482f      	ldr	r0, [pc, #188]	; (1b98 <main+0x780>)
    1ada:	4c30      	ldr	r4, [pc, #192]	; (1b9c <main+0x784>)
    1adc:	47a0      	blx	r4
		adc_sync_disable_channel(&ADC_0, 0);
    1ade:	2100      	movs	r1, #0
    1ae0:	4838      	ldr	r0, [pc, #224]	; (1bc4 <main+0x7ac>)
    1ae2:	4b30      	ldr	r3, [pc, #192]	; (1ba4 <main+0x78c>)
    1ae4:	4798      	blx	r3
		dac_sync_disable_channel(&DAC_0, 0);
    1ae6:	2100      	movs	r1, #0
    1ae8:	482b      	ldr	r0, [pc, #172]	; (1b98 <main+0x780>)
    1aea:	4b2f      	ldr	r3, [pc, #188]	; (1ba8 <main+0x790>)
    1aec:	4798      	blx	r3
		data_out[0] = 0xAA;
    1aee:	23aa      	movs	r3, #170	; 0xaa
    1af0:	2230      	movs	r2, #48	; 0x30
    1af2:	18ba      	adds	r2, r7, r2
    1af4:	7013      	strb	r3, [r2, #0]
		data_out[1] = 0xAA;
    1af6:	2231      	movs	r2, #49	; 0x31
    1af8:	18ba      	adds	r2, r7, r2
    1afa:	7013      	strb	r3, [r2, #0]
		for(int i = 0; i < highcount; i+=2) {
    1afc:	2d00      	cmp	r5, #0
    1afe:	dd1c      	ble.n	1b3a <main+0x722>
    1b00:	68b8      	ldr	r0, [r7, #8]
    1b02:	6939      	ldr	r1, [r7, #16]
    1b04:	1e6b      	subs	r3, r5, #1
    1b06:	085b      	lsrs	r3, r3, #1
    1b08:	009b      	lsls	r3, r3, #2
    1b0a:	3306      	adds	r3, #6
    1b0c:	469c      	mov	ip, r3
    1b0e:	2302      	movs	r3, #2
			data_out[j] = result_1_high[i];
    1b10:	2210      	movs	r2, #16
    1b12:	2420      	movs	r4, #32
    1b14:	46a0      	mov	r8, r4
    1b16:	44b8      	add	r8, r7
    1b18:	4442      	add	r2, r8
    1b1a:	7804      	ldrb	r4, [r0, #0]
    1b1c:	54d4      	strb	r4, [r2, r3]
    1b1e:	1c5c      	adds	r4, r3, #1
			data_out[j+1] = result_1_high[i+1];
    1b20:	7845      	ldrb	r5, [r0, #1]
    1b22:	5515      	strb	r5, [r2, r4]
    1b24:	1c9c      	adds	r4, r3, #2
			data_out[j] = result_1_low[i];
    1b26:	780d      	ldrb	r5, [r1, #0]
    1b28:	5515      	strb	r5, [r2, r4]
    1b2a:	1cdc      	adds	r4, r3, #3
			data_out[j+1] = result_1_low[i+1];
    1b2c:	784d      	ldrb	r5, [r1, #1]
    1b2e:	5515      	strb	r5, [r2, r4]
			j += 2;
    1b30:	3304      	adds	r3, #4
    1b32:	3002      	adds	r0, #2
    1b34:	3102      	adds	r1, #2
		for(int i = 0; i < highcount; i+=2) {
    1b36:	4563      	cmp	r3, ip
    1b38:	d1ef      	bne.n	1b1a <main+0x702>
    1b3a:	687b      	ldr	r3, [r7, #4]
    1b3c:	469d      	mov	sp, r3
    1b3e:	e50c      	b.n	155a <main+0x142>
		if((data_in[0] == START_DATA) && (data_in[1] != 0x00)) {
    1b40:	7873      	ldrb	r3, [r6, #1]
    1b42:	2b00      	cmp	r3, #0
    1b44:	d100      	bne.n	1b48 <main+0x730>
    1b46:	e539      	b.n	15bc <main+0x1a4>
			int sz_data = data_in[1]*10 - 2;
    1b48:	7875      	ldrb	r5, [r6, #1]
    1b4a:	230a      	movs	r3, #10
    1b4c:	435d      	muls	r5, r3
			for(int i = 0; i < sz_data + 2; i++) {
    1b4e:	2d00      	cmp	r5, #0
    1b50:	dc00      	bgt.n	1b54 <main+0x73c>
    1b52:	e4c3      	b.n	14dc <main+0xc4>
    1b54:	2400      	movs	r4, #0
				io_write(io, &data_out[i], 1);
    1b56:	4b21      	ldr	r3, [pc, #132]	; (1bdc <main+0x7c4>)
    1b58:	4699      	mov	r9, r3
				delay_us(5);
    1b5a:	4b14      	ldr	r3, [pc, #80]	; (1bac <main+0x794>)
    1b5c:	4698      	mov	r8, r3
				io_write(io, &data_out[i], 1);
    1b5e:	2310      	movs	r3, #16
    1b60:	2220      	movs	r2, #32
    1b62:	4694      	mov	ip, r2
    1b64:	44bc      	add	ip, r7
    1b66:	4463      	add	r3, ip
    1b68:	1919      	adds	r1, r3, r4
    1b6a:	3a1f      	subs	r2, #31
    1b6c:	4b1c      	ldr	r3, [pc, #112]	; (1be0 <main+0x7c8>)
    1b6e:	2020      	movs	r0, #32
    1b70:	4684      	mov	ip, r0
    1b72:	44bc      	add	ip, r7
    1b74:	4463      	add	r3, ip
    1b76:	6818      	ldr	r0, [r3, #0]
    1b78:	47c8      	blx	r9
				delay_us(5);
    1b7a:	2005      	movs	r0, #5
    1b7c:	47c0      	blx	r8
			for(int i = 0; i < sz_data + 2; i++) {
    1b7e:	3401      	adds	r4, #1
    1b80:	42a5      	cmp	r5, r4
    1b82:	d1ec      	bne.n	1b5e <main+0x746>
    1b84:	e4aa      	b.n	14dc <main+0xc4>
    1b86:	46c0      	nop			; (mov r8, r8)
    1b88:	0000084a 	.word	0x0000084a
    1b8c:	0000084c 	.word	0x0000084c
    1b90:	000012d1 	.word	0x000012d1
    1b94:	00001351 	.word	0x00001351
    1b98:	20000030 	.word	0x20000030
    1b9c:	00000709 	.word	0x00000709
    1ba0:	20000000 	.word	0x20000000
    1ba4:	00000561 	.word	0x00000561
    1ba8:	000006cd 	.word	0x000006cd
    1bac:	0000079d 	.word	0x0000079d
    1bb0:	0000084e 	.word	0x0000084e
    1bb4:	00000abf 	.word	0x00000abf
    1bb8:	00001dd9 	.word	0x00001dd9
    1bbc:	00003585 	.word	0x00003585
    1bc0:	00002005 	.word	0x00002005
    1bc4:	20000024 	.word	0x20000024
    1bc8:	43000c00 	.word	0x43000c00
    1bcc:	00000501 	.word	0x00000501
    1bd0:	00000691 	.word	0x00000691
    1bd4:	00000535 	.word	0x00000535
    1bd8:	00000fff 	.word	0x00000fff
    1bdc:	000007dd 	.word	0x000007dd
    1be0:	00000844 	.word	0x00000844
			} else if ((data_in[1] == START_DATA) && (data_in[0] != 0x00)) {
    1be4:	7833      	ldrb	r3, [r6, #0]
    1be6:	2b00      	cmp	r3, #0
    1be8:	d100      	bne.n	1bec <main+0x7d4>
    1bea:	e4eb      	b.n	15c4 <main+0x1ac>
			int sz_data = data_in[0]*10 - 2;
    1bec:	7835      	ldrb	r5, [r6, #0]
    1bee:	230a      	movs	r3, #10
    1bf0:	435d      	muls	r5, r3
			for(int i = 0; i < sz_data + 2; i++) {
    1bf2:	2d00      	cmp	r5, #0
    1bf4:	dc00      	bgt.n	1bf8 <main+0x7e0>
    1bf6:	e471      	b.n	14dc <main+0xc4>
    1bf8:	2400      	movs	r4, #0
				io_write(io, &data_out[i], 1);
    1bfa:	4b28      	ldr	r3, [pc, #160]	; (1c9c <main+0x884>)
    1bfc:	4699      	mov	r9, r3
				delay_us(5);
    1bfe:	4b28      	ldr	r3, [pc, #160]	; (1ca0 <main+0x888>)
    1c00:	4698      	mov	r8, r3
				io_write(io, &data_out[i], 1);
    1c02:	2310      	movs	r3, #16
    1c04:	2220      	movs	r2, #32
    1c06:	4694      	mov	ip, r2
    1c08:	44bc      	add	ip, r7
    1c0a:	4463      	add	r3, ip
    1c0c:	1919      	adds	r1, r3, r4
    1c0e:	3a1f      	subs	r2, #31
    1c10:	4b24      	ldr	r3, [pc, #144]	; (1ca4 <main+0x88c>)
    1c12:	2020      	movs	r0, #32
    1c14:	4684      	mov	ip, r0
    1c16:	44bc      	add	ip, r7
    1c18:	4463      	add	r3, ip
    1c1a:	6818      	ldr	r0, [r3, #0]
    1c1c:	47c8      	blx	r9
				delay_us(5);
    1c1e:	2005      	movs	r0, #5
    1c20:	47c0      	blx	r8
			for(int i = 0; i < sz_data + 2; i++) {
    1c22:	3401      	adds	r4, #1
    1c24:	42a5      	cmp	r5, r4
    1c26:	d1ec      	bne.n	1c02 <main+0x7ea>
    1c28:	e458      	b.n	14dc <main+0xc4>
		stepheight = 0;
    1c2a:	4b1f      	ldr	r3, [pc, #124]	; (1ca8 <main+0x890>)
    1c2c:	2220      	movs	r2, #32
    1c2e:	18ba      	adds	r2, r7, r2
    1c30:	18d2      	adds	r2, r2, r3
    1c32:	2300      	movs	r3, #0
    1c34:	8013      	strh	r3, [r2, #0]
		dac_sync_write(&DAC_0, 1, &stepheight, 1);
    1c36:	4c1d      	ldr	r4, [pc, #116]	; (1cac <main+0x894>)
    1c38:	2301      	movs	r3, #1
    1c3a:	0019      	movs	r1, r3
    1c3c:	0020      	movs	r0, r4
    1c3e:	4d1c      	ldr	r5, [pc, #112]	; (1cb0 <main+0x898>)
    1c40:	47a8      	blx	r5
		adc_sync_disable_channel(&ADC_1, 0);
    1c42:	2100      	movs	r1, #0
    1c44:	481b      	ldr	r0, [pc, #108]	; (1cb4 <main+0x89c>)
    1c46:	4b1c      	ldr	r3, [pc, #112]	; (1cb8 <main+0x8a0>)
    1c48:	4798      	blx	r3
		dac_sync_disable_channel(&DAC_0, 1);
    1c4a:	2101      	movs	r1, #1
    1c4c:	0020      	movs	r0, r4
    1c4e:	4b1b      	ldr	r3, [pc, #108]	; (1cbc <main+0x8a4>)
    1c50:	4798      	blx	r3
		data_out[0] = 0xAA;
    1c52:	23aa      	movs	r3, #170	; 0xaa
    1c54:	2230      	movs	r2, #48	; 0x30
    1c56:	18ba      	adds	r2, r7, r2
    1c58:	7013      	strb	r3, [r2, #0]
		data_out[1] = 0xAA;
    1c5a:	2231      	movs	r2, #49	; 0x31
    1c5c:	18ba      	adds	r2, r7, r2
    1c5e:	7013      	strb	r3, [r2, #0]
    1c60:	e636      	b.n	18d0 <main+0x4b8>
		stepheight = 0;
    1c62:	4b11      	ldr	r3, [pc, #68]	; (1ca8 <main+0x890>)
    1c64:	2220      	movs	r2, #32
    1c66:	18ba      	adds	r2, r7, r2
    1c68:	18d2      	adds	r2, r2, r3
    1c6a:	2300      	movs	r3, #0
    1c6c:	8013      	strh	r3, [r2, #0]
		dac_sync_write(&DAC_0, 0, &stepheight, 1);
    1c6e:	4c0f      	ldr	r4, [pc, #60]	; (1cac <main+0x894>)
    1c70:	2301      	movs	r3, #1
    1c72:	2100      	movs	r1, #0
    1c74:	0020      	movs	r0, r4
    1c76:	4d0e      	ldr	r5, [pc, #56]	; (1cb0 <main+0x898>)
    1c78:	47a8      	blx	r5
		adc_sync_disable_channel(&ADC_0, 0);
    1c7a:	2100      	movs	r1, #0
    1c7c:	4810      	ldr	r0, [pc, #64]	; (1cc0 <main+0x8a8>)
    1c7e:	4b0e      	ldr	r3, [pc, #56]	; (1cb8 <main+0x8a0>)
    1c80:	4798      	blx	r3
		dac_sync_disable_channel(&DAC_0, 0);
    1c82:	2100      	movs	r1, #0
    1c84:	0020      	movs	r0, r4
    1c86:	4b0d      	ldr	r3, [pc, #52]	; (1cbc <main+0x8a4>)
    1c88:	4798      	blx	r3
		data_out[0] = 0xAA;
    1c8a:	23aa      	movs	r3, #170	; 0xaa
    1c8c:	2230      	movs	r2, #48	; 0x30
    1c8e:	18ba      	adds	r2, r7, r2
    1c90:	7013      	strb	r3, [r2, #0]
		data_out[1] = 0xAA;
    1c92:	2231      	movs	r2, #49	; 0x31
    1c94:	18ba      	adds	r2, r7, r2
    1c96:	7013      	strb	r3, [r2, #0]
    1c98:	e74f      	b.n	1b3a <main+0x722>
    1c9a:	46c0      	nop			; (mov r8, r8)
    1c9c:	000007dd 	.word	0x000007dd
    1ca0:	0000079d 	.word	0x0000079d
    1ca4:	00000844 	.word	0x00000844
    1ca8:	0000084a 	.word	0x0000084a
    1cac:	20000030 	.word	0x20000030
    1cb0:	00000709 	.word	0x00000709
    1cb4:	20000000 	.word	0x20000000
    1cb8:	00000561 	.word	0x00000561
    1cbc:	000006cd 	.word	0x000006cd
    1cc0:	20000024 	.word	0x20000024

00001cc4 <__udivsi3>:
    1cc4:	2200      	movs	r2, #0
    1cc6:	0843      	lsrs	r3, r0, #1
    1cc8:	428b      	cmp	r3, r1
    1cca:	d374      	bcc.n	1db6 <__udivsi3+0xf2>
    1ccc:	0903      	lsrs	r3, r0, #4
    1cce:	428b      	cmp	r3, r1
    1cd0:	d35f      	bcc.n	1d92 <__udivsi3+0xce>
    1cd2:	0a03      	lsrs	r3, r0, #8
    1cd4:	428b      	cmp	r3, r1
    1cd6:	d344      	bcc.n	1d62 <__udivsi3+0x9e>
    1cd8:	0b03      	lsrs	r3, r0, #12
    1cda:	428b      	cmp	r3, r1
    1cdc:	d328      	bcc.n	1d30 <__udivsi3+0x6c>
    1cde:	0c03      	lsrs	r3, r0, #16
    1ce0:	428b      	cmp	r3, r1
    1ce2:	d30d      	bcc.n	1d00 <__udivsi3+0x3c>
    1ce4:	22ff      	movs	r2, #255	; 0xff
    1ce6:	0209      	lsls	r1, r1, #8
    1ce8:	ba12      	rev	r2, r2
    1cea:	0c03      	lsrs	r3, r0, #16
    1cec:	428b      	cmp	r3, r1
    1cee:	d302      	bcc.n	1cf6 <__udivsi3+0x32>
    1cf0:	1212      	asrs	r2, r2, #8
    1cf2:	0209      	lsls	r1, r1, #8
    1cf4:	d065      	beq.n	1dc2 <__udivsi3+0xfe>
    1cf6:	0b03      	lsrs	r3, r0, #12
    1cf8:	428b      	cmp	r3, r1
    1cfa:	d319      	bcc.n	1d30 <__udivsi3+0x6c>
    1cfc:	e000      	b.n	1d00 <__udivsi3+0x3c>
    1cfe:	0a09      	lsrs	r1, r1, #8
    1d00:	0bc3      	lsrs	r3, r0, #15
    1d02:	428b      	cmp	r3, r1
    1d04:	d301      	bcc.n	1d0a <__udivsi3+0x46>
    1d06:	03cb      	lsls	r3, r1, #15
    1d08:	1ac0      	subs	r0, r0, r3
    1d0a:	4152      	adcs	r2, r2
    1d0c:	0b83      	lsrs	r3, r0, #14
    1d0e:	428b      	cmp	r3, r1
    1d10:	d301      	bcc.n	1d16 <__udivsi3+0x52>
    1d12:	038b      	lsls	r3, r1, #14
    1d14:	1ac0      	subs	r0, r0, r3
    1d16:	4152      	adcs	r2, r2
    1d18:	0b43      	lsrs	r3, r0, #13
    1d1a:	428b      	cmp	r3, r1
    1d1c:	d301      	bcc.n	1d22 <__udivsi3+0x5e>
    1d1e:	034b      	lsls	r3, r1, #13
    1d20:	1ac0      	subs	r0, r0, r3
    1d22:	4152      	adcs	r2, r2
    1d24:	0b03      	lsrs	r3, r0, #12
    1d26:	428b      	cmp	r3, r1
    1d28:	d301      	bcc.n	1d2e <__udivsi3+0x6a>
    1d2a:	030b      	lsls	r3, r1, #12
    1d2c:	1ac0      	subs	r0, r0, r3
    1d2e:	4152      	adcs	r2, r2
    1d30:	0ac3      	lsrs	r3, r0, #11
    1d32:	428b      	cmp	r3, r1
    1d34:	d301      	bcc.n	1d3a <__udivsi3+0x76>
    1d36:	02cb      	lsls	r3, r1, #11
    1d38:	1ac0      	subs	r0, r0, r3
    1d3a:	4152      	adcs	r2, r2
    1d3c:	0a83      	lsrs	r3, r0, #10
    1d3e:	428b      	cmp	r3, r1
    1d40:	d301      	bcc.n	1d46 <__udivsi3+0x82>
    1d42:	028b      	lsls	r3, r1, #10
    1d44:	1ac0      	subs	r0, r0, r3
    1d46:	4152      	adcs	r2, r2
    1d48:	0a43      	lsrs	r3, r0, #9
    1d4a:	428b      	cmp	r3, r1
    1d4c:	d301      	bcc.n	1d52 <__udivsi3+0x8e>
    1d4e:	024b      	lsls	r3, r1, #9
    1d50:	1ac0      	subs	r0, r0, r3
    1d52:	4152      	adcs	r2, r2
    1d54:	0a03      	lsrs	r3, r0, #8
    1d56:	428b      	cmp	r3, r1
    1d58:	d301      	bcc.n	1d5e <__udivsi3+0x9a>
    1d5a:	020b      	lsls	r3, r1, #8
    1d5c:	1ac0      	subs	r0, r0, r3
    1d5e:	4152      	adcs	r2, r2
    1d60:	d2cd      	bcs.n	1cfe <__udivsi3+0x3a>
    1d62:	09c3      	lsrs	r3, r0, #7
    1d64:	428b      	cmp	r3, r1
    1d66:	d301      	bcc.n	1d6c <__udivsi3+0xa8>
    1d68:	01cb      	lsls	r3, r1, #7
    1d6a:	1ac0      	subs	r0, r0, r3
    1d6c:	4152      	adcs	r2, r2
    1d6e:	0983      	lsrs	r3, r0, #6
    1d70:	428b      	cmp	r3, r1
    1d72:	d301      	bcc.n	1d78 <__udivsi3+0xb4>
    1d74:	018b      	lsls	r3, r1, #6
    1d76:	1ac0      	subs	r0, r0, r3
    1d78:	4152      	adcs	r2, r2
    1d7a:	0943      	lsrs	r3, r0, #5
    1d7c:	428b      	cmp	r3, r1
    1d7e:	d301      	bcc.n	1d84 <__udivsi3+0xc0>
    1d80:	014b      	lsls	r3, r1, #5
    1d82:	1ac0      	subs	r0, r0, r3
    1d84:	4152      	adcs	r2, r2
    1d86:	0903      	lsrs	r3, r0, #4
    1d88:	428b      	cmp	r3, r1
    1d8a:	d301      	bcc.n	1d90 <__udivsi3+0xcc>
    1d8c:	010b      	lsls	r3, r1, #4
    1d8e:	1ac0      	subs	r0, r0, r3
    1d90:	4152      	adcs	r2, r2
    1d92:	08c3      	lsrs	r3, r0, #3
    1d94:	428b      	cmp	r3, r1
    1d96:	d301      	bcc.n	1d9c <__udivsi3+0xd8>
    1d98:	00cb      	lsls	r3, r1, #3
    1d9a:	1ac0      	subs	r0, r0, r3
    1d9c:	4152      	adcs	r2, r2
    1d9e:	0883      	lsrs	r3, r0, #2
    1da0:	428b      	cmp	r3, r1
    1da2:	d301      	bcc.n	1da8 <__udivsi3+0xe4>
    1da4:	008b      	lsls	r3, r1, #2
    1da6:	1ac0      	subs	r0, r0, r3
    1da8:	4152      	adcs	r2, r2
    1daa:	0843      	lsrs	r3, r0, #1
    1dac:	428b      	cmp	r3, r1
    1dae:	d301      	bcc.n	1db4 <__udivsi3+0xf0>
    1db0:	004b      	lsls	r3, r1, #1
    1db2:	1ac0      	subs	r0, r0, r3
    1db4:	4152      	adcs	r2, r2
    1db6:	1a41      	subs	r1, r0, r1
    1db8:	d200      	bcs.n	1dbc <__udivsi3+0xf8>
    1dba:	4601      	mov	r1, r0
    1dbc:	4152      	adcs	r2, r2
    1dbe:	4610      	mov	r0, r2
    1dc0:	4770      	bx	lr
    1dc2:	e7ff      	b.n	1dc4 <__udivsi3+0x100>
    1dc4:	b501      	push	{r0, lr}
    1dc6:	2000      	movs	r0, #0
    1dc8:	f000 f8f0 	bl	1fac <__aeabi_idiv0>
    1dcc:	bd02      	pop	{r1, pc}
    1dce:	46c0      	nop			; (mov r8, r8)

00001dd0 <__aeabi_uidivmod>:
    1dd0:	2900      	cmp	r1, #0
    1dd2:	d0f7      	beq.n	1dc4 <__udivsi3+0x100>
    1dd4:	e776      	b.n	1cc4 <__udivsi3>
    1dd6:	4770      	bx	lr

00001dd8 <__divsi3>:
    1dd8:	4603      	mov	r3, r0
    1dda:	430b      	orrs	r3, r1
    1ddc:	d47f      	bmi.n	1ede <__divsi3+0x106>
    1dde:	2200      	movs	r2, #0
    1de0:	0843      	lsrs	r3, r0, #1
    1de2:	428b      	cmp	r3, r1
    1de4:	d374      	bcc.n	1ed0 <__divsi3+0xf8>
    1de6:	0903      	lsrs	r3, r0, #4
    1de8:	428b      	cmp	r3, r1
    1dea:	d35f      	bcc.n	1eac <__divsi3+0xd4>
    1dec:	0a03      	lsrs	r3, r0, #8
    1dee:	428b      	cmp	r3, r1
    1df0:	d344      	bcc.n	1e7c <__divsi3+0xa4>
    1df2:	0b03      	lsrs	r3, r0, #12
    1df4:	428b      	cmp	r3, r1
    1df6:	d328      	bcc.n	1e4a <__divsi3+0x72>
    1df8:	0c03      	lsrs	r3, r0, #16
    1dfa:	428b      	cmp	r3, r1
    1dfc:	d30d      	bcc.n	1e1a <__divsi3+0x42>
    1dfe:	22ff      	movs	r2, #255	; 0xff
    1e00:	0209      	lsls	r1, r1, #8
    1e02:	ba12      	rev	r2, r2
    1e04:	0c03      	lsrs	r3, r0, #16
    1e06:	428b      	cmp	r3, r1
    1e08:	d302      	bcc.n	1e10 <__divsi3+0x38>
    1e0a:	1212      	asrs	r2, r2, #8
    1e0c:	0209      	lsls	r1, r1, #8
    1e0e:	d065      	beq.n	1edc <__divsi3+0x104>
    1e10:	0b03      	lsrs	r3, r0, #12
    1e12:	428b      	cmp	r3, r1
    1e14:	d319      	bcc.n	1e4a <__divsi3+0x72>
    1e16:	e000      	b.n	1e1a <__divsi3+0x42>
    1e18:	0a09      	lsrs	r1, r1, #8
    1e1a:	0bc3      	lsrs	r3, r0, #15
    1e1c:	428b      	cmp	r3, r1
    1e1e:	d301      	bcc.n	1e24 <__divsi3+0x4c>
    1e20:	03cb      	lsls	r3, r1, #15
    1e22:	1ac0      	subs	r0, r0, r3
    1e24:	4152      	adcs	r2, r2
    1e26:	0b83      	lsrs	r3, r0, #14
    1e28:	428b      	cmp	r3, r1
    1e2a:	d301      	bcc.n	1e30 <__divsi3+0x58>
    1e2c:	038b      	lsls	r3, r1, #14
    1e2e:	1ac0      	subs	r0, r0, r3
    1e30:	4152      	adcs	r2, r2
    1e32:	0b43      	lsrs	r3, r0, #13
    1e34:	428b      	cmp	r3, r1
    1e36:	d301      	bcc.n	1e3c <__divsi3+0x64>
    1e38:	034b      	lsls	r3, r1, #13
    1e3a:	1ac0      	subs	r0, r0, r3
    1e3c:	4152      	adcs	r2, r2
    1e3e:	0b03      	lsrs	r3, r0, #12
    1e40:	428b      	cmp	r3, r1
    1e42:	d301      	bcc.n	1e48 <__divsi3+0x70>
    1e44:	030b      	lsls	r3, r1, #12
    1e46:	1ac0      	subs	r0, r0, r3
    1e48:	4152      	adcs	r2, r2
    1e4a:	0ac3      	lsrs	r3, r0, #11
    1e4c:	428b      	cmp	r3, r1
    1e4e:	d301      	bcc.n	1e54 <__divsi3+0x7c>
    1e50:	02cb      	lsls	r3, r1, #11
    1e52:	1ac0      	subs	r0, r0, r3
    1e54:	4152      	adcs	r2, r2
    1e56:	0a83      	lsrs	r3, r0, #10
    1e58:	428b      	cmp	r3, r1
    1e5a:	d301      	bcc.n	1e60 <__divsi3+0x88>
    1e5c:	028b      	lsls	r3, r1, #10
    1e5e:	1ac0      	subs	r0, r0, r3
    1e60:	4152      	adcs	r2, r2
    1e62:	0a43      	lsrs	r3, r0, #9
    1e64:	428b      	cmp	r3, r1
    1e66:	d301      	bcc.n	1e6c <__divsi3+0x94>
    1e68:	024b      	lsls	r3, r1, #9
    1e6a:	1ac0      	subs	r0, r0, r3
    1e6c:	4152      	adcs	r2, r2
    1e6e:	0a03      	lsrs	r3, r0, #8
    1e70:	428b      	cmp	r3, r1
    1e72:	d301      	bcc.n	1e78 <__divsi3+0xa0>
    1e74:	020b      	lsls	r3, r1, #8
    1e76:	1ac0      	subs	r0, r0, r3
    1e78:	4152      	adcs	r2, r2
    1e7a:	d2cd      	bcs.n	1e18 <__divsi3+0x40>
    1e7c:	09c3      	lsrs	r3, r0, #7
    1e7e:	428b      	cmp	r3, r1
    1e80:	d301      	bcc.n	1e86 <__divsi3+0xae>
    1e82:	01cb      	lsls	r3, r1, #7
    1e84:	1ac0      	subs	r0, r0, r3
    1e86:	4152      	adcs	r2, r2
    1e88:	0983      	lsrs	r3, r0, #6
    1e8a:	428b      	cmp	r3, r1
    1e8c:	d301      	bcc.n	1e92 <__divsi3+0xba>
    1e8e:	018b      	lsls	r3, r1, #6
    1e90:	1ac0      	subs	r0, r0, r3
    1e92:	4152      	adcs	r2, r2
    1e94:	0943      	lsrs	r3, r0, #5
    1e96:	428b      	cmp	r3, r1
    1e98:	d301      	bcc.n	1e9e <__divsi3+0xc6>
    1e9a:	014b      	lsls	r3, r1, #5
    1e9c:	1ac0      	subs	r0, r0, r3
    1e9e:	4152      	adcs	r2, r2
    1ea0:	0903      	lsrs	r3, r0, #4
    1ea2:	428b      	cmp	r3, r1
    1ea4:	d301      	bcc.n	1eaa <__divsi3+0xd2>
    1ea6:	010b      	lsls	r3, r1, #4
    1ea8:	1ac0      	subs	r0, r0, r3
    1eaa:	4152      	adcs	r2, r2
    1eac:	08c3      	lsrs	r3, r0, #3
    1eae:	428b      	cmp	r3, r1
    1eb0:	d301      	bcc.n	1eb6 <__divsi3+0xde>
    1eb2:	00cb      	lsls	r3, r1, #3
    1eb4:	1ac0      	subs	r0, r0, r3
    1eb6:	4152      	adcs	r2, r2
    1eb8:	0883      	lsrs	r3, r0, #2
    1eba:	428b      	cmp	r3, r1
    1ebc:	d301      	bcc.n	1ec2 <__divsi3+0xea>
    1ebe:	008b      	lsls	r3, r1, #2
    1ec0:	1ac0      	subs	r0, r0, r3
    1ec2:	4152      	adcs	r2, r2
    1ec4:	0843      	lsrs	r3, r0, #1
    1ec6:	428b      	cmp	r3, r1
    1ec8:	d301      	bcc.n	1ece <__divsi3+0xf6>
    1eca:	004b      	lsls	r3, r1, #1
    1ecc:	1ac0      	subs	r0, r0, r3
    1ece:	4152      	adcs	r2, r2
    1ed0:	1a41      	subs	r1, r0, r1
    1ed2:	d200      	bcs.n	1ed6 <__divsi3+0xfe>
    1ed4:	4601      	mov	r1, r0
    1ed6:	4152      	adcs	r2, r2
    1ed8:	4610      	mov	r0, r2
    1eda:	4770      	bx	lr
    1edc:	e05d      	b.n	1f9a <__divsi3+0x1c2>
    1ede:	0fca      	lsrs	r2, r1, #31
    1ee0:	d000      	beq.n	1ee4 <__divsi3+0x10c>
    1ee2:	4249      	negs	r1, r1
    1ee4:	1003      	asrs	r3, r0, #32
    1ee6:	d300      	bcc.n	1eea <__divsi3+0x112>
    1ee8:	4240      	negs	r0, r0
    1eea:	4053      	eors	r3, r2
    1eec:	2200      	movs	r2, #0
    1eee:	469c      	mov	ip, r3
    1ef0:	0903      	lsrs	r3, r0, #4
    1ef2:	428b      	cmp	r3, r1
    1ef4:	d32d      	bcc.n	1f52 <__divsi3+0x17a>
    1ef6:	0a03      	lsrs	r3, r0, #8
    1ef8:	428b      	cmp	r3, r1
    1efa:	d312      	bcc.n	1f22 <__divsi3+0x14a>
    1efc:	22fc      	movs	r2, #252	; 0xfc
    1efe:	0189      	lsls	r1, r1, #6
    1f00:	ba12      	rev	r2, r2
    1f02:	0a03      	lsrs	r3, r0, #8
    1f04:	428b      	cmp	r3, r1
    1f06:	d30c      	bcc.n	1f22 <__divsi3+0x14a>
    1f08:	0189      	lsls	r1, r1, #6
    1f0a:	1192      	asrs	r2, r2, #6
    1f0c:	428b      	cmp	r3, r1
    1f0e:	d308      	bcc.n	1f22 <__divsi3+0x14a>
    1f10:	0189      	lsls	r1, r1, #6
    1f12:	1192      	asrs	r2, r2, #6
    1f14:	428b      	cmp	r3, r1
    1f16:	d304      	bcc.n	1f22 <__divsi3+0x14a>
    1f18:	0189      	lsls	r1, r1, #6
    1f1a:	d03a      	beq.n	1f92 <__divsi3+0x1ba>
    1f1c:	1192      	asrs	r2, r2, #6
    1f1e:	e000      	b.n	1f22 <__divsi3+0x14a>
    1f20:	0989      	lsrs	r1, r1, #6
    1f22:	09c3      	lsrs	r3, r0, #7
    1f24:	428b      	cmp	r3, r1
    1f26:	d301      	bcc.n	1f2c <__divsi3+0x154>
    1f28:	01cb      	lsls	r3, r1, #7
    1f2a:	1ac0      	subs	r0, r0, r3
    1f2c:	4152      	adcs	r2, r2
    1f2e:	0983      	lsrs	r3, r0, #6
    1f30:	428b      	cmp	r3, r1
    1f32:	d301      	bcc.n	1f38 <__divsi3+0x160>
    1f34:	018b      	lsls	r3, r1, #6
    1f36:	1ac0      	subs	r0, r0, r3
    1f38:	4152      	adcs	r2, r2
    1f3a:	0943      	lsrs	r3, r0, #5
    1f3c:	428b      	cmp	r3, r1
    1f3e:	d301      	bcc.n	1f44 <__divsi3+0x16c>
    1f40:	014b      	lsls	r3, r1, #5
    1f42:	1ac0      	subs	r0, r0, r3
    1f44:	4152      	adcs	r2, r2
    1f46:	0903      	lsrs	r3, r0, #4
    1f48:	428b      	cmp	r3, r1
    1f4a:	d301      	bcc.n	1f50 <__divsi3+0x178>
    1f4c:	010b      	lsls	r3, r1, #4
    1f4e:	1ac0      	subs	r0, r0, r3
    1f50:	4152      	adcs	r2, r2
    1f52:	08c3      	lsrs	r3, r0, #3
    1f54:	428b      	cmp	r3, r1
    1f56:	d301      	bcc.n	1f5c <__divsi3+0x184>
    1f58:	00cb      	lsls	r3, r1, #3
    1f5a:	1ac0      	subs	r0, r0, r3
    1f5c:	4152      	adcs	r2, r2
    1f5e:	0883      	lsrs	r3, r0, #2
    1f60:	428b      	cmp	r3, r1
    1f62:	d301      	bcc.n	1f68 <__divsi3+0x190>
    1f64:	008b      	lsls	r3, r1, #2
    1f66:	1ac0      	subs	r0, r0, r3
    1f68:	4152      	adcs	r2, r2
    1f6a:	d2d9      	bcs.n	1f20 <__divsi3+0x148>
    1f6c:	0843      	lsrs	r3, r0, #1
    1f6e:	428b      	cmp	r3, r1
    1f70:	d301      	bcc.n	1f76 <__divsi3+0x19e>
    1f72:	004b      	lsls	r3, r1, #1
    1f74:	1ac0      	subs	r0, r0, r3
    1f76:	4152      	adcs	r2, r2
    1f78:	1a41      	subs	r1, r0, r1
    1f7a:	d200      	bcs.n	1f7e <__divsi3+0x1a6>
    1f7c:	4601      	mov	r1, r0
    1f7e:	4663      	mov	r3, ip
    1f80:	4152      	adcs	r2, r2
    1f82:	105b      	asrs	r3, r3, #1
    1f84:	4610      	mov	r0, r2
    1f86:	d301      	bcc.n	1f8c <__divsi3+0x1b4>
    1f88:	4240      	negs	r0, r0
    1f8a:	2b00      	cmp	r3, #0
    1f8c:	d500      	bpl.n	1f90 <__divsi3+0x1b8>
    1f8e:	4249      	negs	r1, r1
    1f90:	4770      	bx	lr
    1f92:	4663      	mov	r3, ip
    1f94:	105b      	asrs	r3, r3, #1
    1f96:	d300      	bcc.n	1f9a <__divsi3+0x1c2>
    1f98:	4240      	negs	r0, r0
    1f9a:	b501      	push	{r0, lr}
    1f9c:	2000      	movs	r0, #0
    1f9e:	f000 f805 	bl	1fac <__aeabi_idiv0>
    1fa2:	bd02      	pop	{r1, pc}

00001fa4 <__aeabi_idivmod>:
    1fa4:	2900      	cmp	r1, #0
    1fa6:	d0f8      	beq.n	1f9a <__divsi3+0x1c2>
    1fa8:	e716      	b.n	1dd8 <__divsi3>
    1faa:	4770      	bx	lr

00001fac <__aeabi_idiv0>:
    1fac:	4770      	bx	lr
    1fae:	46c0      	nop			; (mov r8, r8)

00001fb0 <__aeabi_cdrcmple>:
    1fb0:	4684      	mov	ip, r0
    1fb2:	1c10      	adds	r0, r2, #0
    1fb4:	4662      	mov	r2, ip
    1fb6:	468c      	mov	ip, r1
    1fb8:	1c19      	adds	r1, r3, #0
    1fba:	4663      	mov	r3, ip
    1fbc:	e000      	b.n	1fc0 <__aeabi_cdcmpeq>
    1fbe:	46c0      	nop			; (mov r8, r8)

00001fc0 <__aeabi_cdcmpeq>:
    1fc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    1fc2:	f000 ff33 	bl	2e2c <__ledf2>
    1fc6:	2800      	cmp	r0, #0
    1fc8:	d401      	bmi.n	1fce <__aeabi_cdcmpeq+0xe>
    1fca:	2100      	movs	r1, #0
    1fcc:	42c8      	cmn	r0, r1
    1fce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00001fd0 <__aeabi_dcmpeq>:
    1fd0:	b510      	push	{r4, lr}
    1fd2:	f000 fe8d 	bl	2cf0 <__eqdf2>
    1fd6:	4240      	negs	r0, r0
    1fd8:	3001      	adds	r0, #1
    1fda:	bd10      	pop	{r4, pc}

00001fdc <__aeabi_dcmplt>:
    1fdc:	b510      	push	{r4, lr}
    1fde:	f000 ff25 	bl	2e2c <__ledf2>
    1fe2:	2800      	cmp	r0, #0
    1fe4:	db01      	blt.n	1fea <__aeabi_dcmplt+0xe>
    1fe6:	2000      	movs	r0, #0
    1fe8:	bd10      	pop	{r4, pc}
    1fea:	2001      	movs	r0, #1
    1fec:	bd10      	pop	{r4, pc}
    1fee:	46c0      	nop			; (mov r8, r8)

00001ff0 <__aeabi_dcmple>:
    1ff0:	b510      	push	{r4, lr}
    1ff2:	f000 ff1b 	bl	2e2c <__ledf2>
    1ff6:	2800      	cmp	r0, #0
    1ff8:	dd01      	ble.n	1ffe <__aeabi_dcmple+0xe>
    1ffa:	2000      	movs	r0, #0
    1ffc:	bd10      	pop	{r4, pc}
    1ffe:	2001      	movs	r0, #1
    2000:	bd10      	pop	{r4, pc}
    2002:	46c0      	nop			; (mov r8, r8)

00002004 <__aeabi_dcmpgt>:
    2004:	b510      	push	{r4, lr}
    2006:	f000 fead 	bl	2d64 <__gedf2>
    200a:	2800      	cmp	r0, #0
    200c:	dc01      	bgt.n	2012 <__aeabi_dcmpgt+0xe>
    200e:	2000      	movs	r0, #0
    2010:	bd10      	pop	{r4, pc}
    2012:	2001      	movs	r0, #1
    2014:	bd10      	pop	{r4, pc}
    2016:	46c0      	nop			; (mov r8, r8)

00002018 <__aeabi_dcmpge>:
    2018:	b510      	push	{r4, lr}
    201a:	f000 fea3 	bl	2d64 <__gedf2>
    201e:	2800      	cmp	r0, #0
    2020:	da01      	bge.n	2026 <__aeabi_dcmpge+0xe>
    2022:	2000      	movs	r0, #0
    2024:	bd10      	pop	{r4, pc}
    2026:	2001      	movs	r0, #1
    2028:	bd10      	pop	{r4, pc}
    202a:	46c0      	nop			; (mov r8, r8)

0000202c <__aeabi_d2uiz>:
    202c:	b570      	push	{r4, r5, r6, lr}
    202e:	2200      	movs	r2, #0
    2030:	4b0c      	ldr	r3, [pc, #48]	; (2064 <__aeabi_d2uiz+0x38>)
    2032:	0004      	movs	r4, r0
    2034:	000d      	movs	r5, r1
    2036:	f7ff ffef 	bl	2018 <__aeabi_dcmpge>
    203a:	2800      	cmp	r0, #0
    203c:	d104      	bne.n	2048 <__aeabi_d2uiz+0x1c>
    203e:	0020      	movs	r0, r4
    2040:	0029      	movs	r1, r5
    2042:	f001 fa6b 	bl	351c <__aeabi_d2iz>
    2046:	bd70      	pop	{r4, r5, r6, pc}
    2048:	4b06      	ldr	r3, [pc, #24]	; (2064 <__aeabi_d2uiz+0x38>)
    204a:	2200      	movs	r2, #0
    204c:	0020      	movs	r0, r4
    204e:	0029      	movs	r1, r5
    2050:	f000 ff4e 	bl	2ef0 <__aeabi_dsub>
    2054:	f001 fa62 	bl	351c <__aeabi_d2iz>
    2058:	2380      	movs	r3, #128	; 0x80
    205a:	061b      	lsls	r3, r3, #24
    205c:	469c      	mov	ip, r3
    205e:	4460      	add	r0, ip
    2060:	e7f1      	b.n	2046 <__aeabi_d2uiz+0x1a>
    2062:	46c0      	nop			; (mov r8, r8)
    2064:	41e00000 	.word	0x41e00000

00002068 <__aeabi_dadd>:
    2068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    206a:	4645      	mov	r5, r8
    206c:	46de      	mov	lr, fp
    206e:	4657      	mov	r7, sl
    2070:	464e      	mov	r6, r9
    2072:	030c      	lsls	r4, r1, #12
    2074:	b5e0      	push	{r5, r6, r7, lr}
    2076:	004e      	lsls	r6, r1, #1
    2078:	0fc9      	lsrs	r1, r1, #31
    207a:	4688      	mov	r8, r1
    207c:	000d      	movs	r5, r1
    207e:	0a61      	lsrs	r1, r4, #9
    2080:	0f44      	lsrs	r4, r0, #29
    2082:	430c      	orrs	r4, r1
    2084:	00c7      	lsls	r7, r0, #3
    2086:	0319      	lsls	r1, r3, #12
    2088:	0058      	lsls	r0, r3, #1
    208a:	0fdb      	lsrs	r3, r3, #31
    208c:	469b      	mov	fp, r3
    208e:	0a4b      	lsrs	r3, r1, #9
    2090:	0f51      	lsrs	r1, r2, #29
    2092:	430b      	orrs	r3, r1
    2094:	0d76      	lsrs	r6, r6, #21
    2096:	0d40      	lsrs	r0, r0, #21
    2098:	0019      	movs	r1, r3
    209a:	00d2      	lsls	r2, r2, #3
    209c:	45d8      	cmp	r8, fp
    209e:	d100      	bne.n	20a2 <__aeabi_dadd+0x3a>
    20a0:	e0ae      	b.n	2200 <__aeabi_dadd+0x198>
    20a2:	1a35      	subs	r5, r6, r0
    20a4:	2d00      	cmp	r5, #0
    20a6:	dc00      	bgt.n	20aa <__aeabi_dadd+0x42>
    20a8:	e0f6      	b.n	2298 <__aeabi_dadd+0x230>
    20aa:	2800      	cmp	r0, #0
    20ac:	d10f      	bne.n	20ce <__aeabi_dadd+0x66>
    20ae:	4313      	orrs	r3, r2
    20b0:	d100      	bne.n	20b4 <__aeabi_dadd+0x4c>
    20b2:	e0db      	b.n	226c <__aeabi_dadd+0x204>
    20b4:	1e6b      	subs	r3, r5, #1
    20b6:	2b00      	cmp	r3, #0
    20b8:	d000      	beq.n	20bc <__aeabi_dadd+0x54>
    20ba:	e137      	b.n	232c <__aeabi_dadd+0x2c4>
    20bc:	1aba      	subs	r2, r7, r2
    20be:	4297      	cmp	r7, r2
    20c0:	41bf      	sbcs	r7, r7
    20c2:	1a64      	subs	r4, r4, r1
    20c4:	427f      	negs	r7, r7
    20c6:	1be4      	subs	r4, r4, r7
    20c8:	2601      	movs	r6, #1
    20ca:	0017      	movs	r7, r2
    20cc:	e024      	b.n	2118 <__aeabi_dadd+0xb0>
    20ce:	4bc6      	ldr	r3, [pc, #792]	; (23e8 <__aeabi_dadd+0x380>)
    20d0:	429e      	cmp	r6, r3
    20d2:	d04d      	beq.n	2170 <__aeabi_dadd+0x108>
    20d4:	2380      	movs	r3, #128	; 0x80
    20d6:	041b      	lsls	r3, r3, #16
    20d8:	4319      	orrs	r1, r3
    20da:	2d38      	cmp	r5, #56	; 0x38
    20dc:	dd00      	ble.n	20e0 <__aeabi_dadd+0x78>
    20de:	e107      	b.n	22f0 <__aeabi_dadd+0x288>
    20e0:	2d1f      	cmp	r5, #31
    20e2:	dd00      	ble.n	20e6 <__aeabi_dadd+0x7e>
    20e4:	e138      	b.n	2358 <__aeabi_dadd+0x2f0>
    20e6:	2020      	movs	r0, #32
    20e8:	1b43      	subs	r3, r0, r5
    20ea:	469a      	mov	sl, r3
    20ec:	000b      	movs	r3, r1
    20ee:	4650      	mov	r0, sl
    20f0:	4083      	lsls	r3, r0
    20f2:	4699      	mov	r9, r3
    20f4:	0013      	movs	r3, r2
    20f6:	4648      	mov	r0, r9
    20f8:	40eb      	lsrs	r3, r5
    20fa:	4318      	orrs	r0, r3
    20fc:	0003      	movs	r3, r0
    20fe:	4650      	mov	r0, sl
    2100:	4082      	lsls	r2, r0
    2102:	1e50      	subs	r0, r2, #1
    2104:	4182      	sbcs	r2, r0
    2106:	40e9      	lsrs	r1, r5
    2108:	431a      	orrs	r2, r3
    210a:	1aba      	subs	r2, r7, r2
    210c:	1a61      	subs	r1, r4, r1
    210e:	4297      	cmp	r7, r2
    2110:	41a4      	sbcs	r4, r4
    2112:	0017      	movs	r7, r2
    2114:	4264      	negs	r4, r4
    2116:	1b0c      	subs	r4, r1, r4
    2118:	0223      	lsls	r3, r4, #8
    211a:	d562      	bpl.n	21e2 <__aeabi_dadd+0x17a>
    211c:	0264      	lsls	r4, r4, #9
    211e:	0a65      	lsrs	r5, r4, #9
    2120:	2d00      	cmp	r5, #0
    2122:	d100      	bne.n	2126 <__aeabi_dadd+0xbe>
    2124:	e0df      	b.n	22e6 <__aeabi_dadd+0x27e>
    2126:	0028      	movs	r0, r5
    2128:	f001 faa6 	bl	3678 <__clzsi2>
    212c:	0003      	movs	r3, r0
    212e:	3b08      	subs	r3, #8
    2130:	2b1f      	cmp	r3, #31
    2132:	dd00      	ble.n	2136 <__aeabi_dadd+0xce>
    2134:	e0d2      	b.n	22dc <__aeabi_dadd+0x274>
    2136:	2220      	movs	r2, #32
    2138:	003c      	movs	r4, r7
    213a:	1ad2      	subs	r2, r2, r3
    213c:	409d      	lsls	r5, r3
    213e:	40d4      	lsrs	r4, r2
    2140:	409f      	lsls	r7, r3
    2142:	4325      	orrs	r5, r4
    2144:	429e      	cmp	r6, r3
    2146:	dd00      	ble.n	214a <__aeabi_dadd+0xe2>
    2148:	e0c4      	b.n	22d4 <__aeabi_dadd+0x26c>
    214a:	1b9e      	subs	r6, r3, r6
    214c:	1c73      	adds	r3, r6, #1
    214e:	2b1f      	cmp	r3, #31
    2150:	dd00      	ble.n	2154 <__aeabi_dadd+0xec>
    2152:	e0f1      	b.n	2338 <__aeabi_dadd+0x2d0>
    2154:	2220      	movs	r2, #32
    2156:	0038      	movs	r0, r7
    2158:	0029      	movs	r1, r5
    215a:	1ad2      	subs	r2, r2, r3
    215c:	40d8      	lsrs	r0, r3
    215e:	4091      	lsls	r1, r2
    2160:	4097      	lsls	r7, r2
    2162:	002c      	movs	r4, r5
    2164:	4301      	orrs	r1, r0
    2166:	1e78      	subs	r0, r7, #1
    2168:	4187      	sbcs	r7, r0
    216a:	40dc      	lsrs	r4, r3
    216c:	2600      	movs	r6, #0
    216e:	430f      	orrs	r7, r1
    2170:	077b      	lsls	r3, r7, #29
    2172:	d009      	beq.n	2188 <__aeabi_dadd+0x120>
    2174:	230f      	movs	r3, #15
    2176:	403b      	ands	r3, r7
    2178:	2b04      	cmp	r3, #4
    217a:	d005      	beq.n	2188 <__aeabi_dadd+0x120>
    217c:	1d3b      	adds	r3, r7, #4
    217e:	42bb      	cmp	r3, r7
    2180:	41bf      	sbcs	r7, r7
    2182:	427f      	negs	r7, r7
    2184:	19e4      	adds	r4, r4, r7
    2186:	001f      	movs	r7, r3
    2188:	0223      	lsls	r3, r4, #8
    218a:	d52c      	bpl.n	21e6 <__aeabi_dadd+0x17e>
    218c:	4b96      	ldr	r3, [pc, #600]	; (23e8 <__aeabi_dadd+0x380>)
    218e:	3601      	adds	r6, #1
    2190:	429e      	cmp	r6, r3
    2192:	d100      	bne.n	2196 <__aeabi_dadd+0x12e>
    2194:	e09a      	b.n	22cc <__aeabi_dadd+0x264>
    2196:	4645      	mov	r5, r8
    2198:	4b94      	ldr	r3, [pc, #592]	; (23ec <__aeabi_dadd+0x384>)
    219a:	08ff      	lsrs	r7, r7, #3
    219c:	401c      	ands	r4, r3
    219e:	0760      	lsls	r0, r4, #29
    21a0:	0576      	lsls	r6, r6, #21
    21a2:	0264      	lsls	r4, r4, #9
    21a4:	4307      	orrs	r7, r0
    21a6:	0b24      	lsrs	r4, r4, #12
    21a8:	0d76      	lsrs	r6, r6, #21
    21aa:	2100      	movs	r1, #0
    21ac:	0324      	lsls	r4, r4, #12
    21ae:	0b23      	lsrs	r3, r4, #12
    21b0:	0d0c      	lsrs	r4, r1, #20
    21b2:	4a8f      	ldr	r2, [pc, #572]	; (23f0 <__aeabi_dadd+0x388>)
    21b4:	0524      	lsls	r4, r4, #20
    21b6:	431c      	orrs	r4, r3
    21b8:	4014      	ands	r4, r2
    21ba:	0533      	lsls	r3, r6, #20
    21bc:	4323      	orrs	r3, r4
    21be:	005b      	lsls	r3, r3, #1
    21c0:	07ed      	lsls	r5, r5, #31
    21c2:	085b      	lsrs	r3, r3, #1
    21c4:	432b      	orrs	r3, r5
    21c6:	0038      	movs	r0, r7
    21c8:	0019      	movs	r1, r3
    21ca:	bc3c      	pop	{r2, r3, r4, r5}
    21cc:	4690      	mov	r8, r2
    21ce:	4699      	mov	r9, r3
    21d0:	46a2      	mov	sl, r4
    21d2:	46ab      	mov	fp, r5
    21d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    21d6:	4664      	mov	r4, ip
    21d8:	4304      	orrs	r4, r0
    21da:	d100      	bne.n	21de <__aeabi_dadd+0x176>
    21dc:	e211      	b.n	2602 <__aeabi_dadd+0x59a>
    21de:	0004      	movs	r4, r0
    21e0:	4667      	mov	r7, ip
    21e2:	077b      	lsls	r3, r7, #29
    21e4:	d1c6      	bne.n	2174 <__aeabi_dadd+0x10c>
    21e6:	4645      	mov	r5, r8
    21e8:	0760      	lsls	r0, r4, #29
    21ea:	08ff      	lsrs	r7, r7, #3
    21ec:	4307      	orrs	r7, r0
    21ee:	08e4      	lsrs	r4, r4, #3
    21f0:	4b7d      	ldr	r3, [pc, #500]	; (23e8 <__aeabi_dadd+0x380>)
    21f2:	429e      	cmp	r6, r3
    21f4:	d030      	beq.n	2258 <__aeabi_dadd+0x1f0>
    21f6:	0324      	lsls	r4, r4, #12
    21f8:	0576      	lsls	r6, r6, #21
    21fa:	0b24      	lsrs	r4, r4, #12
    21fc:	0d76      	lsrs	r6, r6, #21
    21fe:	e7d4      	b.n	21aa <__aeabi_dadd+0x142>
    2200:	1a33      	subs	r3, r6, r0
    2202:	469a      	mov	sl, r3
    2204:	2b00      	cmp	r3, #0
    2206:	dd78      	ble.n	22fa <__aeabi_dadd+0x292>
    2208:	2800      	cmp	r0, #0
    220a:	d031      	beq.n	2270 <__aeabi_dadd+0x208>
    220c:	4876      	ldr	r0, [pc, #472]	; (23e8 <__aeabi_dadd+0x380>)
    220e:	4286      	cmp	r6, r0
    2210:	d0ae      	beq.n	2170 <__aeabi_dadd+0x108>
    2212:	2080      	movs	r0, #128	; 0x80
    2214:	0400      	lsls	r0, r0, #16
    2216:	4301      	orrs	r1, r0
    2218:	4653      	mov	r3, sl
    221a:	2b38      	cmp	r3, #56	; 0x38
    221c:	dc00      	bgt.n	2220 <__aeabi_dadd+0x1b8>
    221e:	e0e9      	b.n	23f4 <__aeabi_dadd+0x38c>
    2220:	430a      	orrs	r2, r1
    2222:	1e51      	subs	r1, r2, #1
    2224:	418a      	sbcs	r2, r1
    2226:	2100      	movs	r1, #0
    2228:	19d2      	adds	r2, r2, r7
    222a:	42ba      	cmp	r2, r7
    222c:	41bf      	sbcs	r7, r7
    222e:	1909      	adds	r1, r1, r4
    2230:	427c      	negs	r4, r7
    2232:	0017      	movs	r7, r2
    2234:	190c      	adds	r4, r1, r4
    2236:	0223      	lsls	r3, r4, #8
    2238:	d5d3      	bpl.n	21e2 <__aeabi_dadd+0x17a>
    223a:	4b6b      	ldr	r3, [pc, #428]	; (23e8 <__aeabi_dadd+0x380>)
    223c:	3601      	adds	r6, #1
    223e:	429e      	cmp	r6, r3
    2240:	d100      	bne.n	2244 <__aeabi_dadd+0x1dc>
    2242:	e13a      	b.n	24ba <__aeabi_dadd+0x452>
    2244:	2001      	movs	r0, #1
    2246:	4b69      	ldr	r3, [pc, #420]	; (23ec <__aeabi_dadd+0x384>)
    2248:	401c      	ands	r4, r3
    224a:	087b      	lsrs	r3, r7, #1
    224c:	4007      	ands	r7, r0
    224e:	431f      	orrs	r7, r3
    2250:	07e0      	lsls	r0, r4, #31
    2252:	4307      	orrs	r7, r0
    2254:	0864      	lsrs	r4, r4, #1
    2256:	e78b      	b.n	2170 <__aeabi_dadd+0x108>
    2258:	0023      	movs	r3, r4
    225a:	433b      	orrs	r3, r7
    225c:	d100      	bne.n	2260 <__aeabi_dadd+0x1f8>
    225e:	e1cb      	b.n	25f8 <__aeabi_dadd+0x590>
    2260:	2280      	movs	r2, #128	; 0x80
    2262:	0312      	lsls	r2, r2, #12
    2264:	4314      	orrs	r4, r2
    2266:	0324      	lsls	r4, r4, #12
    2268:	0b24      	lsrs	r4, r4, #12
    226a:	e79e      	b.n	21aa <__aeabi_dadd+0x142>
    226c:	002e      	movs	r6, r5
    226e:	e77f      	b.n	2170 <__aeabi_dadd+0x108>
    2270:	0008      	movs	r0, r1
    2272:	4310      	orrs	r0, r2
    2274:	d100      	bne.n	2278 <__aeabi_dadd+0x210>
    2276:	e0b4      	b.n	23e2 <__aeabi_dadd+0x37a>
    2278:	1e58      	subs	r0, r3, #1
    227a:	2800      	cmp	r0, #0
    227c:	d000      	beq.n	2280 <__aeabi_dadd+0x218>
    227e:	e0de      	b.n	243e <__aeabi_dadd+0x3d6>
    2280:	18ba      	adds	r2, r7, r2
    2282:	42ba      	cmp	r2, r7
    2284:	419b      	sbcs	r3, r3
    2286:	1864      	adds	r4, r4, r1
    2288:	425b      	negs	r3, r3
    228a:	18e4      	adds	r4, r4, r3
    228c:	0017      	movs	r7, r2
    228e:	2601      	movs	r6, #1
    2290:	0223      	lsls	r3, r4, #8
    2292:	d5a6      	bpl.n	21e2 <__aeabi_dadd+0x17a>
    2294:	2602      	movs	r6, #2
    2296:	e7d5      	b.n	2244 <__aeabi_dadd+0x1dc>
    2298:	2d00      	cmp	r5, #0
    229a:	d16e      	bne.n	237a <__aeabi_dadd+0x312>
    229c:	1c70      	adds	r0, r6, #1
    229e:	0540      	lsls	r0, r0, #21
    22a0:	0d40      	lsrs	r0, r0, #21
    22a2:	2801      	cmp	r0, #1
    22a4:	dc00      	bgt.n	22a8 <__aeabi_dadd+0x240>
    22a6:	e0f9      	b.n	249c <__aeabi_dadd+0x434>
    22a8:	1ab8      	subs	r0, r7, r2
    22aa:	4684      	mov	ip, r0
    22ac:	4287      	cmp	r7, r0
    22ae:	4180      	sbcs	r0, r0
    22b0:	1ae5      	subs	r5, r4, r3
    22b2:	4240      	negs	r0, r0
    22b4:	1a2d      	subs	r5, r5, r0
    22b6:	0228      	lsls	r0, r5, #8
    22b8:	d400      	bmi.n	22bc <__aeabi_dadd+0x254>
    22ba:	e089      	b.n	23d0 <__aeabi_dadd+0x368>
    22bc:	1bd7      	subs	r7, r2, r7
    22be:	42ba      	cmp	r2, r7
    22c0:	4192      	sbcs	r2, r2
    22c2:	1b1c      	subs	r4, r3, r4
    22c4:	4252      	negs	r2, r2
    22c6:	1aa5      	subs	r5, r4, r2
    22c8:	46d8      	mov	r8, fp
    22ca:	e729      	b.n	2120 <__aeabi_dadd+0xb8>
    22cc:	4645      	mov	r5, r8
    22ce:	2400      	movs	r4, #0
    22d0:	2700      	movs	r7, #0
    22d2:	e76a      	b.n	21aa <__aeabi_dadd+0x142>
    22d4:	4c45      	ldr	r4, [pc, #276]	; (23ec <__aeabi_dadd+0x384>)
    22d6:	1af6      	subs	r6, r6, r3
    22d8:	402c      	ands	r4, r5
    22da:	e749      	b.n	2170 <__aeabi_dadd+0x108>
    22dc:	003d      	movs	r5, r7
    22de:	3828      	subs	r0, #40	; 0x28
    22e0:	4085      	lsls	r5, r0
    22e2:	2700      	movs	r7, #0
    22e4:	e72e      	b.n	2144 <__aeabi_dadd+0xdc>
    22e6:	0038      	movs	r0, r7
    22e8:	f001 f9c6 	bl	3678 <__clzsi2>
    22ec:	3020      	adds	r0, #32
    22ee:	e71d      	b.n	212c <__aeabi_dadd+0xc4>
    22f0:	430a      	orrs	r2, r1
    22f2:	1e51      	subs	r1, r2, #1
    22f4:	418a      	sbcs	r2, r1
    22f6:	2100      	movs	r1, #0
    22f8:	e707      	b.n	210a <__aeabi_dadd+0xa2>
    22fa:	2b00      	cmp	r3, #0
    22fc:	d000      	beq.n	2300 <__aeabi_dadd+0x298>
    22fe:	e0f3      	b.n	24e8 <__aeabi_dadd+0x480>
    2300:	1c70      	adds	r0, r6, #1
    2302:	0543      	lsls	r3, r0, #21
    2304:	0d5b      	lsrs	r3, r3, #21
    2306:	2b01      	cmp	r3, #1
    2308:	dc00      	bgt.n	230c <__aeabi_dadd+0x2a4>
    230a:	e0ad      	b.n	2468 <__aeabi_dadd+0x400>
    230c:	4b36      	ldr	r3, [pc, #216]	; (23e8 <__aeabi_dadd+0x380>)
    230e:	4298      	cmp	r0, r3
    2310:	d100      	bne.n	2314 <__aeabi_dadd+0x2ac>
    2312:	e0d1      	b.n	24b8 <__aeabi_dadd+0x450>
    2314:	18ba      	adds	r2, r7, r2
    2316:	42ba      	cmp	r2, r7
    2318:	41bf      	sbcs	r7, r7
    231a:	1864      	adds	r4, r4, r1
    231c:	427f      	negs	r7, r7
    231e:	19e4      	adds	r4, r4, r7
    2320:	07e7      	lsls	r7, r4, #31
    2322:	0852      	lsrs	r2, r2, #1
    2324:	4317      	orrs	r7, r2
    2326:	0864      	lsrs	r4, r4, #1
    2328:	0006      	movs	r6, r0
    232a:	e721      	b.n	2170 <__aeabi_dadd+0x108>
    232c:	482e      	ldr	r0, [pc, #184]	; (23e8 <__aeabi_dadd+0x380>)
    232e:	4285      	cmp	r5, r0
    2330:	d100      	bne.n	2334 <__aeabi_dadd+0x2cc>
    2332:	e093      	b.n	245c <__aeabi_dadd+0x3f4>
    2334:	001d      	movs	r5, r3
    2336:	e6d0      	b.n	20da <__aeabi_dadd+0x72>
    2338:	0029      	movs	r1, r5
    233a:	3e1f      	subs	r6, #31
    233c:	40f1      	lsrs	r1, r6
    233e:	2b20      	cmp	r3, #32
    2340:	d100      	bne.n	2344 <__aeabi_dadd+0x2dc>
    2342:	e08d      	b.n	2460 <__aeabi_dadd+0x3f8>
    2344:	2240      	movs	r2, #64	; 0x40
    2346:	1ad3      	subs	r3, r2, r3
    2348:	409d      	lsls	r5, r3
    234a:	432f      	orrs	r7, r5
    234c:	1e7d      	subs	r5, r7, #1
    234e:	41af      	sbcs	r7, r5
    2350:	2400      	movs	r4, #0
    2352:	430f      	orrs	r7, r1
    2354:	2600      	movs	r6, #0
    2356:	e744      	b.n	21e2 <__aeabi_dadd+0x17a>
    2358:	002b      	movs	r3, r5
    235a:	0008      	movs	r0, r1
    235c:	3b20      	subs	r3, #32
    235e:	40d8      	lsrs	r0, r3
    2360:	0003      	movs	r3, r0
    2362:	2d20      	cmp	r5, #32
    2364:	d100      	bne.n	2368 <__aeabi_dadd+0x300>
    2366:	e07d      	b.n	2464 <__aeabi_dadd+0x3fc>
    2368:	2040      	movs	r0, #64	; 0x40
    236a:	1b45      	subs	r5, r0, r5
    236c:	40a9      	lsls	r1, r5
    236e:	430a      	orrs	r2, r1
    2370:	1e51      	subs	r1, r2, #1
    2372:	418a      	sbcs	r2, r1
    2374:	2100      	movs	r1, #0
    2376:	431a      	orrs	r2, r3
    2378:	e6c7      	b.n	210a <__aeabi_dadd+0xa2>
    237a:	2e00      	cmp	r6, #0
    237c:	d050      	beq.n	2420 <__aeabi_dadd+0x3b8>
    237e:	4e1a      	ldr	r6, [pc, #104]	; (23e8 <__aeabi_dadd+0x380>)
    2380:	42b0      	cmp	r0, r6
    2382:	d057      	beq.n	2434 <__aeabi_dadd+0x3cc>
    2384:	2680      	movs	r6, #128	; 0x80
    2386:	426b      	negs	r3, r5
    2388:	4699      	mov	r9, r3
    238a:	0436      	lsls	r6, r6, #16
    238c:	4334      	orrs	r4, r6
    238e:	464b      	mov	r3, r9
    2390:	2b38      	cmp	r3, #56	; 0x38
    2392:	dd00      	ble.n	2396 <__aeabi_dadd+0x32e>
    2394:	e0d6      	b.n	2544 <__aeabi_dadd+0x4dc>
    2396:	2b1f      	cmp	r3, #31
    2398:	dd00      	ble.n	239c <__aeabi_dadd+0x334>
    239a:	e135      	b.n	2608 <__aeabi_dadd+0x5a0>
    239c:	2620      	movs	r6, #32
    239e:	1af5      	subs	r5, r6, r3
    23a0:	0026      	movs	r6, r4
    23a2:	40ae      	lsls	r6, r5
    23a4:	46b2      	mov	sl, r6
    23a6:	003e      	movs	r6, r7
    23a8:	40de      	lsrs	r6, r3
    23aa:	46ac      	mov	ip, r5
    23ac:	0035      	movs	r5, r6
    23ae:	4656      	mov	r6, sl
    23b0:	432e      	orrs	r6, r5
    23b2:	4665      	mov	r5, ip
    23b4:	40af      	lsls	r7, r5
    23b6:	1e7d      	subs	r5, r7, #1
    23b8:	41af      	sbcs	r7, r5
    23ba:	40dc      	lsrs	r4, r3
    23bc:	4337      	orrs	r7, r6
    23be:	1bd7      	subs	r7, r2, r7
    23c0:	42ba      	cmp	r2, r7
    23c2:	4192      	sbcs	r2, r2
    23c4:	1b0c      	subs	r4, r1, r4
    23c6:	4252      	negs	r2, r2
    23c8:	1aa4      	subs	r4, r4, r2
    23ca:	0006      	movs	r6, r0
    23cc:	46d8      	mov	r8, fp
    23ce:	e6a3      	b.n	2118 <__aeabi_dadd+0xb0>
    23d0:	4664      	mov	r4, ip
    23d2:	4667      	mov	r7, ip
    23d4:	432c      	orrs	r4, r5
    23d6:	d000      	beq.n	23da <__aeabi_dadd+0x372>
    23d8:	e6a2      	b.n	2120 <__aeabi_dadd+0xb8>
    23da:	2500      	movs	r5, #0
    23dc:	2600      	movs	r6, #0
    23de:	2700      	movs	r7, #0
    23e0:	e706      	b.n	21f0 <__aeabi_dadd+0x188>
    23e2:	001e      	movs	r6, r3
    23e4:	e6c4      	b.n	2170 <__aeabi_dadd+0x108>
    23e6:	46c0      	nop			; (mov r8, r8)
    23e8:	000007ff 	.word	0x000007ff
    23ec:	ff7fffff 	.word	0xff7fffff
    23f0:	800fffff 	.word	0x800fffff
    23f4:	2b1f      	cmp	r3, #31
    23f6:	dc63      	bgt.n	24c0 <__aeabi_dadd+0x458>
    23f8:	2020      	movs	r0, #32
    23fa:	1ac3      	subs	r3, r0, r3
    23fc:	0008      	movs	r0, r1
    23fe:	4098      	lsls	r0, r3
    2400:	469c      	mov	ip, r3
    2402:	4683      	mov	fp, r0
    2404:	4653      	mov	r3, sl
    2406:	0010      	movs	r0, r2
    2408:	40d8      	lsrs	r0, r3
    240a:	0003      	movs	r3, r0
    240c:	4658      	mov	r0, fp
    240e:	4318      	orrs	r0, r3
    2410:	4663      	mov	r3, ip
    2412:	409a      	lsls	r2, r3
    2414:	1e53      	subs	r3, r2, #1
    2416:	419a      	sbcs	r2, r3
    2418:	4653      	mov	r3, sl
    241a:	4302      	orrs	r2, r0
    241c:	40d9      	lsrs	r1, r3
    241e:	e703      	b.n	2228 <__aeabi_dadd+0x1c0>
    2420:	0026      	movs	r6, r4
    2422:	433e      	orrs	r6, r7
    2424:	d006      	beq.n	2434 <__aeabi_dadd+0x3cc>
    2426:	43eb      	mvns	r3, r5
    2428:	4699      	mov	r9, r3
    242a:	2b00      	cmp	r3, #0
    242c:	d0c7      	beq.n	23be <__aeabi_dadd+0x356>
    242e:	4e94      	ldr	r6, [pc, #592]	; (2680 <__aeabi_dadd+0x618>)
    2430:	42b0      	cmp	r0, r6
    2432:	d1ac      	bne.n	238e <__aeabi_dadd+0x326>
    2434:	000c      	movs	r4, r1
    2436:	0017      	movs	r7, r2
    2438:	0006      	movs	r6, r0
    243a:	46d8      	mov	r8, fp
    243c:	e698      	b.n	2170 <__aeabi_dadd+0x108>
    243e:	4b90      	ldr	r3, [pc, #576]	; (2680 <__aeabi_dadd+0x618>)
    2440:	459a      	cmp	sl, r3
    2442:	d00b      	beq.n	245c <__aeabi_dadd+0x3f4>
    2444:	4682      	mov	sl, r0
    2446:	e6e7      	b.n	2218 <__aeabi_dadd+0x1b0>
    2448:	2800      	cmp	r0, #0
    244a:	d000      	beq.n	244e <__aeabi_dadd+0x3e6>
    244c:	e09e      	b.n	258c <__aeabi_dadd+0x524>
    244e:	0018      	movs	r0, r3
    2450:	4310      	orrs	r0, r2
    2452:	d100      	bne.n	2456 <__aeabi_dadd+0x3ee>
    2454:	e0e9      	b.n	262a <__aeabi_dadd+0x5c2>
    2456:	001c      	movs	r4, r3
    2458:	0017      	movs	r7, r2
    245a:	46d8      	mov	r8, fp
    245c:	4e88      	ldr	r6, [pc, #544]	; (2680 <__aeabi_dadd+0x618>)
    245e:	e687      	b.n	2170 <__aeabi_dadd+0x108>
    2460:	2500      	movs	r5, #0
    2462:	e772      	b.n	234a <__aeabi_dadd+0x2e2>
    2464:	2100      	movs	r1, #0
    2466:	e782      	b.n	236e <__aeabi_dadd+0x306>
    2468:	0023      	movs	r3, r4
    246a:	433b      	orrs	r3, r7
    246c:	2e00      	cmp	r6, #0
    246e:	d000      	beq.n	2472 <__aeabi_dadd+0x40a>
    2470:	e0ab      	b.n	25ca <__aeabi_dadd+0x562>
    2472:	2b00      	cmp	r3, #0
    2474:	d100      	bne.n	2478 <__aeabi_dadd+0x410>
    2476:	e0e7      	b.n	2648 <__aeabi_dadd+0x5e0>
    2478:	000b      	movs	r3, r1
    247a:	4313      	orrs	r3, r2
    247c:	d100      	bne.n	2480 <__aeabi_dadd+0x418>
    247e:	e677      	b.n	2170 <__aeabi_dadd+0x108>
    2480:	18ba      	adds	r2, r7, r2
    2482:	42ba      	cmp	r2, r7
    2484:	41bf      	sbcs	r7, r7
    2486:	1864      	adds	r4, r4, r1
    2488:	427f      	negs	r7, r7
    248a:	19e4      	adds	r4, r4, r7
    248c:	0223      	lsls	r3, r4, #8
    248e:	d400      	bmi.n	2492 <__aeabi_dadd+0x42a>
    2490:	e0f2      	b.n	2678 <__aeabi_dadd+0x610>
    2492:	4b7c      	ldr	r3, [pc, #496]	; (2684 <__aeabi_dadd+0x61c>)
    2494:	0017      	movs	r7, r2
    2496:	401c      	ands	r4, r3
    2498:	0006      	movs	r6, r0
    249a:	e669      	b.n	2170 <__aeabi_dadd+0x108>
    249c:	0020      	movs	r0, r4
    249e:	4338      	orrs	r0, r7
    24a0:	2e00      	cmp	r6, #0
    24a2:	d1d1      	bne.n	2448 <__aeabi_dadd+0x3e0>
    24a4:	2800      	cmp	r0, #0
    24a6:	d15b      	bne.n	2560 <__aeabi_dadd+0x4f8>
    24a8:	001c      	movs	r4, r3
    24aa:	4314      	orrs	r4, r2
    24ac:	d100      	bne.n	24b0 <__aeabi_dadd+0x448>
    24ae:	e0a8      	b.n	2602 <__aeabi_dadd+0x59a>
    24b0:	001c      	movs	r4, r3
    24b2:	0017      	movs	r7, r2
    24b4:	46d8      	mov	r8, fp
    24b6:	e65b      	b.n	2170 <__aeabi_dadd+0x108>
    24b8:	0006      	movs	r6, r0
    24ba:	2400      	movs	r4, #0
    24bc:	2700      	movs	r7, #0
    24be:	e697      	b.n	21f0 <__aeabi_dadd+0x188>
    24c0:	4650      	mov	r0, sl
    24c2:	000b      	movs	r3, r1
    24c4:	3820      	subs	r0, #32
    24c6:	40c3      	lsrs	r3, r0
    24c8:	4699      	mov	r9, r3
    24ca:	4653      	mov	r3, sl
    24cc:	2b20      	cmp	r3, #32
    24ce:	d100      	bne.n	24d2 <__aeabi_dadd+0x46a>
    24d0:	e095      	b.n	25fe <__aeabi_dadd+0x596>
    24d2:	2340      	movs	r3, #64	; 0x40
    24d4:	4650      	mov	r0, sl
    24d6:	1a1b      	subs	r3, r3, r0
    24d8:	4099      	lsls	r1, r3
    24da:	430a      	orrs	r2, r1
    24dc:	1e51      	subs	r1, r2, #1
    24de:	418a      	sbcs	r2, r1
    24e0:	464b      	mov	r3, r9
    24e2:	2100      	movs	r1, #0
    24e4:	431a      	orrs	r2, r3
    24e6:	e69f      	b.n	2228 <__aeabi_dadd+0x1c0>
    24e8:	2e00      	cmp	r6, #0
    24ea:	d130      	bne.n	254e <__aeabi_dadd+0x4e6>
    24ec:	0026      	movs	r6, r4
    24ee:	433e      	orrs	r6, r7
    24f0:	d067      	beq.n	25c2 <__aeabi_dadd+0x55a>
    24f2:	43db      	mvns	r3, r3
    24f4:	469a      	mov	sl, r3
    24f6:	2b00      	cmp	r3, #0
    24f8:	d01c      	beq.n	2534 <__aeabi_dadd+0x4cc>
    24fa:	4e61      	ldr	r6, [pc, #388]	; (2680 <__aeabi_dadd+0x618>)
    24fc:	42b0      	cmp	r0, r6
    24fe:	d060      	beq.n	25c2 <__aeabi_dadd+0x55a>
    2500:	4653      	mov	r3, sl
    2502:	2b38      	cmp	r3, #56	; 0x38
    2504:	dd00      	ble.n	2508 <__aeabi_dadd+0x4a0>
    2506:	e096      	b.n	2636 <__aeabi_dadd+0x5ce>
    2508:	2b1f      	cmp	r3, #31
    250a:	dd00      	ble.n	250e <__aeabi_dadd+0x4a6>
    250c:	e09f      	b.n	264e <__aeabi_dadd+0x5e6>
    250e:	2620      	movs	r6, #32
    2510:	1af3      	subs	r3, r6, r3
    2512:	0026      	movs	r6, r4
    2514:	409e      	lsls	r6, r3
    2516:	469c      	mov	ip, r3
    2518:	46b3      	mov	fp, r6
    251a:	4653      	mov	r3, sl
    251c:	003e      	movs	r6, r7
    251e:	40de      	lsrs	r6, r3
    2520:	0033      	movs	r3, r6
    2522:	465e      	mov	r6, fp
    2524:	431e      	orrs	r6, r3
    2526:	4663      	mov	r3, ip
    2528:	409f      	lsls	r7, r3
    252a:	1e7b      	subs	r3, r7, #1
    252c:	419f      	sbcs	r7, r3
    252e:	4653      	mov	r3, sl
    2530:	40dc      	lsrs	r4, r3
    2532:	4337      	orrs	r7, r6
    2534:	18bf      	adds	r7, r7, r2
    2536:	4297      	cmp	r7, r2
    2538:	4192      	sbcs	r2, r2
    253a:	1864      	adds	r4, r4, r1
    253c:	4252      	negs	r2, r2
    253e:	18a4      	adds	r4, r4, r2
    2540:	0006      	movs	r6, r0
    2542:	e678      	b.n	2236 <__aeabi_dadd+0x1ce>
    2544:	4327      	orrs	r7, r4
    2546:	1e7c      	subs	r4, r7, #1
    2548:	41a7      	sbcs	r7, r4
    254a:	2400      	movs	r4, #0
    254c:	e737      	b.n	23be <__aeabi_dadd+0x356>
    254e:	4e4c      	ldr	r6, [pc, #304]	; (2680 <__aeabi_dadd+0x618>)
    2550:	42b0      	cmp	r0, r6
    2552:	d036      	beq.n	25c2 <__aeabi_dadd+0x55a>
    2554:	2680      	movs	r6, #128	; 0x80
    2556:	425b      	negs	r3, r3
    2558:	0436      	lsls	r6, r6, #16
    255a:	469a      	mov	sl, r3
    255c:	4334      	orrs	r4, r6
    255e:	e7cf      	b.n	2500 <__aeabi_dadd+0x498>
    2560:	0018      	movs	r0, r3
    2562:	4310      	orrs	r0, r2
    2564:	d100      	bne.n	2568 <__aeabi_dadd+0x500>
    2566:	e603      	b.n	2170 <__aeabi_dadd+0x108>
    2568:	1ab8      	subs	r0, r7, r2
    256a:	4684      	mov	ip, r0
    256c:	4567      	cmp	r7, ip
    256e:	41ad      	sbcs	r5, r5
    2570:	1ae0      	subs	r0, r4, r3
    2572:	426d      	negs	r5, r5
    2574:	1b40      	subs	r0, r0, r5
    2576:	0205      	lsls	r5, r0, #8
    2578:	d400      	bmi.n	257c <__aeabi_dadd+0x514>
    257a:	e62c      	b.n	21d6 <__aeabi_dadd+0x16e>
    257c:	1bd7      	subs	r7, r2, r7
    257e:	42ba      	cmp	r2, r7
    2580:	4192      	sbcs	r2, r2
    2582:	1b1c      	subs	r4, r3, r4
    2584:	4252      	negs	r2, r2
    2586:	1aa4      	subs	r4, r4, r2
    2588:	46d8      	mov	r8, fp
    258a:	e5f1      	b.n	2170 <__aeabi_dadd+0x108>
    258c:	0018      	movs	r0, r3
    258e:	4310      	orrs	r0, r2
    2590:	d100      	bne.n	2594 <__aeabi_dadd+0x52c>
    2592:	e763      	b.n	245c <__aeabi_dadd+0x3f4>
    2594:	08f8      	lsrs	r0, r7, #3
    2596:	0767      	lsls	r7, r4, #29
    2598:	4307      	orrs	r7, r0
    259a:	2080      	movs	r0, #128	; 0x80
    259c:	08e4      	lsrs	r4, r4, #3
    259e:	0300      	lsls	r0, r0, #12
    25a0:	4204      	tst	r4, r0
    25a2:	d008      	beq.n	25b6 <__aeabi_dadd+0x54e>
    25a4:	08dd      	lsrs	r5, r3, #3
    25a6:	4205      	tst	r5, r0
    25a8:	d105      	bne.n	25b6 <__aeabi_dadd+0x54e>
    25aa:	08d2      	lsrs	r2, r2, #3
    25ac:	0759      	lsls	r1, r3, #29
    25ae:	4311      	orrs	r1, r2
    25b0:	000f      	movs	r7, r1
    25b2:	002c      	movs	r4, r5
    25b4:	46d8      	mov	r8, fp
    25b6:	0f7b      	lsrs	r3, r7, #29
    25b8:	00e4      	lsls	r4, r4, #3
    25ba:	431c      	orrs	r4, r3
    25bc:	00ff      	lsls	r7, r7, #3
    25be:	4e30      	ldr	r6, [pc, #192]	; (2680 <__aeabi_dadd+0x618>)
    25c0:	e5d6      	b.n	2170 <__aeabi_dadd+0x108>
    25c2:	000c      	movs	r4, r1
    25c4:	0017      	movs	r7, r2
    25c6:	0006      	movs	r6, r0
    25c8:	e5d2      	b.n	2170 <__aeabi_dadd+0x108>
    25ca:	2b00      	cmp	r3, #0
    25cc:	d038      	beq.n	2640 <__aeabi_dadd+0x5d8>
    25ce:	000b      	movs	r3, r1
    25d0:	4313      	orrs	r3, r2
    25d2:	d100      	bne.n	25d6 <__aeabi_dadd+0x56e>
    25d4:	e742      	b.n	245c <__aeabi_dadd+0x3f4>
    25d6:	08f8      	lsrs	r0, r7, #3
    25d8:	0767      	lsls	r7, r4, #29
    25da:	4307      	orrs	r7, r0
    25dc:	2080      	movs	r0, #128	; 0x80
    25de:	08e4      	lsrs	r4, r4, #3
    25e0:	0300      	lsls	r0, r0, #12
    25e2:	4204      	tst	r4, r0
    25e4:	d0e7      	beq.n	25b6 <__aeabi_dadd+0x54e>
    25e6:	08cb      	lsrs	r3, r1, #3
    25e8:	4203      	tst	r3, r0
    25ea:	d1e4      	bne.n	25b6 <__aeabi_dadd+0x54e>
    25ec:	08d2      	lsrs	r2, r2, #3
    25ee:	0749      	lsls	r1, r1, #29
    25f0:	4311      	orrs	r1, r2
    25f2:	000f      	movs	r7, r1
    25f4:	001c      	movs	r4, r3
    25f6:	e7de      	b.n	25b6 <__aeabi_dadd+0x54e>
    25f8:	2700      	movs	r7, #0
    25fa:	2400      	movs	r4, #0
    25fc:	e5d5      	b.n	21aa <__aeabi_dadd+0x142>
    25fe:	2100      	movs	r1, #0
    2600:	e76b      	b.n	24da <__aeabi_dadd+0x472>
    2602:	2500      	movs	r5, #0
    2604:	2700      	movs	r7, #0
    2606:	e5f3      	b.n	21f0 <__aeabi_dadd+0x188>
    2608:	464e      	mov	r6, r9
    260a:	0025      	movs	r5, r4
    260c:	3e20      	subs	r6, #32
    260e:	40f5      	lsrs	r5, r6
    2610:	464b      	mov	r3, r9
    2612:	002e      	movs	r6, r5
    2614:	2b20      	cmp	r3, #32
    2616:	d02d      	beq.n	2674 <__aeabi_dadd+0x60c>
    2618:	2540      	movs	r5, #64	; 0x40
    261a:	1aed      	subs	r5, r5, r3
    261c:	40ac      	lsls	r4, r5
    261e:	4327      	orrs	r7, r4
    2620:	1e7c      	subs	r4, r7, #1
    2622:	41a7      	sbcs	r7, r4
    2624:	2400      	movs	r4, #0
    2626:	4337      	orrs	r7, r6
    2628:	e6c9      	b.n	23be <__aeabi_dadd+0x356>
    262a:	2480      	movs	r4, #128	; 0x80
    262c:	2500      	movs	r5, #0
    262e:	0324      	lsls	r4, r4, #12
    2630:	4e13      	ldr	r6, [pc, #76]	; (2680 <__aeabi_dadd+0x618>)
    2632:	2700      	movs	r7, #0
    2634:	e5dc      	b.n	21f0 <__aeabi_dadd+0x188>
    2636:	4327      	orrs	r7, r4
    2638:	1e7c      	subs	r4, r7, #1
    263a:	41a7      	sbcs	r7, r4
    263c:	2400      	movs	r4, #0
    263e:	e779      	b.n	2534 <__aeabi_dadd+0x4cc>
    2640:	000c      	movs	r4, r1
    2642:	0017      	movs	r7, r2
    2644:	4e0e      	ldr	r6, [pc, #56]	; (2680 <__aeabi_dadd+0x618>)
    2646:	e593      	b.n	2170 <__aeabi_dadd+0x108>
    2648:	000c      	movs	r4, r1
    264a:	0017      	movs	r7, r2
    264c:	e590      	b.n	2170 <__aeabi_dadd+0x108>
    264e:	4656      	mov	r6, sl
    2650:	0023      	movs	r3, r4
    2652:	3e20      	subs	r6, #32
    2654:	40f3      	lsrs	r3, r6
    2656:	4699      	mov	r9, r3
    2658:	4653      	mov	r3, sl
    265a:	2b20      	cmp	r3, #32
    265c:	d00e      	beq.n	267c <__aeabi_dadd+0x614>
    265e:	2340      	movs	r3, #64	; 0x40
    2660:	4656      	mov	r6, sl
    2662:	1b9b      	subs	r3, r3, r6
    2664:	409c      	lsls	r4, r3
    2666:	4327      	orrs	r7, r4
    2668:	1e7c      	subs	r4, r7, #1
    266a:	41a7      	sbcs	r7, r4
    266c:	464b      	mov	r3, r9
    266e:	2400      	movs	r4, #0
    2670:	431f      	orrs	r7, r3
    2672:	e75f      	b.n	2534 <__aeabi_dadd+0x4cc>
    2674:	2400      	movs	r4, #0
    2676:	e7d2      	b.n	261e <__aeabi_dadd+0x5b6>
    2678:	0017      	movs	r7, r2
    267a:	e5b2      	b.n	21e2 <__aeabi_dadd+0x17a>
    267c:	2400      	movs	r4, #0
    267e:	e7f2      	b.n	2666 <__aeabi_dadd+0x5fe>
    2680:	000007ff 	.word	0x000007ff
    2684:	ff7fffff 	.word	0xff7fffff

00002688 <__aeabi_ddiv>:
    2688:	b5f0      	push	{r4, r5, r6, r7, lr}
    268a:	4657      	mov	r7, sl
    268c:	4645      	mov	r5, r8
    268e:	46de      	mov	lr, fp
    2690:	464e      	mov	r6, r9
    2692:	b5e0      	push	{r5, r6, r7, lr}
    2694:	004c      	lsls	r4, r1, #1
    2696:	030e      	lsls	r6, r1, #12
    2698:	b087      	sub	sp, #28
    269a:	4683      	mov	fp, r0
    269c:	4692      	mov	sl, r2
    269e:	001d      	movs	r5, r3
    26a0:	4680      	mov	r8, r0
    26a2:	0b36      	lsrs	r6, r6, #12
    26a4:	0d64      	lsrs	r4, r4, #21
    26a6:	0fcf      	lsrs	r7, r1, #31
    26a8:	2c00      	cmp	r4, #0
    26aa:	d04f      	beq.n	274c <__aeabi_ddiv+0xc4>
    26ac:	4b6f      	ldr	r3, [pc, #444]	; (286c <__aeabi_ddiv+0x1e4>)
    26ae:	429c      	cmp	r4, r3
    26b0:	d035      	beq.n	271e <__aeabi_ddiv+0x96>
    26b2:	2380      	movs	r3, #128	; 0x80
    26b4:	0f42      	lsrs	r2, r0, #29
    26b6:	041b      	lsls	r3, r3, #16
    26b8:	00f6      	lsls	r6, r6, #3
    26ba:	4313      	orrs	r3, r2
    26bc:	4333      	orrs	r3, r6
    26be:	4699      	mov	r9, r3
    26c0:	00c3      	lsls	r3, r0, #3
    26c2:	4698      	mov	r8, r3
    26c4:	4b6a      	ldr	r3, [pc, #424]	; (2870 <__aeabi_ddiv+0x1e8>)
    26c6:	2600      	movs	r6, #0
    26c8:	469c      	mov	ip, r3
    26ca:	2300      	movs	r3, #0
    26cc:	4464      	add	r4, ip
    26ce:	9303      	str	r3, [sp, #12]
    26d0:	032b      	lsls	r3, r5, #12
    26d2:	0b1b      	lsrs	r3, r3, #12
    26d4:	469b      	mov	fp, r3
    26d6:	006b      	lsls	r3, r5, #1
    26d8:	0fed      	lsrs	r5, r5, #31
    26da:	4650      	mov	r0, sl
    26dc:	0d5b      	lsrs	r3, r3, #21
    26de:	9501      	str	r5, [sp, #4]
    26e0:	d05e      	beq.n	27a0 <__aeabi_ddiv+0x118>
    26e2:	4a62      	ldr	r2, [pc, #392]	; (286c <__aeabi_ddiv+0x1e4>)
    26e4:	4293      	cmp	r3, r2
    26e6:	d053      	beq.n	2790 <__aeabi_ddiv+0x108>
    26e8:	465a      	mov	r2, fp
    26ea:	00d1      	lsls	r1, r2, #3
    26ec:	2280      	movs	r2, #128	; 0x80
    26ee:	0f40      	lsrs	r0, r0, #29
    26f0:	0412      	lsls	r2, r2, #16
    26f2:	4302      	orrs	r2, r0
    26f4:	430a      	orrs	r2, r1
    26f6:	4693      	mov	fp, r2
    26f8:	4652      	mov	r2, sl
    26fa:	00d1      	lsls	r1, r2, #3
    26fc:	4a5c      	ldr	r2, [pc, #368]	; (2870 <__aeabi_ddiv+0x1e8>)
    26fe:	4694      	mov	ip, r2
    2700:	2200      	movs	r2, #0
    2702:	4463      	add	r3, ip
    2704:	0038      	movs	r0, r7
    2706:	4068      	eors	r0, r5
    2708:	4684      	mov	ip, r0
    270a:	9002      	str	r0, [sp, #8]
    270c:	1ae4      	subs	r4, r4, r3
    270e:	4316      	orrs	r6, r2
    2710:	2e0f      	cmp	r6, #15
    2712:	d900      	bls.n	2716 <__aeabi_ddiv+0x8e>
    2714:	e0b4      	b.n	2880 <__aeabi_ddiv+0x1f8>
    2716:	4b57      	ldr	r3, [pc, #348]	; (2874 <__aeabi_ddiv+0x1ec>)
    2718:	00b6      	lsls	r6, r6, #2
    271a:	599b      	ldr	r3, [r3, r6]
    271c:	469f      	mov	pc, r3
    271e:	0003      	movs	r3, r0
    2720:	4333      	orrs	r3, r6
    2722:	4699      	mov	r9, r3
    2724:	d16c      	bne.n	2800 <__aeabi_ddiv+0x178>
    2726:	2300      	movs	r3, #0
    2728:	4698      	mov	r8, r3
    272a:	3302      	adds	r3, #2
    272c:	2608      	movs	r6, #8
    272e:	9303      	str	r3, [sp, #12]
    2730:	e7ce      	b.n	26d0 <__aeabi_ddiv+0x48>
    2732:	46cb      	mov	fp, r9
    2734:	4641      	mov	r1, r8
    2736:	9a03      	ldr	r2, [sp, #12]
    2738:	9701      	str	r7, [sp, #4]
    273a:	2a02      	cmp	r2, #2
    273c:	d165      	bne.n	280a <__aeabi_ddiv+0x182>
    273e:	9b01      	ldr	r3, [sp, #4]
    2740:	4c4a      	ldr	r4, [pc, #296]	; (286c <__aeabi_ddiv+0x1e4>)
    2742:	469c      	mov	ip, r3
    2744:	2300      	movs	r3, #0
    2746:	2200      	movs	r2, #0
    2748:	4698      	mov	r8, r3
    274a:	e06b      	b.n	2824 <__aeabi_ddiv+0x19c>
    274c:	0003      	movs	r3, r0
    274e:	4333      	orrs	r3, r6
    2750:	4699      	mov	r9, r3
    2752:	d04e      	beq.n	27f2 <__aeabi_ddiv+0x16a>
    2754:	2e00      	cmp	r6, #0
    2756:	d100      	bne.n	275a <__aeabi_ddiv+0xd2>
    2758:	e1bc      	b.n	2ad4 <__aeabi_ddiv+0x44c>
    275a:	0030      	movs	r0, r6
    275c:	f000 ff8c 	bl	3678 <__clzsi2>
    2760:	0003      	movs	r3, r0
    2762:	3b0b      	subs	r3, #11
    2764:	2b1c      	cmp	r3, #28
    2766:	dd00      	ble.n	276a <__aeabi_ddiv+0xe2>
    2768:	e1ac      	b.n	2ac4 <__aeabi_ddiv+0x43c>
    276a:	221d      	movs	r2, #29
    276c:	1ad3      	subs	r3, r2, r3
    276e:	465a      	mov	r2, fp
    2770:	0001      	movs	r1, r0
    2772:	40da      	lsrs	r2, r3
    2774:	3908      	subs	r1, #8
    2776:	408e      	lsls	r6, r1
    2778:	0013      	movs	r3, r2
    277a:	4333      	orrs	r3, r6
    277c:	4699      	mov	r9, r3
    277e:	465b      	mov	r3, fp
    2780:	408b      	lsls	r3, r1
    2782:	4698      	mov	r8, r3
    2784:	2300      	movs	r3, #0
    2786:	4c3c      	ldr	r4, [pc, #240]	; (2878 <__aeabi_ddiv+0x1f0>)
    2788:	2600      	movs	r6, #0
    278a:	1a24      	subs	r4, r4, r0
    278c:	9303      	str	r3, [sp, #12]
    278e:	e79f      	b.n	26d0 <__aeabi_ddiv+0x48>
    2790:	4651      	mov	r1, sl
    2792:	465a      	mov	r2, fp
    2794:	4311      	orrs	r1, r2
    2796:	d129      	bne.n	27ec <__aeabi_ddiv+0x164>
    2798:	2200      	movs	r2, #0
    279a:	4693      	mov	fp, r2
    279c:	3202      	adds	r2, #2
    279e:	e7b1      	b.n	2704 <__aeabi_ddiv+0x7c>
    27a0:	4659      	mov	r1, fp
    27a2:	4301      	orrs	r1, r0
    27a4:	d01e      	beq.n	27e4 <__aeabi_ddiv+0x15c>
    27a6:	465b      	mov	r3, fp
    27a8:	2b00      	cmp	r3, #0
    27aa:	d100      	bne.n	27ae <__aeabi_ddiv+0x126>
    27ac:	e19e      	b.n	2aec <__aeabi_ddiv+0x464>
    27ae:	4658      	mov	r0, fp
    27b0:	f000 ff62 	bl	3678 <__clzsi2>
    27b4:	0003      	movs	r3, r0
    27b6:	3b0b      	subs	r3, #11
    27b8:	2b1c      	cmp	r3, #28
    27ba:	dd00      	ble.n	27be <__aeabi_ddiv+0x136>
    27bc:	e18f      	b.n	2ade <__aeabi_ddiv+0x456>
    27be:	0002      	movs	r2, r0
    27c0:	4659      	mov	r1, fp
    27c2:	3a08      	subs	r2, #8
    27c4:	4091      	lsls	r1, r2
    27c6:	468b      	mov	fp, r1
    27c8:	211d      	movs	r1, #29
    27ca:	1acb      	subs	r3, r1, r3
    27cc:	4651      	mov	r1, sl
    27ce:	40d9      	lsrs	r1, r3
    27d0:	000b      	movs	r3, r1
    27d2:	4659      	mov	r1, fp
    27d4:	430b      	orrs	r3, r1
    27d6:	4651      	mov	r1, sl
    27d8:	469b      	mov	fp, r3
    27da:	4091      	lsls	r1, r2
    27dc:	4b26      	ldr	r3, [pc, #152]	; (2878 <__aeabi_ddiv+0x1f0>)
    27de:	2200      	movs	r2, #0
    27e0:	1a1b      	subs	r3, r3, r0
    27e2:	e78f      	b.n	2704 <__aeabi_ddiv+0x7c>
    27e4:	2300      	movs	r3, #0
    27e6:	2201      	movs	r2, #1
    27e8:	469b      	mov	fp, r3
    27ea:	e78b      	b.n	2704 <__aeabi_ddiv+0x7c>
    27ec:	4651      	mov	r1, sl
    27ee:	2203      	movs	r2, #3
    27f0:	e788      	b.n	2704 <__aeabi_ddiv+0x7c>
    27f2:	2300      	movs	r3, #0
    27f4:	4698      	mov	r8, r3
    27f6:	3301      	adds	r3, #1
    27f8:	2604      	movs	r6, #4
    27fa:	2400      	movs	r4, #0
    27fc:	9303      	str	r3, [sp, #12]
    27fe:	e767      	b.n	26d0 <__aeabi_ddiv+0x48>
    2800:	2303      	movs	r3, #3
    2802:	46b1      	mov	r9, r6
    2804:	9303      	str	r3, [sp, #12]
    2806:	260c      	movs	r6, #12
    2808:	e762      	b.n	26d0 <__aeabi_ddiv+0x48>
    280a:	2a03      	cmp	r2, #3
    280c:	d100      	bne.n	2810 <__aeabi_ddiv+0x188>
    280e:	e25c      	b.n	2cca <__aeabi_ddiv+0x642>
    2810:	9b01      	ldr	r3, [sp, #4]
    2812:	2a01      	cmp	r2, #1
    2814:	d000      	beq.n	2818 <__aeabi_ddiv+0x190>
    2816:	e1e4      	b.n	2be2 <__aeabi_ddiv+0x55a>
    2818:	4013      	ands	r3, r2
    281a:	469c      	mov	ip, r3
    281c:	2300      	movs	r3, #0
    281e:	2400      	movs	r4, #0
    2820:	2200      	movs	r2, #0
    2822:	4698      	mov	r8, r3
    2824:	2100      	movs	r1, #0
    2826:	0312      	lsls	r2, r2, #12
    2828:	0b13      	lsrs	r3, r2, #12
    282a:	0d0a      	lsrs	r2, r1, #20
    282c:	0512      	lsls	r2, r2, #20
    282e:	431a      	orrs	r2, r3
    2830:	0523      	lsls	r3, r4, #20
    2832:	4c12      	ldr	r4, [pc, #72]	; (287c <__aeabi_ddiv+0x1f4>)
    2834:	4640      	mov	r0, r8
    2836:	4022      	ands	r2, r4
    2838:	4313      	orrs	r3, r2
    283a:	4662      	mov	r2, ip
    283c:	005b      	lsls	r3, r3, #1
    283e:	07d2      	lsls	r2, r2, #31
    2840:	085b      	lsrs	r3, r3, #1
    2842:	4313      	orrs	r3, r2
    2844:	0019      	movs	r1, r3
    2846:	b007      	add	sp, #28
    2848:	bc3c      	pop	{r2, r3, r4, r5}
    284a:	4690      	mov	r8, r2
    284c:	4699      	mov	r9, r3
    284e:	46a2      	mov	sl, r4
    2850:	46ab      	mov	fp, r5
    2852:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2854:	2300      	movs	r3, #0
    2856:	2280      	movs	r2, #128	; 0x80
    2858:	469c      	mov	ip, r3
    285a:	0312      	lsls	r2, r2, #12
    285c:	4698      	mov	r8, r3
    285e:	4c03      	ldr	r4, [pc, #12]	; (286c <__aeabi_ddiv+0x1e4>)
    2860:	e7e0      	b.n	2824 <__aeabi_ddiv+0x19c>
    2862:	2300      	movs	r3, #0
    2864:	4c01      	ldr	r4, [pc, #4]	; (286c <__aeabi_ddiv+0x1e4>)
    2866:	2200      	movs	r2, #0
    2868:	4698      	mov	r8, r3
    286a:	e7db      	b.n	2824 <__aeabi_ddiv+0x19c>
    286c:	000007ff 	.word	0x000007ff
    2870:	fffffc01 	.word	0xfffffc01
    2874:	000037e8 	.word	0x000037e8
    2878:	fffffc0d 	.word	0xfffffc0d
    287c:	800fffff 	.word	0x800fffff
    2880:	45d9      	cmp	r9, fp
    2882:	d900      	bls.n	2886 <__aeabi_ddiv+0x1fe>
    2884:	e139      	b.n	2afa <__aeabi_ddiv+0x472>
    2886:	d100      	bne.n	288a <__aeabi_ddiv+0x202>
    2888:	e134      	b.n	2af4 <__aeabi_ddiv+0x46c>
    288a:	2300      	movs	r3, #0
    288c:	4646      	mov	r6, r8
    288e:	464d      	mov	r5, r9
    2890:	469a      	mov	sl, r3
    2892:	3c01      	subs	r4, #1
    2894:	465b      	mov	r3, fp
    2896:	0e0a      	lsrs	r2, r1, #24
    2898:	021b      	lsls	r3, r3, #8
    289a:	431a      	orrs	r2, r3
    289c:	020b      	lsls	r3, r1, #8
    289e:	0c17      	lsrs	r7, r2, #16
    28a0:	9303      	str	r3, [sp, #12]
    28a2:	0413      	lsls	r3, r2, #16
    28a4:	0c1b      	lsrs	r3, r3, #16
    28a6:	0039      	movs	r1, r7
    28a8:	0028      	movs	r0, r5
    28aa:	4690      	mov	r8, r2
    28ac:	9301      	str	r3, [sp, #4]
    28ae:	f7ff fa09 	bl	1cc4 <__udivsi3>
    28b2:	0002      	movs	r2, r0
    28b4:	9b01      	ldr	r3, [sp, #4]
    28b6:	4683      	mov	fp, r0
    28b8:	435a      	muls	r2, r3
    28ba:	0028      	movs	r0, r5
    28bc:	0039      	movs	r1, r7
    28be:	4691      	mov	r9, r2
    28c0:	f7ff fa86 	bl	1dd0 <__aeabi_uidivmod>
    28c4:	0c35      	lsrs	r5, r6, #16
    28c6:	0409      	lsls	r1, r1, #16
    28c8:	430d      	orrs	r5, r1
    28ca:	45a9      	cmp	r9, r5
    28cc:	d90d      	bls.n	28ea <__aeabi_ddiv+0x262>
    28ce:	465b      	mov	r3, fp
    28d0:	4445      	add	r5, r8
    28d2:	3b01      	subs	r3, #1
    28d4:	45a8      	cmp	r8, r5
    28d6:	d900      	bls.n	28da <__aeabi_ddiv+0x252>
    28d8:	e13a      	b.n	2b50 <__aeabi_ddiv+0x4c8>
    28da:	45a9      	cmp	r9, r5
    28dc:	d800      	bhi.n	28e0 <__aeabi_ddiv+0x258>
    28de:	e137      	b.n	2b50 <__aeabi_ddiv+0x4c8>
    28e0:	2302      	movs	r3, #2
    28e2:	425b      	negs	r3, r3
    28e4:	469c      	mov	ip, r3
    28e6:	4445      	add	r5, r8
    28e8:	44e3      	add	fp, ip
    28ea:	464b      	mov	r3, r9
    28ec:	1aeb      	subs	r3, r5, r3
    28ee:	0039      	movs	r1, r7
    28f0:	0018      	movs	r0, r3
    28f2:	9304      	str	r3, [sp, #16]
    28f4:	f7ff f9e6 	bl	1cc4 <__udivsi3>
    28f8:	9b01      	ldr	r3, [sp, #4]
    28fa:	0005      	movs	r5, r0
    28fc:	4343      	muls	r3, r0
    28fe:	0039      	movs	r1, r7
    2900:	9804      	ldr	r0, [sp, #16]
    2902:	4699      	mov	r9, r3
    2904:	f7ff fa64 	bl	1dd0 <__aeabi_uidivmod>
    2908:	0433      	lsls	r3, r6, #16
    290a:	0409      	lsls	r1, r1, #16
    290c:	0c1b      	lsrs	r3, r3, #16
    290e:	430b      	orrs	r3, r1
    2910:	4599      	cmp	r9, r3
    2912:	d909      	bls.n	2928 <__aeabi_ddiv+0x2a0>
    2914:	4443      	add	r3, r8
    2916:	1e6a      	subs	r2, r5, #1
    2918:	4598      	cmp	r8, r3
    291a:	d900      	bls.n	291e <__aeabi_ddiv+0x296>
    291c:	e11a      	b.n	2b54 <__aeabi_ddiv+0x4cc>
    291e:	4599      	cmp	r9, r3
    2920:	d800      	bhi.n	2924 <__aeabi_ddiv+0x29c>
    2922:	e117      	b.n	2b54 <__aeabi_ddiv+0x4cc>
    2924:	3d02      	subs	r5, #2
    2926:	4443      	add	r3, r8
    2928:	464a      	mov	r2, r9
    292a:	1a9b      	subs	r3, r3, r2
    292c:	465a      	mov	r2, fp
    292e:	0412      	lsls	r2, r2, #16
    2930:	432a      	orrs	r2, r5
    2932:	9903      	ldr	r1, [sp, #12]
    2934:	4693      	mov	fp, r2
    2936:	0c10      	lsrs	r0, r2, #16
    2938:	0c0a      	lsrs	r2, r1, #16
    293a:	4691      	mov	r9, r2
    293c:	0409      	lsls	r1, r1, #16
    293e:	465a      	mov	r2, fp
    2940:	0c09      	lsrs	r1, r1, #16
    2942:	464e      	mov	r6, r9
    2944:	000d      	movs	r5, r1
    2946:	0412      	lsls	r2, r2, #16
    2948:	0c12      	lsrs	r2, r2, #16
    294a:	4345      	muls	r5, r0
    294c:	9105      	str	r1, [sp, #20]
    294e:	4351      	muls	r1, r2
    2950:	4372      	muls	r2, r6
    2952:	4370      	muls	r0, r6
    2954:	1952      	adds	r2, r2, r5
    2956:	0c0e      	lsrs	r6, r1, #16
    2958:	18b2      	adds	r2, r6, r2
    295a:	4295      	cmp	r5, r2
    295c:	d903      	bls.n	2966 <__aeabi_ddiv+0x2de>
    295e:	2580      	movs	r5, #128	; 0x80
    2960:	026d      	lsls	r5, r5, #9
    2962:	46ac      	mov	ip, r5
    2964:	4460      	add	r0, ip
    2966:	0c15      	lsrs	r5, r2, #16
    2968:	0409      	lsls	r1, r1, #16
    296a:	0412      	lsls	r2, r2, #16
    296c:	0c09      	lsrs	r1, r1, #16
    296e:	1828      	adds	r0, r5, r0
    2970:	1852      	adds	r2, r2, r1
    2972:	4283      	cmp	r3, r0
    2974:	d200      	bcs.n	2978 <__aeabi_ddiv+0x2f0>
    2976:	e0ce      	b.n	2b16 <__aeabi_ddiv+0x48e>
    2978:	d100      	bne.n	297c <__aeabi_ddiv+0x2f4>
    297a:	e0c8      	b.n	2b0e <__aeabi_ddiv+0x486>
    297c:	1a1d      	subs	r5, r3, r0
    297e:	4653      	mov	r3, sl
    2980:	1a9e      	subs	r6, r3, r2
    2982:	45b2      	cmp	sl, r6
    2984:	4192      	sbcs	r2, r2
    2986:	4252      	negs	r2, r2
    2988:	1aab      	subs	r3, r5, r2
    298a:	469a      	mov	sl, r3
    298c:	4598      	cmp	r8, r3
    298e:	d100      	bne.n	2992 <__aeabi_ddiv+0x30a>
    2990:	e117      	b.n	2bc2 <__aeabi_ddiv+0x53a>
    2992:	0039      	movs	r1, r7
    2994:	0018      	movs	r0, r3
    2996:	f7ff f995 	bl	1cc4 <__udivsi3>
    299a:	9b01      	ldr	r3, [sp, #4]
    299c:	0005      	movs	r5, r0
    299e:	4343      	muls	r3, r0
    29a0:	0039      	movs	r1, r7
    29a2:	4650      	mov	r0, sl
    29a4:	9304      	str	r3, [sp, #16]
    29a6:	f7ff fa13 	bl	1dd0 <__aeabi_uidivmod>
    29aa:	9804      	ldr	r0, [sp, #16]
    29ac:	040b      	lsls	r3, r1, #16
    29ae:	0c31      	lsrs	r1, r6, #16
    29b0:	4319      	orrs	r1, r3
    29b2:	4288      	cmp	r0, r1
    29b4:	d909      	bls.n	29ca <__aeabi_ddiv+0x342>
    29b6:	4441      	add	r1, r8
    29b8:	1e6b      	subs	r3, r5, #1
    29ba:	4588      	cmp	r8, r1
    29bc:	d900      	bls.n	29c0 <__aeabi_ddiv+0x338>
    29be:	e107      	b.n	2bd0 <__aeabi_ddiv+0x548>
    29c0:	4288      	cmp	r0, r1
    29c2:	d800      	bhi.n	29c6 <__aeabi_ddiv+0x33e>
    29c4:	e104      	b.n	2bd0 <__aeabi_ddiv+0x548>
    29c6:	3d02      	subs	r5, #2
    29c8:	4441      	add	r1, r8
    29ca:	9b04      	ldr	r3, [sp, #16]
    29cc:	1acb      	subs	r3, r1, r3
    29ce:	0018      	movs	r0, r3
    29d0:	0039      	movs	r1, r7
    29d2:	9304      	str	r3, [sp, #16]
    29d4:	f7ff f976 	bl	1cc4 <__udivsi3>
    29d8:	9b01      	ldr	r3, [sp, #4]
    29da:	4682      	mov	sl, r0
    29dc:	4343      	muls	r3, r0
    29de:	0039      	movs	r1, r7
    29e0:	9804      	ldr	r0, [sp, #16]
    29e2:	9301      	str	r3, [sp, #4]
    29e4:	f7ff f9f4 	bl	1dd0 <__aeabi_uidivmod>
    29e8:	9801      	ldr	r0, [sp, #4]
    29ea:	040b      	lsls	r3, r1, #16
    29ec:	0431      	lsls	r1, r6, #16
    29ee:	0c09      	lsrs	r1, r1, #16
    29f0:	4319      	orrs	r1, r3
    29f2:	4288      	cmp	r0, r1
    29f4:	d90d      	bls.n	2a12 <__aeabi_ddiv+0x38a>
    29f6:	4653      	mov	r3, sl
    29f8:	4441      	add	r1, r8
    29fa:	3b01      	subs	r3, #1
    29fc:	4588      	cmp	r8, r1
    29fe:	d900      	bls.n	2a02 <__aeabi_ddiv+0x37a>
    2a00:	e0e8      	b.n	2bd4 <__aeabi_ddiv+0x54c>
    2a02:	4288      	cmp	r0, r1
    2a04:	d800      	bhi.n	2a08 <__aeabi_ddiv+0x380>
    2a06:	e0e5      	b.n	2bd4 <__aeabi_ddiv+0x54c>
    2a08:	2302      	movs	r3, #2
    2a0a:	425b      	negs	r3, r3
    2a0c:	469c      	mov	ip, r3
    2a0e:	4441      	add	r1, r8
    2a10:	44e2      	add	sl, ip
    2a12:	9b01      	ldr	r3, [sp, #4]
    2a14:	042d      	lsls	r5, r5, #16
    2a16:	1ace      	subs	r6, r1, r3
    2a18:	4651      	mov	r1, sl
    2a1a:	4329      	orrs	r1, r5
    2a1c:	9d05      	ldr	r5, [sp, #20]
    2a1e:	464f      	mov	r7, r9
    2a20:	002a      	movs	r2, r5
    2a22:	040b      	lsls	r3, r1, #16
    2a24:	0c08      	lsrs	r0, r1, #16
    2a26:	0c1b      	lsrs	r3, r3, #16
    2a28:	435a      	muls	r2, r3
    2a2a:	4345      	muls	r5, r0
    2a2c:	437b      	muls	r3, r7
    2a2e:	4378      	muls	r0, r7
    2a30:	195b      	adds	r3, r3, r5
    2a32:	0c17      	lsrs	r7, r2, #16
    2a34:	18fb      	adds	r3, r7, r3
    2a36:	429d      	cmp	r5, r3
    2a38:	d903      	bls.n	2a42 <__aeabi_ddiv+0x3ba>
    2a3a:	2580      	movs	r5, #128	; 0x80
    2a3c:	026d      	lsls	r5, r5, #9
    2a3e:	46ac      	mov	ip, r5
    2a40:	4460      	add	r0, ip
    2a42:	0c1d      	lsrs	r5, r3, #16
    2a44:	0412      	lsls	r2, r2, #16
    2a46:	041b      	lsls	r3, r3, #16
    2a48:	0c12      	lsrs	r2, r2, #16
    2a4a:	1828      	adds	r0, r5, r0
    2a4c:	189b      	adds	r3, r3, r2
    2a4e:	4286      	cmp	r6, r0
    2a50:	d200      	bcs.n	2a54 <__aeabi_ddiv+0x3cc>
    2a52:	e093      	b.n	2b7c <__aeabi_ddiv+0x4f4>
    2a54:	d100      	bne.n	2a58 <__aeabi_ddiv+0x3d0>
    2a56:	e08e      	b.n	2b76 <__aeabi_ddiv+0x4ee>
    2a58:	2301      	movs	r3, #1
    2a5a:	4319      	orrs	r1, r3
    2a5c:	4ba0      	ldr	r3, [pc, #640]	; (2ce0 <__aeabi_ddiv+0x658>)
    2a5e:	18e3      	adds	r3, r4, r3
    2a60:	2b00      	cmp	r3, #0
    2a62:	dc00      	bgt.n	2a66 <__aeabi_ddiv+0x3de>
    2a64:	e099      	b.n	2b9a <__aeabi_ddiv+0x512>
    2a66:	074a      	lsls	r2, r1, #29
    2a68:	d000      	beq.n	2a6c <__aeabi_ddiv+0x3e4>
    2a6a:	e09e      	b.n	2baa <__aeabi_ddiv+0x522>
    2a6c:	465a      	mov	r2, fp
    2a6e:	01d2      	lsls	r2, r2, #7
    2a70:	d506      	bpl.n	2a80 <__aeabi_ddiv+0x3f8>
    2a72:	465a      	mov	r2, fp
    2a74:	4b9b      	ldr	r3, [pc, #620]	; (2ce4 <__aeabi_ddiv+0x65c>)
    2a76:	401a      	ands	r2, r3
    2a78:	2380      	movs	r3, #128	; 0x80
    2a7a:	4693      	mov	fp, r2
    2a7c:	00db      	lsls	r3, r3, #3
    2a7e:	18e3      	adds	r3, r4, r3
    2a80:	4a99      	ldr	r2, [pc, #612]	; (2ce8 <__aeabi_ddiv+0x660>)
    2a82:	4293      	cmp	r3, r2
    2a84:	dd68      	ble.n	2b58 <__aeabi_ddiv+0x4d0>
    2a86:	2301      	movs	r3, #1
    2a88:	9a02      	ldr	r2, [sp, #8]
    2a8a:	4c98      	ldr	r4, [pc, #608]	; (2cec <__aeabi_ddiv+0x664>)
    2a8c:	401a      	ands	r2, r3
    2a8e:	2300      	movs	r3, #0
    2a90:	4694      	mov	ip, r2
    2a92:	4698      	mov	r8, r3
    2a94:	2200      	movs	r2, #0
    2a96:	e6c5      	b.n	2824 <__aeabi_ddiv+0x19c>
    2a98:	2280      	movs	r2, #128	; 0x80
    2a9a:	464b      	mov	r3, r9
    2a9c:	0312      	lsls	r2, r2, #12
    2a9e:	4213      	tst	r3, r2
    2aa0:	d00a      	beq.n	2ab8 <__aeabi_ddiv+0x430>
    2aa2:	465b      	mov	r3, fp
    2aa4:	4213      	tst	r3, r2
    2aa6:	d106      	bne.n	2ab6 <__aeabi_ddiv+0x42e>
    2aa8:	431a      	orrs	r2, r3
    2aaa:	0312      	lsls	r2, r2, #12
    2aac:	0b12      	lsrs	r2, r2, #12
    2aae:	46ac      	mov	ip, r5
    2ab0:	4688      	mov	r8, r1
    2ab2:	4c8e      	ldr	r4, [pc, #568]	; (2cec <__aeabi_ddiv+0x664>)
    2ab4:	e6b6      	b.n	2824 <__aeabi_ddiv+0x19c>
    2ab6:	464b      	mov	r3, r9
    2ab8:	431a      	orrs	r2, r3
    2aba:	0312      	lsls	r2, r2, #12
    2abc:	0b12      	lsrs	r2, r2, #12
    2abe:	46bc      	mov	ip, r7
    2ac0:	4c8a      	ldr	r4, [pc, #552]	; (2cec <__aeabi_ddiv+0x664>)
    2ac2:	e6af      	b.n	2824 <__aeabi_ddiv+0x19c>
    2ac4:	0003      	movs	r3, r0
    2ac6:	465a      	mov	r2, fp
    2ac8:	3b28      	subs	r3, #40	; 0x28
    2aca:	409a      	lsls	r2, r3
    2acc:	2300      	movs	r3, #0
    2ace:	4691      	mov	r9, r2
    2ad0:	4698      	mov	r8, r3
    2ad2:	e657      	b.n	2784 <__aeabi_ddiv+0xfc>
    2ad4:	4658      	mov	r0, fp
    2ad6:	f000 fdcf 	bl	3678 <__clzsi2>
    2ada:	3020      	adds	r0, #32
    2adc:	e640      	b.n	2760 <__aeabi_ddiv+0xd8>
    2ade:	0003      	movs	r3, r0
    2ae0:	4652      	mov	r2, sl
    2ae2:	3b28      	subs	r3, #40	; 0x28
    2ae4:	409a      	lsls	r2, r3
    2ae6:	2100      	movs	r1, #0
    2ae8:	4693      	mov	fp, r2
    2aea:	e677      	b.n	27dc <__aeabi_ddiv+0x154>
    2aec:	f000 fdc4 	bl	3678 <__clzsi2>
    2af0:	3020      	adds	r0, #32
    2af2:	e65f      	b.n	27b4 <__aeabi_ddiv+0x12c>
    2af4:	4588      	cmp	r8, r1
    2af6:	d200      	bcs.n	2afa <__aeabi_ddiv+0x472>
    2af8:	e6c7      	b.n	288a <__aeabi_ddiv+0x202>
    2afa:	464b      	mov	r3, r9
    2afc:	07de      	lsls	r6, r3, #31
    2afe:	085d      	lsrs	r5, r3, #1
    2b00:	4643      	mov	r3, r8
    2b02:	085b      	lsrs	r3, r3, #1
    2b04:	431e      	orrs	r6, r3
    2b06:	4643      	mov	r3, r8
    2b08:	07db      	lsls	r3, r3, #31
    2b0a:	469a      	mov	sl, r3
    2b0c:	e6c2      	b.n	2894 <__aeabi_ddiv+0x20c>
    2b0e:	2500      	movs	r5, #0
    2b10:	4592      	cmp	sl, r2
    2b12:	d300      	bcc.n	2b16 <__aeabi_ddiv+0x48e>
    2b14:	e733      	b.n	297e <__aeabi_ddiv+0x2f6>
    2b16:	9e03      	ldr	r6, [sp, #12]
    2b18:	4659      	mov	r1, fp
    2b1a:	46b4      	mov	ip, r6
    2b1c:	44e2      	add	sl, ip
    2b1e:	45b2      	cmp	sl, r6
    2b20:	41ad      	sbcs	r5, r5
    2b22:	426d      	negs	r5, r5
    2b24:	4445      	add	r5, r8
    2b26:	18eb      	adds	r3, r5, r3
    2b28:	3901      	subs	r1, #1
    2b2a:	4598      	cmp	r8, r3
    2b2c:	d207      	bcs.n	2b3e <__aeabi_ddiv+0x4b6>
    2b2e:	4298      	cmp	r0, r3
    2b30:	d900      	bls.n	2b34 <__aeabi_ddiv+0x4ac>
    2b32:	e07f      	b.n	2c34 <__aeabi_ddiv+0x5ac>
    2b34:	d100      	bne.n	2b38 <__aeabi_ddiv+0x4b0>
    2b36:	e0bc      	b.n	2cb2 <__aeabi_ddiv+0x62a>
    2b38:	1a1d      	subs	r5, r3, r0
    2b3a:	468b      	mov	fp, r1
    2b3c:	e71f      	b.n	297e <__aeabi_ddiv+0x2f6>
    2b3e:	4598      	cmp	r8, r3
    2b40:	d1fa      	bne.n	2b38 <__aeabi_ddiv+0x4b0>
    2b42:	9d03      	ldr	r5, [sp, #12]
    2b44:	4555      	cmp	r5, sl
    2b46:	d9f2      	bls.n	2b2e <__aeabi_ddiv+0x4a6>
    2b48:	4643      	mov	r3, r8
    2b4a:	468b      	mov	fp, r1
    2b4c:	1a1d      	subs	r5, r3, r0
    2b4e:	e716      	b.n	297e <__aeabi_ddiv+0x2f6>
    2b50:	469b      	mov	fp, r3
    2b52:	e6ca      	b.n	28ea <__aeabi_ddiv+0x262>
    2b54:	0015      	movs	r5, r2
    2b56:	e6e7      	b.n	2928 <__aeabi_ddiv+0x2a0>
    2b58:	465a      	mov	r2, fp
    2b5a:	08c9      	lsrs	r1, r1, #3
    2b5c:	0752      	lsls	r2, r2, #29
    2b5e:	430a      	orrs	r2, r1
    2b60:	055b      	lsls	r3, r3, #21
    2b62:	4690      	mov	r8, r2
    2b64:	0d5c      	lsrs	r4, r3, #21
    2b66:	465a      	mov	r2, fp
    2b68:	2301      	movs	r3, #1
    2b6a:	9902      	ldr	r1, [sp, #8]
    2b6c:	0252      	lsls	r2, r2, #9
    2b6e:	4019      	ands	r1, r3
    2b70:	0b12      	lsrs	r2, r2, #12
    2b72:	468c      	mov	ip, r1
    2b74:	e656      	b.n	2824 <__aeabi_ddiv+0x19c>
    2b76:	2b00      	cmp	r3, #0
    2b78:	d100      	bne.n	2b7c <__aeabi_ddiv+0x4f4>
    2b7a:	e76f      	b.n	2a5c <__aeabi_ddiv+0x3d4>
    2b7c:	4446      	add	r6, r8
    2b7e:	1e4a      	subs	r2, r1, #1
    2b80:	45b0      	cmp	r8, r6
    2b82:	d929      	bls.n	2bd8 <__aeabi_ddiv+0x550>
    2b84:	0011      	movs	r1, r2
    2b86:	4286      	cmp	r6, r0
    2b88:	d000      	beq.n	2b8c <__aeabi_ddiv+0x504>
    2b8a:	e765      	b.n	2a58 <__aeabi_ddiv+0x3d0>
    2b8c:	9a03      	ldr	r2, [sp, #12]
    2b8e:	4293      	cmp	r3, r2
    2b90:	d000      	beq.n	2b94 <__aeabi_ddiv+0x50c>
    2b92:	e761      	b.n	2a58 <__aeabi_ddiv+0x3d0>
    2b94:	e762      	b.n	2a5c <__aeabi_ddiv+0x3d4>
    2b96:	2101      	movs	r1, #1
    2b98:	4249      	negs	r1, r1
    2b9a:	2001      	movs	r0, #1
    2b9c:	1ac2      	subs	r2, r0, r3
    2b9e:	2a38      	cmp	r2, #56	; 0x38
    2ba0:	dd21      	ble.n	2be6 <__aeabi_ddiv+0x55e>
    2ba2:	9b02      	ldr	r3, [sp, #8]
    2ba4:	4003      	ands	r3, r0
    2ba6:	469c      	mov	ip, r3
    2ba8:	e638      	b.n	281c <__aeabi_ddiv+0x194>
    2baa:	220f      	movs	r2, #15
    2bac:	400a      	ands	r2, r1
    2bae:	2a04      	cmp	r2, #4
    2bb0:	d100      	bne.n	2bb4 <__aeabi_ddiv+0x52c>
    2bb2:	e75b      	b.n	2a6c <__aeabi_ddiv+0x3e4>
    2bb4:	000a      	movs	r2, r1
    2bb6:	1d11      	adds	r1, r2, #4
    2bb8:	4291      	cmp	r1, r2
    2bba:	4192      	sbcs	r2, r2
    2bbc:	4252      	negs	r2, r2
    2bbe:	4493      	add	fp, r2
    2bc0:	e754      	b.n	2a6c <__aeabi_ddiv+0x3e4>
    2bc2:	4b47      	ldr	r3, [pc, #284]	; (2ce0 <__aeabi_ddiv+0x658>)
    2bc4:	18e3      	adds	r3, r4, r3
    2bc6:	2b00      	cmp	r3, #0
    2bc8:	dde5      	ble.n	2b96 <__aeabi_ddiv+0x50e>
    2bca:	2201      	movs	r2, #1
    2bcc:	4252      	negs	r2, r2
    2bce:	e7f2      	b.n	2bb6 <__aeabi_ddiv+0x52e>
    2bd0:	001d      	movs	r5, r3
    2bd2:	e6fa      	b.n	29ca <__aeabi_ddiv+0x342>
    2bd4:	469a      	mov	sl, r3
    2bd6:	e71c      	b.n	2a12 <__aeabi_ddiv+0x38a>
    2bd8:	42b0      	cmp	r0, r6
    2bda:	d839      	bhi.n	2c50 <__aeabi_ddiv+0x5c8>
    2bdc:	d06e      	beq.n	2cbc <__aeabi_ddiv+0x634>
    2bde:	0011      	movs	r1, r2
    2be0:	e73a      	b.n	2a58 <__aeabi_ddiv+0x3d0>
    2be2:	9302      	str	r3, [sp, #8]
    2be4:	e73a      	b.n	2a5c <__aeabi_ddiv+0x3d4>
    2be6:	2a1f      	cmp	r2, #31
    2be8:	dc3c      	bgt.n	2c64 <__aeabi_ddiv+0x5dc>
    2bea:	2320      	movs	r3, #32
    2bec:	1a9b      	subs	r3, r3, r2
    2bee:	000c      	movs	r4, r1
    2bf0:	4658      	mov	r0, fp
    2bf2:	4099      	lsls	r1, r3
    2bf4:	4098      	lsls	r0, r3
    2bf6:	1e4b      	subs	r3, r1, #1
    2bf8:	4199      	sbcs	r1, r3
    2bfa:	465b      	mov	r3, fp
    2bfc:	40d4      	lsrs	r4, r2
    2bfe:	40d3      	lsrs	r3, r2
    2c00:	4320      	orrs	r0, r4
    2c02:	4308      	orrs	r0, r1
    2c04:	001a      	movs	r2, r3
    2c06:	0743      	lsls	r3, r0, #29
    2c08:	d009      	beq.n	2c1e <__aeabi_ddiv+0x596>
    2c0a:	230f      	movs	r3, #15
    2c0c:	4003      	ands	r3, r0
    2c0e:	2b04      	cmp	r3, #4
    2c10:	d005      	beq.n	2c1e <__aeabi_ddiv+0x596>
    2c12:	0001      	movs	r1, r0
    2c14:	1d08      	adds	r0, r1, #4
    2c16:	4288      	cmp	r0, r1
    2c18:	419b      	sbcs	r3, r3
    2c1a:	425b      	negs	r3, r3
    2c1c:	18d2      	adds	r2, r2, r3
    2c1e:	0213      	lsls	r3, r2, #8
    2c20:	d53a      	bpl.n	2c98 <__aeabi_ddiv+0x610>
    2c22:	2301      	movs	r3, #1
    2c24:	9a02      	ldr	r2, [sp, #8]
    2c26:	2401      	movs	r4, #1
    2c28:	401a      	ands	r2, r3
    2c2a:	2300      	movs	r3, #0
    2c2c:	4694      	mov	ip, r2
    2c2e:	4698      	mov	r8, r3
    2c30:	2200      	movs	r2, #0
    2c32:	e5f7      	b.n	2824 <__aeabi_ddiv+0x19c>
    2c34:	2102      	movs	r1, #2
    2c36:	4249      	negs	r1, r1
    2c38:	468c      	mov	ip, r1
    2c3a:	9d03      	ldr	r5, [sp, #12]
    2c3c:	44e3      	add	fp, ip
    2c3e:	46ac      	mov	ip, r5
    2c40:	44e2      	add	sl, ip
    2c42:	45aa      	cmp	sl, r5
    2c44:	41ad      	sbcs	r5, r5
    2c46:	426d      	negs	r5, r5
    2c48:	4445      	add	r5, r8
    2c4a:	18ed      	adds	r5, r5, r3
    2c4c:	1a2d      	subs	r5, r5, r0
    2c4e:	e696      	b.n	297e <__aeabi_ddiv+0x2f6>
    2c50:	1e8a      	subs	r2, r1, #2
    2c52:	9903      	ldr	r1, [sp, #12]
    2c54:	004d      	lsls	r5, r1, #1
    2c56:	428d      	cmp	r5, r1
    2c58:	4189      	sbcs	r1, r1
    2c5a:	4249      	negs	r1, r1
    2c5c:	4441      	add	r1, r8
    2c5e:	1876      	adds	r6, r6, r1
    2c60:	9503      	str	r5, [sp, #12]
    2c62:	e78f      	b.n	2b84 <__aeabi_ddiv+0x4fc>
    2c64:	201f      	movs	r0, #31
    2c66:	4240      	negs	r0, r0
    2c68:	1ac3      	subs	r3, r0, r3
    2c6a:	4658      	mov	r0, fp
    2c6c:	40d8      	lsrs	r0, r3
    2c6e:	0003      	movs	r3, r0
    2c70:	2a20      	cmp	r2, #32
    2c72:	d028      	beq.n	2cc6 <__aeabi_ddiv+0x63e>
    2c74:	2040      	movs	r0, #64	; 0x40
    2c76:	465d      	mov	r5, fp
    2c78:	1a82      	subs	r2, r0, r2
    2c7a:	4095      	lsls	r5, r2
    2c7c:	4329      	orrs	r1, r5
    2c7e:	1e4a      	subs	r2, r1, #1
    2c80:	4191      	sbcs	r1, r2
    2c82:	4319      	orrs	r1, r3
    2c84:	2307      	movs	r3, #7
    2c86:	2200      	movs	r2, #0
    2c88:	400b      	ands	r3, r1
    2c8a:	d009      	beq.n	2ca0 <__aeabi_ddiv+0x618>
    2c8c:	230f      	movs	r3, #15
    2c8e:	2200      	movs	r2, #0
    2c90:	400b      	ands	r3, r1
    2c92:	0008      	movs	r0, r1
    2c94:	2b04      	cmp	r3, #4
    2c96:	d1bd      	bne.n	2c14 <__aeabi_ddiv+0x58c>
    2c98:	0001      	movs	r1, r0
    2c9a:	0753      	lsls	r3, r2, #29
    2c9c:	0252      	lsls	r2, r2, #9
    2c9e:	0b12      	lsrs	r2, r2, #12
    2ca0:	08c9      	lsrs	r1, r1, #3
    2ca2:	4319      	orrs	r1, r3
    2ca4:	2301      	movs	r3, #1
    2ca6:	4688      	mov	r8, r1
    2ca8:	9902      	ldr	r1, [sp, #8]
    2caa:	2400      	movs	r4, #0
    2cac:	4019      	ands	r1, r3
    2cae:	468c      	mov	ip, r1
    2cb0:	e5b8      	b.n	2824 <__aeabi_ddiv+0x19c>
    2cb2:	4552      	cmp	r2, sl
    2cb4:	d8be      	bhi.n	2c34 <__aeabi_ddiv+0x5ac>
    2cb6:	468b      	mov	fp, r1
    2cb8:	2500      	movs	r5, #0
    2cba:	e660      	b.n	297e <__aeabi_ddiv+0x2f6>
    2cbc:	9d03      	ldr	r5, [sp, #12]
    2cbe:	429d      	cmp	r5, r3
    2cc0:	d3c6      	bcc.n	2c50 <__aeabi_ddiv+0x5c8>
    2cc2:	0011      	movs	r1, r2
    2cc4:	e762      	b.n	2b8c <__aeabi_ddiv+0x504>
    2cc6:	2500      	movs	r5, #0
    2cc8:	e7d8      	b.n	2c7c <__aeabi_ddiv+0x5f4>
    2cca:	2280      	movs	r2, #128	; 0x80
    2ccc:	465b      	mov	r3, fp
    2cce:	0312      	lsls	r2, r2, #12
    2cd0:	431a      	orrs	r2, r3
    2cd2:	9b01      	ldr	r3, [sp, #4]
    2cd4:	0312      	lsls	r2, r2, #12
    2cd6:	0b12      	lsrs	r2, r2, #12
    2cd8:	469c      	mov	ip, r3
    2cda:	4688      	mov	r8, r1
    2cdc:	4c03      	ldr	r4, [pc, #12]	; (2cec <__aeabi_ddiv+0x664>)
    2cde:	e5a1      	b.n	2824 <__aeabi_ddiv+0x19c>
    2ce0:	000003ff 	.word	0x000003ff
    2ce4:	feffffff 	.word	0xfeffffff
    2ce8:	000007fe 	.word	0x000007fe
    2cec:	000007ff 	.word	0x000007ff

00002cf0 <__eqdf2>:
    2cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cf2:	464f      	mov	r7, r9
    2cf4:	4646      	mov	r6, r8
    2cf6:	46d6      	mov	lr, sl
    2cf8:	005c      	lsls	r4, r3, #1
    2cfa:	b5c0      	push	{r6, r7, lr}
    2cfc:	031f      	lsls	r7, r3, #12
    2cfe:	0fdb      	lsrs	r3, r3, #31
    2d00:	469a      	mov	sl, r3
    2d02:	4b17      	ldr	r3, [pc, #92]	; (2d60 <__eqdf2+0x70>)
    2d04:	030e      	lsls	r6, r1, #12
    2d06:	004d      	lsls	r5, r1, #1
    2d08:	4684      	mov	ip, r0
    2d0a:	4680      	mov	r8, r0
    2d0c:	0b36      	lsrs	r6, r6, #12
    2d0e:	0d6d      	lsrs	r5, r5, #21
    2d10:	0fc9      	lsrs	r1, r1, #31
    2d12:	4691      	mov	r9, r2
    2d14:	0b3f      	lsrs	r7, r7, #12
    2d16:	0d64      	lsrs	r4, r4, #21
    2d18:	2001      	movs	r0, #1
    2d1a:	429d      	cmp	r5, r3
    2d1c:	d008      	beq.n	2d30 <__eqdf2+0x40>
    2d1e:	429c      	cmp	r4, r3
    2d20:	d001      	beq.n	2d26 <__eqdf2+0x36>
    2d22:	42a5      	cmp	r5, r4
    2d24:	d00b      	beq.n	2d3e <__eqdf2+0x4e>
    2d26:	bc1c      	pop	{r2, r3, r4}
    2d28:	4690      	mov	r8, r2
    2d2a:	4699      	mov	r9, r3
    2d2c:	46a2      	mov	sl, r4
    2d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d30:	4663      	mov	r3, ip
    2d32:	4333      	orrs	r3, r6
    2d34:	d1f7      	bne.n	2d26 <__eqdf2+0x36>
    2d36:	42ac      	cmp	r4, r5
    2d38:	d1f5      	bne.n	2d26 <__eqdf2+0x36>
    2d3a:	433a      	orrs	r2, r7
    2d3c:	d1f3      	bne.n	2d26 <__eqdf2+0x36>
    2d3e:	2001      	movs	r0, #1
    2d40:	42be      	cmp	r6, r7
    2d42:	d1f0      	bne.n	2d26 <__eqdf2+0x36>
    2d44:	45c8      	cmp	r8, r9
    2d46:	d1ee      	bne.n	2d26 <__eqdf2+0x36>
    2d48:	4551      	cmp	r1, sl
    2d4a:	d007      	beq.n	2d5c <__eqdf2+0x6c>
    2d4c:	2d00      	cmp	r5, #0
    2d4e:	d1ea      	bne.n	2d26 <__eqdf2+0x36>
    2d50:	4663      	mov	r3, ip
    2d52:	431e      	orrs	r6, r3
    2d54:	0030      	movs	r0, r6
    2d56:	1e46      	subs	r6, r0, #1
    2d58:	41b0      	sbcs	r0, r6
    2d5a:	e7e4      	b.n	2d26 <__eqdf2+0x36>
    2d5c:	2000      	movs	r0, #0
    2d5e:	e7e2      	b.n	2d26 <__eqdf2+0x36>
    2d60:	000007ff 	.word	0x000007ff

00002d64 <__gedf2>:
    2d64:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d66:	4645      	mov	r5, r8
    2d68:	46de      	mov	lr, fp
    2d6a:	4657      	mov	r7, sl
    2d6c:	464e      	mov	r6, r9
    2d6e:	b5e0      	push	{r5, r6, r7, lr}
    2d70:	031f      	lsls	r7, r3, #12
    2d72:	0b3d      	lsrs	r5, r7, #12
    2d74:	4f2c      	ldr	r7, [pc, #176]	; (2e28 <__gedf2+0xc4>)
    2d76:	030e      	lsls	r6, r1, #12
    2d78:	004c      	lsls	r4, r1, #1
    2d7a:	46ab      	mov	fp, r5
    2d7c:	005d      	lsls	r5, r3, #1
    2d7e:	4684      	mov	ip, r0
    2d80:	0b36      	lsrs	r6, r6, #12
    2d82:	0d64      	lsrs	r4, r4, #21
    2d84:	0fc9      	lsrs	r1, r1, #31
    2d86:	4690      	mov	r8, r2
    2d88:	0d6d      	lsrs	r5, r5, #21
    2d8a:	0fdb      	lsrs	r3, r3, #31
    2d8c:	42bc      	cmp	r4, r7
    2d8e:	d02a      	beq.n	2de6 <__gedf2+0x82>
    2d90:	4f25      	ldr	r7, [pc, #148]	; (2e28 <__gedf2+0xc4>)
    2d92:	42bd      	cmp	r5, r7
    2d94:	d02d      	beq.n	2df2 <__gedf2+0x8e>
    2d96:	2c00      	cmp	r4, #0
    2d98:	d10f      	bne.n	2dba <__gedf2+0x56>
    2d9a:	4330      	orrs	r0, r6
    2d9c:	0007      	movs	r7, r0
    2d9e:	4681      	mov	r9, r0
    2da0:	4278      	negs	r0, r7
    2da2:	4178      	adcs	r0, r7
    2da4:	b2c0      	uxtb	r0, r0
    2da6:	2d00      	cmp	r5, #0
    2da8:	d117      	bne.n	2dda <__gedf2+0x76>
    2daa:	465f      	mov	r7, fp
    2dac:	433a      	orrs	r2, r7
    2dae:	d114      	bne.n	2dda <__gedf2+0x76>
    2db0:	464b      	mov	r3, r9
    2db2:	2000      	movs	r0, #0
    2db4:	2b00      	cmp	r3, #0
    2db6:	d00a      	beq.n	2dce <__gedf2+0x6a>
    2db8:	e006      	b.n	2dc8 <__gedf2+0x64>
    2dba:	2d00      	cmp	r5, #0
    2dbc:	d102      	bne.n	2dc4 <__gedf2+0x60>
    2dbe:	4658      	mov	r0, fp
    2dc0:	4302      	orrs	r2, r0
    2dc2:	d001      	beq.n	2dc8 <__gedf2+0x64>
    2dc4:	4299      	cmp	r1, r3
    2dc6:	d018      	beq.n	2dfa <__gedf2+0x96>
    2dc8:	4248      	negs	r0, r1
    2dca:	2101      	movs	r1, #1
    2dcc:	4308      	orrs	r0, r1
    2dce:	bc3c      	pop	{r2, r3, r4, r5}
    2dd0:	4690      	mov	r8, r2
    2dd2:	4699      	mov	r9, r3
    2dd4:	46a2      	mov	sl, r4
    2dd6:	46ab      	mov	fp, r5
    2dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2dda:	2800      	cmp	r0, #0
    2ddc:	d0f2      	beq.n	2dc4 <__gedf2+0x60>
    2dde:	2001      	movs	r0, #1
    2de0:	3b01      	subs	r3, #1
    2de2:	4318      	orrs	r0, r3
    2de4:	e7f3      	b.n	2dce <__gedf2+0x6a>
    2de6:	0037      	movs	r7, r6
    2de8:	4307      	orrs	r7, r0
    2dea:	d0d1      	beq.n	2d90 <__gedf2+0x2c>
    2dec:	2002      	movs	r0, #2
    2dee:	4240      	negs	r0, r0
    2df0:	e7ed      	b.n	2dce <__gedf2+0x6a>
    2df2:	465f      	mov	r7, fp
    2df4:	4317      	orrs	r7, r2
    2df6:	d0ce      	beq.n	2d96 <__gedf2+0x32>
    2df8:	e7f8      	b.n	2dec <__gedf2+0x88>
    2dfa:	42ac      	cmp	r4, r5
    2dfc:	dce4      	bgt.n	2dc8 <__gedf2+0x64>
    2dfe:	da03      	bge.n	2e08 <__gedf2+0xa4>
    2e00:	1e48      	subs	r0, r1, #1
    2e02:	2101      	movs	r1, #1
    2e04:	4308      	orrs	r0, r1
    2e06:	e7e2      	b.n	2dce <__gedf2+0x6a>
    2e08:	455e      	cmp	r6, fp
    2e0a:	d8dd      	bhi.n	2dc8 <__gedf2+0x64>
    2e0c:	d006      	beq.n	2e1c <__gedf2+0xb8>
    2e0e:	2000      	movs	r0, #0
    2e10:	455e      	cmp	r6, fp
    2e12:	d2dc      	bcs.n	2dce <__gedf2+0x6a>
    2e14:	2301      	movs	r3, #1
    2e16:	1e48      	subs	r0, r1, #1
    2e18:	4318      	orrs	r0, r3
    2e1a:	e7d8      	b.n	2dce <__gedf2+0x6a>
    2e1c:	45c4      	cmp	ip, r8
    2e1e:	d8d3      	bhi.n	2dc8 <__gedf2+0x64>
    2e20:	2000      	movs	r0, #0
    2e22:	45c4      	cmp	ip, r8
    2e24:	d3f6      	bcc.n	2e14 <__gedf2+0xb0>
    2e26:	e7d2      	b.n	2dce <__gedf2+0x6a>
    2e28:	000007ff 	.word	0x000007ff

00002e2c <__ledf2>:
    2e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e2e:	464e      	mov	r6, r9
    2e30:	4645      	mov	r5, r8
    2e32:	46de      	mov	lr, fp
    2e34:	4657      	mov	r7, sl
    2e36:	005c      	lsls	r4, r3, #1
    2e38:	b5e0      	push	{r5, r6, r7, lr}
    2e3a:	031f      	lsls	r7, r3, #12
    2e3c:	0fdb      	lsrs	r3, r3, #31
    2e3e:	4699      	mov	r9, r3
    2e40:	4b2a      	ldr	r3, [pc, #168]	; (2eec <__ledf2+0xc0>)
    2e42:	030e      	lsls	r6, r1, #12
    2e44:	004d      	lsls	r5, r1, #1
    2e46:	0fc9      	lsrs	r1, r1, #31
    2e48:	4684      	mov	ip, r0
    2e4a:	0b36      	lsrs	r6, r6, #12
    2e4c:	0d6d      	lsrs	r5, r5, #21
    2e4e:	468b      	mov	fp, r1
    2e50:	4690      	mov	r8, r2
    2e52:	0b3f      	lsrs	r7, r7, #12
    2e54:	0d64      	lsrs	r4, r4, #21
    2e56:	429d      	cmp	r5, r3
    2e58:	d020      	beq.n	2e9c <__ledf2+0x70>
    2e5a:	4b24      	ldr	r3, [pc, #144]	; (2eec <__ledf2+0xc0>)
    2e5c:	429c      	cmp	r4, r3
    2e5e:	d022      	beq.n	2ea6 <__ledf2+0x7a>
    2e60:	2d00      	cmp	r5, #0
    2e62:	d112      	bne.n	2e8a <__ledf2+0x5e>
    2e64:	4330      	orrs	r0, r6
    2e66:	4243      	negs	r3, r0
    2e68:	4143      	adcs	r3, r0
    2e6a:	b2db      	uxtb	r3, r3
    2e6c:	2c00      	cmp	r4, #0
    2e6e:	d01f      	beq.n	2eb0 <__ledf2+0x84>
    2e70:	2b00      	cmp	r3, #0
    2e72:	d00c      	beq.n	2e8e <__ledf2+0x62>
    2e74:	464b      	mov	r3, r9
    2e76:	2001      	movs	r0, #1
    2e78:	3b01      	subs	r3, #1
    2e7a:	4303      	orrs	r3, r0
    2e7c:	0018      	movs	r0, r3
    2e7e:	bc3c      	pop	{r2, r3, r4, r5}
    2e80:	4690      	mov	r8, r2
    2e82:	4699      	mov	r9, r3
    2e84:	46a2      	mov	sl, r4
    2e86:	46ab      	mov	fp, r5
    2e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e8a:	2c00      	cmp	r4, #0
    2e8c:	d016      	beq.n	2ebc <__ledf2+0x90>
    2e8e:	45cb      	cmp	fp, r9
    2e90:	d017      	beq.n	2ec2 <__ledf2+0x96>
    2e92:	465b      	mov	r3, fp
    2e94:	4259      	negs	r1, r3
    2e96:	2301      	movs	r3, #1
    2e98:	430b      	orrs	r3, r1
    2e9a:	e7ef      	b.n	2e7c <__ledf2+0x50>
    2e9c:	0031      	movs	r1, r6
    2e9e:	2302      	movs	r3, #2
    2ea0:	4301      	orrs	r1, r0
    2ea2:	d1eb      	bne.n	2e7c <__ledf2+0x50>
    2ea4:	e7d9      	b.n	2e5a <__ledf2+0x2e>
    2ea6:	0039      	movs	r1, r7
    2ea8:	2302      	movs	r3, #2
    2eaa:	4311      	orrs	r1, r2
    2eac:	d1e6      	bne.n	2e7c <__ledf2+0x50>
    2eae:	e7d7      	b.n	2e60 <__ledf2+0x34>
    2eb0:	433a      	orrs	r2, r7
    2eb2:	d1dd      	bne.n	2e70 <__ledf2+0x44>
    2eb4:	2300      	movs	r3, #0
    2eb6:	2800      	cmp	r0, #0
    2eb8:	d0e0      	beq.n	2e7c <__ledf2+0x50>
    2eba:	e7ea      	b.n	2e92 <__ledf2+0x66>
    2ebc:	433a      	orrs	r2, r7
    2ebe:	d1e6      	bne.n	2e8e <__ledf2+0x62>
    2ec0:	e7e7      	b.n	2e92 <__ledf2+0x66>
    2ec2:	42a5      	cmp	r5, r4
    2ec4:	dce5      	bgt.n	2e92 <__ledf2+0x66>
    2ec6:	db05      	blt.n	2ed4 <__ledf2+0xa8>
    2ec8:	42be      	cmp	r6, r7
    2eca:	d8e2      	bhi.n	2e92 <__ledf2+0x66>
    2ecc:	d007      	beq.n	2ede <__ledf2+0xb2>
    2ece:	2300      	movs	r3, #0
    2ed0:	42be      	cmp	r6, r7
    2ed2:	d2d3      	bcs.n	2e7c <__ledf2+0x50>
    2ed4:	4659      	mov	r1, fp
    2ed6:	2301      	movs	r3, #1
    2ed8:	3901      	subs	r1, #1
    2eda:	430b      	orrs	r3, r1
    2edc:	e7ce      	b.n	2e7c <__ledf2+0x50>
    2ede:	45c4      	cmp	ip, r8
    2ee0:	d8d7      	bhi.n	2e92 <__ledf2+0x66>
    2ee2:	2300      	movs	r3, #0
    2ee4:	45c4      	cmp	ip, r8
    2ee6:	d3f5      	bcc.n	2ed4 <__ledf2+0xa8>
    2ee8:	e7c8      	b.n	2e7c <__ledf2+0x50>
    2eea:	46c0      	nop			; (mov r8, r8)
    2eec:	000007ff 	.word	0x000007ff

00002ef0 <__aeabi_dsub>:
    2ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ef2:	4646      	mov	r6, r8
    2ef4:	46d6      	mov	lr, sl
    2ef6:	464f      	mov	r7, r9
    2ef8:	030c      	lsls	r4, r1, #12
    2efa:	b5c0      	push	{r6, r7, lr}
    2efc:	0fcd      	lsrs	r5, r1, #31
    2efe:	004e      	lsls	r6, r1, #1
    2f00:	0a61      	lsrs	r1, r4, #9
    2f02:	0f44      	lsrs	r4, r0, #29
    2f04:	430c      	orrs	r4, r1
    2f06:	00c1      	lsls	r1, r0, #3
    2f08:	0058      	lsls	r0, r3, #1
    2f0a:	0d40      	lsrs	r0, r0, #21
    2f0c:	4684      	mov	ip, r0
    2f0e:	468a      	mov	sl, r1
    2f10:	000f      	movs	r7, r1
    2f12:	0319      	lsls	r1, r3, #12
    2f14:	0f50      	lsrs	r0, r2, #29
    2f16:	0a49      	lsrs	r1, r1, #9
    2f18:	4301      	orrs	r1, r0
    2f1a:	48c6      	ldr	r0, [pc, #792]	; (3234 <__aeabi_dsub+0x344>)
    2f1c:	0d76      	lsrs	r6, r6, #21
    2f1e:	46a8      	mov	r8, r5
    2f20:	0fdb      	lsrs	r3, r3, #31
    2f22:	00d2      	lsls	r2, r2, #3
    2f24:	4584      	cmp	ip, r0
    2f26:	d100      	bne.n	2f2a <__aeabi_dsub+0x3a>
    2f28:	e0d8      	b.n	30dc <__aeabi_dsub+0x1ec>
    2f2a:	2001      	movs	r0, #1
    2f2c:	4043      	eors	r3, r0
    2f2e:	42ab      	cmp	r3, r5
    2f30:	d100      	bne.n	2f34 <__aeabi_dsub+0x44>
    2f32:	e0a6      	b.n	3082 <__aeabi_dsub+0x192>
    2f34:	4660      	mov	r0, ip
    2f36:	1a35      	subs	r5, r6, r0
    2f38:	2d00      	cmp	r5, #0
    2f3a:	dc00      	bgt.n	2f3e <__aeabi_dsub+0x4e>
    2f3c:	e105      	b.n	314a <__aeabi_dsub+0x25a>
    2f3e:	2800      	cmp	r0, #0
    2f40:	d110      	bne.n	2f64 <__aeabi_dsub+0x74>
    2f42:	000b      	movs	r3, r1
    2f44:	4313      	orrs	r3, r2
    2f46:	d100      	bne.n	2f4a <__aeabi_dsub+0x5a>
    2f48:	e0d7      	b.n	30fa <__aeabi_dsub+0x20a>
    2f4a:	1e6b      	subs	r3, r5, #1
    2f4c:	2b00      	cmp	r3, #0
    2f4e:	d000      	beq.n	2f52 <__aeabi_dsub+0x62>
    2f50:	e14b      	b.n	31ea <__aeabi_dsub+0x2fa>
    2f52:	4653      	mov	r3, sl
    2f54:	1a9f      	subs	r7, r3, r2
    2f56:	45ba      	cmp	sl, r7
    2f58:	4180      	sbcs	r0, r0
    2f5a:	1a64      	subs	r4, r4, r1
    2f5c:	4240      	negs	r0, r0
    2f5e:	1a24      	subs	r4, r4, r0
    2f60:	2601      	movs	r6, #1
    2f62:	e01e      	b.n	2fa2 <__aeabi_dsub+0xb2>
    2f64:	4bb3      	ldr	r3, [pc, #716]	; (3234 <__aeabi_dsub+0x344>)
    2f66:	429e      	cmp	r6, r3
    2f68:	d048      	beq.n	2ffc <__aeabi_dsub+0x10c>
    2f6a:	2380      	movs	r3, #128	; 0x80
    2f6c:	041b      	lsls	r3, r3, #16
    2f6e:	4319      	orrs	r1, r3
    2f70:	2d38      	cmp	r5, #56	; 0x38
    2f72:	dd00      	ble.n	2f76 <__aeabi_dsub+0x86>
    2f74:	e119      	b.n	31aa <__aeabi_dsub+0x2ba>
    2f76:	2d1f      	cmp	r5, #31
    2f78:	dd00      	ble.n	2f7c <__aeabi_dsub+0x8c>
    2f7a:	e14c      	b.n	3216 <__aeabi_dsub+0x326>
    2f7c:	2320      	movs	r3, #32
    2f7e:	000f      	movs	r7, r1
    2f80:	1b5b      	subs	r3, r3, r5
    2f82:	0010      	movs	r0, r2
    2f84:	409a      	lsls	r2, r3
    2f86:	409f      	lsls	r7, r3
    2f88:	40e8      	lsrs	r0, r5
    2f8a:	1e53      	subs	r3, r2, #1
    2f8c:	419a      	sbcs	r2, r3
    2f8e:	40e9      	lsrs	r1, r5
    2f90:	4307      	orrs	r7, r0
    2f92:	4317      	orrs	r7, r2
    2f94:	4653      	mov	r3, sl
    2f96:	1bdf      	subs	r7, r3, r7
    2f98:	1a61      	subs	r1, r4, r1
    2f9a:	45ba      	cmp	sl, r7
    2f9c:	41a4      	sbcs	r4, r4
    2f9e:	4264      	negs	r4, r4
    2fa0:	1b0c      	subs	r4, r1, r4
    2fa2:	0223      	lsls	r3, r4, #8
    2fa4:	d400      	bmi.n	2fa8 <__aeabi_dsub+0xb8>
    2fa6:	e0c5      	b.n	3134 <__aeabi_dsub+0x244>
    2fa8:	0264      	lsls	r4, r4, #9
    2faa:	0a65      	lsrs	r5, r4, #9
    2fac:	2d00      	cmp	r5, #0
    2fae:	d100      	bne.n	2fb2 <__aeabi_dsub+0xc2>
    2fb0:	e0f6      	b.n	31a0 <__aeabi_dsub+0x2b0>
    2fb2:	0028      	movs	r0, r5
    2fb4:	f000 fb60 	bl	3678 <__clzsi2>
    2fb8:	0003      	movs	r3, r0
    2fba:	3b08      	subs	r3, #8
    2fbc:	2b1f      	cmp	r3, #31
    2fbe:	dd00      	ble.n	2fc2 <__aeabi_dsub+0xd2>
    2fc0:	e0e9      	b.n	3196 <__aeabi_dsub+0x2a6>
    2fc2:	2220      	movs	r2, #32
    2fc4:	003c      	movs	r4, r7
    2fc6:	1ad2      	subs	r2, r2, r3
    2fc8:	409d      	lsls	r5, r3
    2fca:	40d4      	lsrs	r4, r2
    2fcc:	409f      	lsls	r7, r3
    2fce:	4325      	orrs	r5, r4
    2fd0:	429e      	cmp	r6, r3
    2fd2:	dd00      	ble.n	2fd6 <__aeabi_dsub+0xe6>
    2fd4:	e0db      	b.n	318e <__aeabi_dsub+0x29e>
    2fd6:	1b9e      	subs	r6, r3, r6
    2fd8:	1c73      	adds	r3, r6, #1
    2fda:	2b1f      	cmp	r3, #31
    2fdc:	dd00      	ble.n	2fe0 <__aeabi_dsub+0xf0>
    2fde:	e10a      	b.n	31f6 <__aeabi_dsub+0x306>
    2fe0:	2220      	movs	r2, #32
    2fe2:	0038      	movs	r0, r7
    2fe4:	1ad2      	subs	r2, r2, r3
    2fe6:	0029      	movs	r1, r5
    2fe8:	4097      	lsls	r7, r2
    2fea:	002c      	movs	r4, r5
    2fec:	4091      	lsls	r1, r2
    2fee:	40d8      	lsrs	r0, r3
    2ff0:	1e7a      	subs	r2, r7, #1
    2ff2:	4197      	sbcs	r7, r2
    2ff4:	40dc      	lsrs	r4, r3
    2ff6:	2600      	movs	r6, #0
    2ff8:	4301      	orrs	r1, r0
    2ffa:	430f      	orrs	r7, r1
    2ffc:	077b      	lsls	r3, r7, #29
    2ffe:	d009      	beq.n	3014 <__aeabi_dsub+0x124>
    3000:	230f      	movs	r3, #15
    3002:	403b      	ands	r3, r7
    3004:	2b04      	cmp	r3, #4
    3006:	d005      	beq.n	3014 <__aeabi_dsub+0x124>
    3008:	1d3b      	adds	r3, r7, #4
    300a:	42bb      	cmp	r3, r7
    300c:	41bf      	sbcs	r7, r7
    300e:	427f      	negs	r7, r7
    3010:	19e4      	adds	r4, r4, r7
    3012:	001f      	movs	r7, r3
    3014:	0223      	lsls	r3, r4, #8
    3016:	d525      	bpl.n	3064 <__aeabi_dsub+0x174>
    3018:	4b86      	ldr	r3, [pc, #536]	; (3234 <__aeabi_dsub+0x344>)
    301a:	3601      	adds	r6, #1
    301c:	429e      	cmp	r6, r3
    301e:	d100      	bne.n	3022 <__aeabi_dsub+0x132>
    3020:	e0af      	b.n	3182 <__aeabi_dsub+0x292>
    3022:	4b85      	ldr	r3, [pc, #532]	; (3238 <__aeabi_dsub+0x348>)
    3024:	2501      	movs	r5, #1
    3026:	401c      	ands	r4, r3
    3028:	4643      	mov	r3, r8
    302a:	0762      	lsls	r2, r4, #29
    302c:	08ff      	lsrs	r7, r7, #3
    302e:	0264      	lsls	r4, r4, #9
    3030:	0576      	lsls	r6, r6, #21
    3032:	4317      	orrs	r7, r2
    3034:	0b24      	lsrs	r4, r4, #12
    3036:	0d76      	lsrs	r6, r6, #21
    3038:	401d      	ands	r5, r3
    303a:	2100      	movs	r1, #0
    303c:	0324      	lsls	r4, r4, #12
    303e:	0b23      	lsrs	r3, r4, #12
    3040:	0d0c      	lsrs	r4, r1, #20
    3042:	4a7e      	ldr	r2, [pc, #504]	; (323c <__aeabi_dsub+0x34c>)
    3044:	0524      	lsls	r4, r4, #20
    3046:	431c      	orrs	r4, r3
    3048:	4014      	ands	r4, r2
    304a:	0533      	lsls	r3, r6, #20
    304c:	4323      	orrs	r3, r4
    304e:	005b      	lsls	r3, r3, #1
    3050:	07ed      	lsls	r5, r5, #31
    3052:	085b      	lsrs	r3, r3, #1
    3054:	432b      	orrs	r3, r5
    3056:	0038      	movs	r0, r7
    3058:	0019      	movs	r1, r3
    305a:	bc1c      	pop	{r2, r3, r4}
    305c:	4690      	mov	r8, r2
    305e:	4699      	mov	r9, r3
    3060:	46a2      	mov	sl, r4
    3062:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3064:	2501      	movs	r5, #1
    3066:	4643      	mov	r3, r8
    3068:	0762      	lsls	r2, r4, #29
    306a:	08ff      	lsrs	r7, r7, #3
    306c:	4317      	orrs	r7, r2
    306e:	08e4      	lsrs	r4, r4, #3
    3070:	401d      	ands	r5, r3
    3072:	4b70      	ldr	r3, [pc, #448]	; (3234 <__aeabi_dsub+0x344>)
    3074:	429e      	cmp	r6, r3
    3076:	d036      	beq.n	30e6 <__aeabi_dsub+0x1f6>
    3078:	0324      	lsls	r4, r4, #12
    307a:	0576      	lsls	r6, r6, #21
    307c:	0b24      	lsrs	r4, r4, #12
    307e:	0d76      	lsrs	r6, r6, #21
    3080:	e7db      	b.n	303a <__aeabi_dsub+0x14a>
    3082:	4663      	mov	r3, ip
    3084:	1af3      	subs	r3, r6, r3
    3086:	2b00      	cmp	r3, #0
    3088:	dc00      	bgt.n	308c <__aeabi_dsub+0x19c>
    308a:	e094      	b.n	31b6 <__aeabi_dsub+0x2c6>
    308c:	4660      	mov	r0, ip
    308e:	2800      	cmp	r0, #0
    3090:	d035      	beq.n	30fe <__aeabi_dsub+0x20e>
    3092:	4868      	ldr	r0, [pc, #416]	; (3234 <__aeabi_dsub+0x344>)
    3094:	4286      	cmp	r6, r0
    3096:	d0b1      	beq.n	2ffc <__aeabi_dsub+0x10c>
    3098:	2780      	movs	r7, #128	; 0x80
    309a:	043f      	lsls	r7, r7, #16
    309c:	4339      	orrs	r1, r7
    309e:	2b38      	cmp	r3, #56	; 0x38
    30a0:	dc00      	bgt.n	30a4 <__aeabi_dsub+0x1b4>
    30a2:	e0fd      	b.n	32a0 <__aeabi_dsub+0x3b0>
    30a4:	430a      	orrs	r2, r1
    30a6:	0017      	movs	r7, r2
    30a8:	2100      	movs	r1, #0
    30aa:	1e7a      	subs	r2, r7, #1
    30ac:	4197      	sbcs	r7, r2
    30ae:	4457      	add	r7, sl
    30b0:	4557      	cmp	r7, sl
    30b2:	4180      	sbcs	r0, r0
    30b4:	1909      	adds	r1, r1, r4
    30b6:	4244      	negs	r4, r0
    30b8:	190c      	adds	r4, r1, r4
    30ba:	0223      	lsls	r3, r4, #8
    30bc:	d53a      	bpl.n	3134 <__aeabi_dsub+0x244>
    30be:	4b5d      	ldr	r3, [pc, #372]	; (3234 <__aeabi_dsub+0x344>)
    30c0:	3601      	adds	r6, #1
    30c2:	429e      	cmp	r6, r3
    30c4:	d100      	bne.n	30c8 <__aeabi_dsub+0x1d8>
    30c6:	e14b      	b.n	3360 <__aeabi_dsub+0x470>
    30c8:	2201      	movs	r2, #1
    30ca:	4b5b      	ldr	r3, [pc, #364]	; (3238 <__aeabi_dsub+0x348>)
    30cc:	401c      	ands	r4, r3
    30ce:	087b      	lsrs	r3, r7, #1
    30d0:	4017      	ands	r7, r2
    30d2:	431f      	orrs	r7, r3
    30d4:	07e2      	lsls	r2, r4, #31
    30d6:	4317      	orrs	r7, r2
    30d8:	0864      	lsrs	r4, r4, #1
    30da:	e78f      	b.n	2ffc <__aeabi_dsub+0x10c>
    30dc:	0008      	movs	r0, r1
    30de:	4310      	orrs	r0, r2
    30e0:	d000      	beq.n	30e4 <__aeabi_dsub+0x1f4>
    30e2:	e724      	b.n	2f2e <__aeabi_dsub+0x3e>
    30e4:	e721      	b.n	2f2a <__aeabi_dsub+0x3a>
    30e6:	0023      	movs	r3, r4
    30e8:	433b      	orrs	r3, r7
    30ea:	d100      	bne.n	30ee <__aeabi_dsub+0x1fe>
    30ec:	e1b9      	b.n	3462 <__aeabi_dsub+0x572>
    30ee:	2280      	movs	r2, #128	; 0x80
    30f0:	0312      	lsls	r2, r2, #12
    30f2:	4314      	orrs	r4, r2
    30f4:	0324      	lsls	r4, r4, #12
    30f6:	0b24      	lsrs	r4, r4, #12
    30f8:	e79f      	b.n	303a <__aeabi_dsub+0x14a>
    30fa:	002e      	movs	r6, r5
    30fc:	e77e      	b.n	2ffc <__aeabi_dsub+0x10c>
    30fe:	0008      	movs	r0, r1
    3100:	4310      	orrs	r0, r2
    3102:	d100      	bne.n	3106 <__aeabi_dsub+0x216>
    3104:	e0ca      	b.n	329c <__aeabi_dsub+0x3ac>
    3106:	1e58      	subs	r0, r3, #1
    3108:	4684      	mov	ip, r0
    310a:	2800      	cmp	r0, #0
    310c:	d000      	beq.n	3110 <__aeabi_dsub+0x220>
    310e:	e0e7      	b.n	32e0 <__aeabi_dsub+0x3f0>
    3110:	4452      	add	r2, sl
    3112:	4552      	cmp	r2, sl
    3114:	4180      	sbcs	r0, r0
    3116:	1864      	adds	r4, r4, r1
    3118:	4240      	negs	r0, r0
    311a:	1824      	adds	r4, r4, r0
    311c:	0017      	movs	r7, r2
    311e:	2601      	movs	r6, #1
    3120:	0223      	lsls	r3, r4, #8
    3122:	d507      	bpl.n	3134 <__aeabi_dsub+0x244>
    3124:	2602      	movs	r6, #2
    3126:	e7cf      	b.n	30c8 <__aeabi_dsub+0x1d8>
    3128:	4664      	mov	r4, ip
    312a:	432c      	orrs	r4, r5
    312c:	d100      	bne.n	3130 <__aeabi_dsub+0x240>
    312e:	e1b3      	b.n	3498 <__aeabi_dsub+0x5a8>
    3130:	002c      	movs	r4, r5
    3132:	4667      	mov	r7, ip
    3134:	077b      	lsls	r3, r7, #29
    3136:	d000      	beq.n	313a <__aeabi_dsub+0x24a>
    3138:	e762      	b.n	3000 <__aeabi_dsub+0x110>
    313a:	0763      	lsls	r3, r4, #29
    313c:	08ff      	lsrs	r7, r7, #3
    313e:	431f      	orrs	r7, r3
    3140:	2501      	movs	r5, #1
    3142:	4643      	mov	r3, r8
    3144:	08e4      	lsrs	r4, r4, #3
    3146:	401d      	ands	r5, r3
    3148:	e793      	b.n	3072 <__aeabi_dsub+0x182>
    314a:	2d00      	cmp	r5, #0
    314c:	d178      	bne.n	3240 <__aeabi_dsub+0x350>
    314e:	1c75      	adds	r5, r6, #1
    3150:	056d      	lsls	r5, r5, #21
    3152:	0d6d      	lsrs	r5, r5, #21
    3154:	2d01      	cmp	r5, #1
    3156:	dc00      	bgt.n	315a <__aeabi_dsub+0x26a>
    3158:	e0f2      	b.n	3340 <__aeabi_dsub+0x450>
    315a:	4650      	mov	r0, sl
    315c:	1a80      	subs	r0, r0, r2
    315e:	4582      	cmp	sl, r0
    3160:	41bf      	sbcs	r7, r7
    3162:	1a65      	subs	r5, r4, r1
    3164:	427f      	negs	r7, r7
    3166:	1bed      	subs	r5, r5, r7
    3168:	4684      	mov	ip, r0
    316a:	0228      	lsls	r0, r5, #8
    316c:	d400      	bmi.n	3170 <__aeabi_dsub+0x280>
    316e:	e08c      	b.n	328a <__aeabi_dsub+0x39a>
    3170:	4650      	mov	r0, sl
    3172:	1a17      	subs	r7, r2, r0
    3174:	42ba      	cmp	r2, r7
    3176:	4192      	sbcs	r2, r2
    3178:	1b0c      	subs	r4, r1, r4
    317a:	4255      	negs	r5, r2
    317c:	1b65      	subs	r5, r4, r5
    317e:	4698      	mov	r8, r3
    3180:	e714      	b.n	2fac <__aeabi_dsub+0xbc>
    3182:	2501      	movs	r5, #1
    3184:	4643      	mov	r3, r8
    3186:	2400      	movs	r4, #0
    3188:	401d      	ands	r5, r3
    318a:	2700      	movs	r7, #0
    318c:	e755      	b.n	303a <__aeabi_dsub+0x14a>
    318e:	4c2a      	ldr	r4, [pc, #168]	; (3238 <__aeabi_dsub+0x348>)
    3190:	1af6      	subs	r6, r6, r3
    3192:	402c      	ands	r4, r5
    3194:	e732      	b.n	2ffc <__aeabi_dsub+0x10c>
    3196:	003d      	movs	r5, r7
    3198:	3828      	subs	r0, #40	; 0x28
    319a:	4085      	lsls	r5, r0
    319c:	2700      	movs	r7, #0
    319e:	e717      	b.n	2fd0 <__aeabi_dsub+0xe0>
    31a0:	0038      	movs	r0, r7
    31a2:	f000 fa69 	bl	3678 <__clzsi2>
    31a6:	3020      	adds	r0, #32
    31a8:	e706      	b.n	2fb8 <__aeabi_dsub+0xc8>
    31aa:	430a      	orrs	r2, r1
    31ac:	0017      	movs	r7, r2
    31ae:	2100      	movs	r1, #0
    31b0:	1e7a      	subs	r2, r7, #1
    31b2:	4197      	sbcs	r7, r2
    31b4:	e6ee      	b.n	2f94 <__aeabi_dsub+0xa4>
    31b6:	2b00      	cmp	r3, #0
    31b8:	d000      	beq.n	31bc <__aeabi_dsub+0x2cc>
    31ba:	e0e5      	b.n	3388 <__aeabi_dsub+0x498>
    31bc:	1c73      	adds	r3, r6, #1
    31be:	469c      	mov	ip, r3
    31c0:	055b      	lsls	r3, r3, #21
    31c2:	0d5b      	lsrs	r3, r3, #21
    31c4:	2b01      	cmp	r3, #1
    31c6:	dc00      	bgt.n	31ca <__aeabi_dsub+0x2da>
    31c8:	e09f      	b.n	330a <__aeabi_dsub+0x41a>
    31ca:	4b1a      	ldr	r3, [pc, #104]	; (3234 <__aeabi_dsub+0x344>)
    31cc:	459c      	cmp	ip, r3
    31ce:	d100      	bne.n	31d2 <__aeabi_dsub+0x2e2>
    31d0:	e0c5      	b.n	335e <__aeabi_dsub+0x46e>
    31d2:	4452      	add	r2, sl
    31d4:	4552      	cmp	r2, sl
    31d6:	4180      	sbcs	r0, r0
    31d8:	1864      	adds	r4, r4, r1
    31da:	4240      	negs	r0, r0
    31dc:	1824      	adds	r4, r4, r0
    31de:	07e7      	lsls	r7, r4, #31
    31e0:	0852      	lsrs	r2, r2, #1
    31e2:	4317      	orrs	r7, r2
    31e4:	0864      	lsrs	r4, r4, #1
    31e6:	4666      	mov	r6, ip
    31e8:	e708      	b.n	2ffc <__aeabi_dsub+0x10c>
    31ea:	4812      	ldr	r0, [pc, #72]	; (3234 <__aeabi_dsub+0x344>)
    31ec:	4285      	cmp	r5, r0
    31ee:	d100      	bne.n	31f2 <__aeabi_dsub+0x302>
    31f0:	e085      	b.n	32fe <__aeabi_dsub+0x40e>
    31f2:	001d      	movs	r5, r3
    31f4:	e6bc      	b.n	2f70 <__aeabi_dsub+0x80>
    31f6:	0029      	movs	r1, r5
    31f8:	3e1f      	subs	r6, #31
    31fa:	40f1      	lsrs	r1, r6
    31fc:	2b20      	cmp	r3, #32
    31fe:	d100      	bne.n	3202 <__aeabi_dsub+0x312>
    3200:	e07f      	b.n	3302 <__aeabi_dsub+0x412>
    3202:	2240      	movs	r2, #64	; 0x40
    3204:	1ad3      	subs	r3, r2, r3
    3206:	409d      	lsls	r5, r3
    3208:	432f      	orrs	r7, r5
    320a:	1e7d      	subs	r5, r7, #1
    320c:	41af      	sbcs	r7, r5
    320e:	2400      	movs	r4, #0
    3210:	430f      	orrs	r7, r1
    3212:	2600      	movs	r6, #0
    3214:	e78e      	b.n	3134 <__aeabi_dsub+0x244>
    3216:	002b      	movs	r3, r5
    3218:	000f      	movs	r7, r1
    321a:	3b20      	subs	r3, #32
    321c:	40df      	lsrs	r7, r3
    321e:	2d20      	cmp	r5, #32
    3220:	d071      	beq.n	3306 <__aeabi_dsub+0x416>
    3222:	2340      	movs	r3, #64	; 0x40
    3224:	1b5d      	subs	r5, r3, r5
    3226:	40a9      	lsls	r1, r5
    3228:	430a      	orrs	r2, r1
    322a:	1e51      	subs	r1, r2, #1
    322c:	418a      	sbcs	r2, r1
    322e:	2100      	movs	r1, #0
    3230:	4317      	orrs	r7, r2
    3232:	e6af      	b.n	2f94 <__aeabi_dsub+0xa4>
    3234:	000007ff 	.word	0x000007ff
    3238:	ff7fffff 	.word	0xff7fffff
    323c:	800fffff 	.word	0x800fffff
    3240:	2e00      	cmp	r6, #0
    3242:	d03e      	beq.n	32c2 <__aeabi_dsub+0x3d2>
    3244:	4eb3      	ldr	r6, [pc, #716]	; (3514 <__aeabi_dsub+0x624>)
    3246:	45b4      	cmp	ip, r6
    3248:	d045      	beq.n	32d6 <__aeabi_dsub+0x3e6>
    324a:	2680      	movs	r6, #128	; 0x80
    324c:	0436      	lsls	r6, r6, #16
    324e:	426d      	negs	r5, r5
    3250:	4334      	orrs	r4, r6
    3252:	2d38      	cmp	r5, #56	; 0x38
    3254:	dd00      	ble.n	3258 <__aeabi_dsub+0x368>
    3256:	e0a8      	b.n	33aa <__aeabi_dsub+0x4ba>
    3258:	2d1f      	cmp	r5, #31
    325a:	dd00      	ble.n	325e <__aeabi_dsub+0x36e>
    325c:	e11f      	b.n	349e <__aeabi_dsub+0x5ae>
    325e:	2620      	movs	r6, #32
    3260:	0027      	movs	r7, r4
    3262:	4650      	mov	r0, sl
    3264:	1b76      	subs	r6, r6, r5
    3266:	40b7      	lsls	r7, r6
    3268:	40e8      	lsrs	r0, r5
    326a:	4307      	orrs	r7, r0
    326c:	4650      	mov	r0, sl
    326e:	40b0      	lsls	r0, r6
    3270:	1e46      	subs	r6, r0, #1
    3272:	41b0      	sbcs	r0, r6
    3274:	40ec      	lsrs	r4, r5
    3276:	4338      	orrs	r0, r7
    3278:	1a17      	subs	r7, r2, r0
    327a:	42ba      	cmp	r2, r7
    327c:	4192      	sbcs	r2, r2
    327e:	1b0c      	subs	r4, r1, r4
    3280:	4252      	negs	r2, r2
    3282:	1aa4      	subs	r4, r4, r2
    3284:	4666      	mov	r6, ip
    3286:	4698      	mov	r8, r3
    3288:	e68b      	b.n	2fa2 <__aeabi_dsub+0xb2>
    328a:	4664      	mov	r4, ip
    328c:	4667      	mov	r7, ip
    328e:	432c      	orrs	r4, r5
    3290:	d000      	beq.n	3294 <__aeabi_dsub+0x3a4>
    3292:	e68b      	b.n	2fac <__aeabi_dsub+0xbc>
    3294:	2500      	movs	r5, #0
    3296:	2600      	movs	r6, #0
    3298:	2700      	movs	r7, #0
    329a:	e6ea      	b.n	3072 <__aeabi_dsub+0x182>
    329c:	001e      	movs	r6, r3
    329e:	e6ad      	b.n	2ffc <__aeabi_dsub+0x10c>
    32a0:	2b1f      	cmp	r3, #31
    32a2:	dc60      	bgt.n	3366 <__aeabi_dsub+0x476>
    32a4:	2720      	movs	r7, #32
    32a6:	1af8      	subs	r0, r7, r3
    32a8:	000f      	movs	r7, r1
    32aa:	4684      	mov	ip, r0
    32ac:	4087      	lsls	r7, r0
    32ae:	0010      	movs	r0, r2
    32b0:	40d8      	lsrs	r0, r3
    32b2:	4307      	orrs	r7, r0
    32b4:	4660      	mov	r0, ip
    32b6:	4082      	lsls	r2, r0
    32b8:	1e50      	subs	r0, r2, #1
    32ba:	4182      	sbcs	r2, r0
    32bc:	40d9      	lsrs	r1, r3
    32be:	4317      	orrs	r7, r2
    32c0:	e6f5      	b.n	30ae <__aeabi_dsub+0x1be>
    32c2:	0026      	movs	r6, r4
    32c4:	4650      	mov	r0, sl
    32c6:	4306      	orrs	r6, r0
    32c8:	d005      	beq.n	32d6 <__aeabi_dsub+0x3e6>
    32ca:	43ed      	mvns	r5, r5
    32cc:	2d00      	cmp	r5, #0
    32ce:	d0d3      	beq.n	3278 <__aeabi_dsub+0x388>
    32d0:	4e90      	ldr	r6, [pc, #576]	; (3514 <__aeabi_dsub+0x624>)
    32d2:	45b4      	cmp	ip, r6
    32d4:	d1bd      	bne.n	3252 <__aeabi_dsub+0x362>
    32d6:	000c      	movs	r4, r1
    32d8:	0017      	movs	r7, r2
    32da:	4666      	mov	r6, ip
    32dc:	4698      	mov	r8, r3
    32de:	e68d      	b.n	2ffc <__aeabi_dsub+0x10c>
    32e0:	488c      	ldr	r0, [pc, #560]	; (3514 <__aeabi_dsub+0x624>)
    32e2:	4283      	cmp	r3, r0
    32e4:	d00b      	beq.n	32fe <__aeabi_dsub+0x40e>
    32e6:	4663      	mov	r3, ip
    32e8:	e6d9      	b.n	309e <__aeabi_dsub+0x1ae>
    32ea:	2d00      	cmp	r5, #0
    32ec:	d000      	beq.n	32f0 <__aeabi_dsub+0x400>
    32ee:	e096      	b.n	341e <__aeabi_dsub+0x52e>
    32f0:	0008      	movs	r0, r1
    32f2:	4310      	orrs	r0, r2
    32f4:	d100      	bne.n	32f8 <__aeabi_dsub+0x408>
    32f6:	e0e2      	b.n	34be <__aeabi_dsub+0x5ce>
    32f8:	000c      	movs	r4, r1
    32fa:	0017      	movs	r7, r2
    32fc:	4698      	mov	r8, r3
    32fe:	4e85      	ldr	r6, [pc, #532]	; (3514 <__aeabi_dsub+0x624>)
    3300:	e67c      	b.n	2ffc <__aeabi_dsub+0x10c>
    3302:	2500      	movs	r5, #0
    3304:	e780      	b.n	3208 <__aeabi_dsub+0x318>
    3306:	2100      	movs	r1, #0
    3308:	e78e      	b.n	3228 <__aeabi_dsub+0x338>
    330a:	0023      	movs	r3, r4
    330c:	4650      	mov	r0, sl
    330e:	4303      	orrs	r3, r0
    3310:	2e00      	cmp	r6, #0
    3312:	d000      	beq.n	3316 <__aeabi_dsub+0x426>
    3314:	e0a8      	b.n	3468 <__aeabi_dsub+0x578>
    3316:	2b00      	cmp	r3, #0
    3318:	d100      	bne.n	331c <__aeabi_dsub+0x42c>
    331a:	e0de      	b.n	34da <__aeabi_dsub+0x5ea>
    331c:	000b      	movs	r3, r1
    331e:	4313      	orrs	r3, r2
    3320:	d100      	bne.n	3324 <__aeabi_dsub+0x434>
    3322:	e66b      	b.n	2ffc <__aeabi_dsub+0x10c>
    3324:	4452      	add	r2, sl
    3326:	4552      	cmp	r2, sl
    3328:	4180      	sbcs	r0, r0
    332a:	1864      	adds	r4, r4, r1
    332c:	4240      	negs	r0, r0
    332e:	1824      	adds	r4, r4, r0
    3330:	0017      	movs	r7, r2
    3332:	0223      	lsls	r3, r4, #8
    3334:	d400      	bmi.n	3338 <__aeabi_dsub+0x448>
    3336:	e6fd      	b.n	3134 <__aeabi_dsub+0x244>
    3338:	4b77      	ldr	r3, [pc, #476]	; (3518 <__aeabi_dsub+0x628>)
    333a:	4666      	mov	r6, ip
    333c:	401c      	ands	r4, r3
    333e:	e65d      	b.n	2ffc <__aeabi_dsub+0x10c>
    3340:	0025      	movs	r5, r4
    3342:	4650      	mov	r0, sl
    3344:	4305      	orrs	r5, r0
    3346:	2e00      	cmp	r6, #0
    3348:	d1cf      	bne.n	32ea <__aeabi_dsub+0x3fa>
    334a:	2d00      	cmp	r5, #0
    334c:	d14f      	bne.n	33ee <__aeabi_dsub+0x4fe>
    334e:	000c      	movs	r4, r1
    3350:	4314      	orrs	r4, r2
    3352:	d100      	bne.n	3356 <__aeabi_dsub+0x466>
    3354:	e0a0      	b.n	3498 <__aeabi_dsub+0x5a8>
    3356:	000c      	movs	r4, r1
    3358:	0017      	movs	r7, r2
    335a:	4698      	mov	r8, r3
    335c:	e64e      	b.n	2ffc <__aeabi_dsub+0x10c>
    335e:	4666      	mov	r6, ip
    3360:	2400      	movs	r4, #0
    3362:	2700      	movs	r7, #0
    3364:	e685      	b.n	3072 <__aeabi_dsub+0x182>
    3366:	001f      	movs	r7, r3
    3368:	0008      	movs	r0, r1
    336a:	3f20      	subs	r7, #32
    336c:	40f8      	lsrs	r0, r7
    336e:	0007      	movs	r7, r0
    3370:	2b20      	cmp	r3, #32
    3372:	d100      	bne.n	3376 <__aeabi_dsub+0x486>
    3374:	e08e      	b.n	3494 <__aeabi_dsub+0x5a4>
    3376:	2040      	movs	r0, #64	; 0x40
    3378:	1ac3      	subs	r3, r0, r3
    337a:	4099      	lsls	r1, r3
    337c:	430a      	orrs	r2, r1
    337e:	1e51      	subs	r1, r2, #1
    3380:	418a      	sbcs	r2, r1
    3382:	2100      	movs	r1, #0
    3384:	4317      	orrs	r7, r2
    3386:	e692      	b.n	30ae <__aeabi_dsub+0x1be>
    3388:	2e00      	cmp	r6, #0
    338a:	d114      	bne.n	33b6 <__aeabi_dsub+0x4c6>
    338c:	0026      	movs	r6, r4
    338e:	4650      	mov	r0, sl
    3390:	4306      	orrs	r6, r0
    3392:	d062      	beq.n	345a <__aeabi_dsub+0x56a>
    3394:	43db      	mvns	r3, r3
    3396:	2b00      	cmp	r3, #0
    3398:	d15c      	bne.n	3454 <__aeabi_dsub+0x564>
    339a:	1887      	adds	r7, r0, r2
    339c:	4297      	cmp	r7, r2
    339e:	4192      	sbcs	r2, r2
    33a0:	1864      	adds	r4, r4, r1
    33a2:	4252      	negs	r2, r2
    33a4:	18a4      	adds	r4, r4, r2
    33a6:	4666      	mov	r6, ip
    33a8:	e687      	b.n	30ba <__aeabi_dsub+0x1ca>
    33aa:	4650      	mov	r0, sl
    33ac:	4320      	orrs	r0, r4
    33ae:	1e44      	subs	r4, r0, #1
    33b0:	41a0      	sbcs	r0, r4
    33b2:	2400      	movs	r4, #0
    33b4:	e760      	b.n	3278 <__aeabi_dsub+0x388>
    33b6:	4e57      	ldr	r6, [pc, #348]	; (3514 <__aeabi_dsub+0x624>)
    33b8:	45b4      	cmp	ip, r6
    33ba:	d04e      	beq.n	345a <__aeabi_dsub+0x56a>
    33bc:	2680      	movs	r6, #128	; 0x80
    33be:	0436      	lsls	r6, r6, #16
    33c0:	425b      	negs	r3, r3
    33c2:	4334      	orrs	r4, r6
    33c4:	2b38      	cmp	r3, #56	; 0x38
    33c6:	dd00      	ble.n	33ca <__aeabi_dsub+0x4da>
    33c8:	e07f      	b.n	34ca <__aeabi_dsub+0x5da>
    33ca:	2b1f      	cmp	r3, #31
    33cc:	dd00      	ble.n	33d0 <__aeabi_dsub+0x4e0>
    33ce:	e08b      	b.n	34e8 <__aeabi_dsub+0x5f8>
    33d0:	2620      	movs	r6, #32
    33d2:	0027      	movs	r7, r4
    33d4:	4650      	mov	r0, sl
    33d6:	1af6      	subs	r6, r6, r3
    33d8:	40b7      	lsls	r7, r6
    33da:	40d8      	lsrs	r0, r3
    33dc:	4307      	orrs	r7, r0
    33de:	4650      	mov	r0, sl
    33e0:	40b0      	lsls	r0, r6
    33e2:	1e46      	subs	r6, r0, #1
    33e4:	41b0      	sbcs	r0, r6
    33e6:	4307      	orrs	r7, r0
    33e8:	40dc      	lsrs	r4, r3
    33ea:	18bf      	adds	r7, r7, r2
    33ec:	e7d6      	b.n	339c <__aeabi_dsub+0x4ac>
    33ee:	000d      	movs	r5, r1
    33f0:	4315      	orrs	r5, r2
    33f2:	d100      	bne.n	33f6 <__aeabi_dsub+0x506>
    33f4:	e602      	b.n	2ffc <__aeabi_dsub+0x10c>
    33f6:	4650      	mov	r0, sl
    33f8:	1a80      	subs	r0, r0, r2
    33fa:	4582      	cmp	sl, r0
    33fc:	41bf      	sbcs	r7, r7
    33fe:	1a65      	subs	r5, r4, r1
    3400:	427f      	negs	r7, r7
    3402:	1bed      	subs	r5, r5, r7
    3404:	4684      	mov	ip, r0
    3406:	0228      	lsls	r0, r5, #8
    3408:	d400      	bmi.n	340c <__aeabi_dsub+0x51c>
    340a:	e68d      	b.n	3128 <__aeabi_dsub+0x238>
    340c:	4650      	mov	r0, sl
    340e:	1a17      	subs	r7, r2, r0
    3410:	42ba      	cmp	r2, r7
    3412:	4192      	sbcs	r2, r2
    3414:	1b0c      	subs	r4, r1, r4
    3416:	4252      	negs	r2, r2
    3418:	1aa4      	subs	r4, r4, r2
    341a:	4698      	mov	r8, r3
    341c:	e5ee      	b.n	2ffc <__aeabi_dsub+0x10c>
    341e:	000d      	movs	r5, r1
    3420:	4315      	orrs	r5, r2
    3422:	d100      	bne.n	3426 <__aeabi_dsub+0x536>
    3424:	e76b      	b.n	32fe <__aeabi_dsub+0x40e>
    3426:	4650      	mov	r0, sl
    3428:	0767      	lsls	r7, r4, #29
    342a:	08c0      	lsrs	r0, r0, #3
    342c:	4307      	orrs	r7, r0
    342e:	2080      	movs	r0, #128	; 0x80
    3430:	08e4      	lsrs	r4, r4, #3
    3432:	0300      	lsls	r0, r0, #12
    3434:	4204      	tst	r4, r0
    3436:	d007      	beq.n	3448 <__aeabi_dsub+0x558>
    3438:	08cd      	lsrs	r5, r1, #3
    343a:	4205      	tst	r5, r0
    343c:	d104      	bne.n	3448 <__aeabi_dsub+0x558>
    343e:	002c      	movs	r4, r5
    3440:	4698      	mov	r8, r3
    3442:	08d7      	lsrs	r7, r2, #3
    3444:	0749      	lsls	r1, r1, #29
    3446:	430f      	orrs	r7, r1
    3448:	0f7b      	lsrs	r3, r7, #29
    344a:	00e4      	lsls	r4, r4, #3
    344c:	431c      	orrs	r4, r3
    344e:	00ff      	lsls	r7, r7, #3
    3450:	4e30      	ldr	r6, [pc, #192]	; (3514 <__aeabi_dsub+0x624>)
    3452:	e5d3      	b.n	2ffc <__aeabi_dsub+0x10c>
    3454:	4e2f      	ldr	r6, [pc, #188]	; (3514 <__aeabi_dsub+0x624>)
    3456:	45b4      	cmp	ip, r6
    3458:	d1b4      	bne.n	33c4 <__aeabi_dsub+0x4d4>
    345a:	000c      	movs	r4, r1
    345c:	0017      	movs	r7, r2
    345e:	4666      	mov	r6, ip
    3460:	e5cc      	b.n	2ffc <__aeabi_dsub+0x10c>
    3462:	2700      	movs	r7, #0
    3464:	2400      	movs	r4, #0
    3466:	e5e8      	b.n	303a <__aeabi_dsub+0x14a>
    3468:	2b00      	cmp	r3, #0
    346a:	d039      	beq.n	34e0 <__aeabi_dsub+0x5f0>
    346c:	000b      	movs	r3, r1
    346e:	4313      	orrs	r3, r2
    3470:	d100      	bne.n	3474 <__aeabi_dsub+0x584>
    3472:	e744      	b.n	32fe <__aeabi_dsub+0x40e>
    3474:	08c0      	lsrs	r0, r0, #3
    3476:	0767      	lsls	r7, r4, #29
    3478:	4307      	orrs	r7, r0
    347a:	2080      	movs	r0, #128	; 0x80
    347c:	08e4      	lsrs	r4, r4, #3
    347e:	0300      	lsls	r0, r0, #12
    3480:	4204      	tst	r4, r0
    3482:	d0e1      	beq.n	3448 <__aeabi_dsub+0x558>
    3484:	08cb      	lsrs	r3, r1, #3
    3486:	4203      	tst	r3, r0
    3488:	d1de      	bne.n	3448 <__aeabi_dsub+0x558>
    348a:	08d7      	lsrs	r7, r2, #3
    348c:	0749      	lsls	r1, r1, #29
    348e:	430f      	orrs	r7, r1
    3490:	001c      	movs	r4, r3
    3492:	e7d9      	b.n	3448 <__aeabi_dsub+0x558>
    3494:	2100      	movs	r1, #0
    3496:	e771      	b.n	337c <__aeabi_dsub+0x48c>
    3498:	2500      	movs	r5, #0
    349a:	2700      	movs	r7, #0
    349c:	e5e9      	b.n	3072 <__aeabi_dsub+0x182>
    349e:	002e      	movs	r6, r5
    34a0:	0027      	movs	r7, r4
    34a2:	3e20      	subs	r6, #32
    34a4:	40f7      	lsrs	r7, r6
    34a6:	2d20      	cmp	r5, #32
    34a8:	d02f      	beq.n	350a <__aeabi_dsub+0x61a>
    34aa:	2640      	movs	r6, #64	; 0x40
    34ac:	1b75      	subs	r5, r6, r5
    34ae:	40ac      	lsls	r4, r5
    34b0:	4650      	mov	r0, sl
    34b2:	4320      	orrs	r0, r4
    34b4:	1e44      	subs	r4, r0, #1
    34b6:	41a0      	sbcs	r0, r4
    34b8:	2400      	movs	r4, #0
    34ba:	4338      	orrs	r0, r7
    34bc:	e6dc      	b.n	3278 <__aeabi_dsub+0x388>
    34be:	2480      	movs	r4, #128	; 0x80
    34c0:	2500      	movs	r5, #0
    34c2:	0324      	lsls	r4, r4, #12
    34c4:	4e13      	ldr	r6, [pc, #76]	; (3514 <__aeabi_dsub+0x624>)
    34c6:	2700      	movs	r7, #0
    34c8:	e5d3      	b.n	3072 <__aeabi_dsub+0x182>
    34ca:	4650      	mov	r0, sl
    34cc:	4320      	orrs	r0, r4
    34ce:	0007      	movs	r7, r0
    34d0:	1e78      	subs	r0, r7, #1
    34d2:	4187      	sbcs	r7, r0
    34d4:	2400      	movs	r4, #0
    34d6:	18bf      	adds	r7, r7, r2
    34d8:	e760      	b.n	339c <__aeabi_dsub+0x4ac>
    34da:	000c      	movs	r4, r1
    34dc:	0017      	movs	r7, r2
    34de:	e58d      	b.n	2ffc <__aeabi_dsub+0x10c>
    34e0:	000c      	movs	r4, r1
    34e2:	0017      	movs	r7, r2
    34e4:	4e0b      	ldr	r6, [pc, #44]	; (3514 <__aeabi_dsub+0x624>)
    34e6:	e589      	b.n	2ffc <__aeabi_dsub+0x10c>
    34e8:	001e      	movs	r6, r3
    34ea:	0027      	movs	r7, r4
    34ec:	3e20      	subs	r6, #32
    34ee:	40f7      	lsrs	r7, r6
    34f0:	2b20      	cmp	r3, #32
    34f2:	d00c      	beq.n	350e <__aeabi_dsub+0x61e>
    34f4:	2640      	movs	r6, #64	; 0x40
    34f6:	1af3      	subs	r3, r6, r3
    34f8:	409c      	lsls	r4, r3
    34fa:	4650      	mov	r0, sl
    34fc:	4320      	orrs	r0, r4
    34fe:	1e44      	subs	r4, r0, #1
    3500:	41a0      	sbcs	r0, r4
    3502:	4307      	orrs	r7, r0
    3504:	2400      	movs	r4, #0
    3506:	18bf      	adds	r7, r7, r2
    3508:	e748      	b.n	339c <__aeabi_dsub+0x4ac>
    350a:	2400      	movs	r4, #0
    350c:	e7d0      	b.n	34b0 <__aeabi_dsub+0x5c0>
    350e:	2400      	movs	r4, #0
    3510:	e7f3      	b.n	34fa <__aeabi_dsub+0x60a>
    3512:	46c0      	nop			; (mov r8, r8)
    3514:	000007ff 	.word	0x000007ff
    3518:	ff7fffff 	.word	0xff7fffff

0000351c <__aeabi_d2iz>:
    351c:	b530      	push	{r4, r5, lr}
    351e:	4d13      	ldr	r5, [pc, #76]	; (356c <__aeabi_d2iz+0x50>)
    3520:	030a      	lsls	r2, r1, #12
    3522:	004b      	lsls	r3, r1, #1
    3524:	0b12      	lsrs	r2, r2, #12
    3526:	0d5b      	lsrs	r3, r3, #21
    3528:	0fc9      	lsrs	r1, r1, #31
    352a:	2400      	movs	r4, #0
    352c:	42ab      	cmp	r3, r5
    352e:	dd10      	ble.n	3552 <__aeabi_d2iz+0x36>
    3530:	4c0f      	ldr	r4, [pc, #60]	; (3570 <__aeabi_d2iz+0x54>)
    3532:	42a3      	cmp	r3, r4
    3534:	dc0f      	bgt.n	3556 <__aeabi_d2iz+0x3a>
    3536:	2480      	movs	r4, #128	; 0x80
    3538:	4d0e      	ldr	r5, [pc, #56]	; (3574 <__aeabi_d2iz+0x58>)
    353a:	0364      	lsls	r4, r4, #13
    353c:	4322      	orrs	r2, r4
    353e:	1aed      	subs	r5, r5, r3
    3540:	2d1f      	cmp	r5, #31
    3542:	dd0b      	ble.n	355c <__aeabi_d2iz+0x40>
    3544:	480c      	ldr	r0, [pc, #48]	; (3578 <__aeabi_d2iz+0x5c>)
    3546:	1ac3      	subs	r3, r0, r3
    3548:	40da      	lsrs	r2, r3
    354a:	4254      	negs	r4, r2
    354c:	2900      	cmp	r1, #0
    354e:	d100      	bne.n	3552 <__aeabi_d2iz+0x36>
    3550:	0014      	movs	r4, r2
    3552:	0020      	movs	r0, r4
    3554:	bd30      	pop	{r4, r5, pc}
    3556:	4b09      	ldr	r3, [pc, #36]	; (357c <__aeabi_d2iz+0x60>)
    3558:	18cc      	adds	r4, r1, r3
    355a:	e7fa      	b.n	3552 <__aeabi_d2iz+0x36>
    355c:	4c08      	ldr	r4, [pc, #32]	; (3580 <__aeabi_d2iz+0x64>)
    355e:	40e8      	lsrs	r0, r5
    3560:	46a4      	mov	ip, r4
    3562:	4463      	add	r3, ip
    3564:	409a      	lsls	r2, r3
    3566:	4302      	orrs	r2, r0
    3568:	e7ef      	b.n	354a <__aeabi_d2iz+0x2e>
    356a:	46c0      	nop			; (mov r8, r8)
    356c:	000003fe 	.word	0x000003fe
    3570:	0000041d 	.word	0x0000041d
    3574:	00000433 	.word	0x00000433
    3578:	00000413 	.word	0x00000413
    357c:	7fffffff 	.word	0x7fffffff
    3580:	fffffbed 	.word	0xfffffbed

00003584 <__aeabi_i2d>:
    3584:	b570      	push	{r4, r5, r6, lr}
    3586:	2800      	cmp	r0, #0
    3588:	d030      	beq.n	35ec <__aeabi_i2d+0x68>
    358a:	17c3      	asrs	r3, r0, #31
    358c:	18c4      	adds	r4, r0, r3
    358e:	405c      	eors	r4, r3
    3590:	0fc5      	lsrs	r5, r0, #31
    3592:	0020      	movs	r0, r4
    3594:	f000 f870 	bl	3678 <__clzsi2>
    3598:	4b17      	ldr	r3, [pc, #92]	; (35f8 <__aeabi_i2d+0x74>)
    359a:	4a18      	ldr	r2, [pc, #96]	; (35fc <__aeabi_i2d+0x78>)
    359c:	1a1b      	subs	r3, r3, r0
    359e:	1ad2      	subs	r2, r2, r3
    35a0:	2a1f      	cmp	r2, #31
    35a2:	dd18      	ble.n	35d6 <__aeabi_i2d+0x52>
    35a4:	4a16      	ldr	r2, [pc, #88]	; (3600 <__aeabi_i2d+0x7c>)
    35a6:	1ad2      	subs	r2, r2, r3
    35a8:	4094      	lsls	r4, r2
    35aa:	2200      	movs	r2, #0
    35ac:	0324      	lsls	r4, r4, #12
    35ae:	055b      	lsls	r3, r3, #21
    35b0:	0b24      	lsrs	r4, r4, #12
    35b2:	0d5b      	lsrs	r3, r3, #21
    35b4:	2100      	movs	r1, #0
    35b6:	0010      	movs	r0, r2
    35b8:	0324      	lsls	r4, r4, #12
    35ba:	0d0a      	lsrs	r2, r1, #20
    35bc:	0b24      	lsrs	r4, r4, #12
    35be:	0512      	lsls	r2, r2, #20
    35c0:	4322      	orrs	r2, r4
    35c2:	4c10      	ldr	r4, [pc, #64]	; (3604 <__aeabi_i2d+0x80>)
    35c4:	051b      	lsls	r3, r3, #20
    35c6:	4022      	ands	r2, r4
    35c8:	4313      	orrs	r3, r2
    35ca:	005b      	lsls	r3, r3, #1
    35cc:	07ed      	lsls	r5, r5, #31
    35ce:	085b      	lsrs	r3, r3, #1
    35d0:	432b      	orrs	r3, r5
    35d2:	0019      	movs	r1, r3
    35d4:	bd70      	pop	{r4, r5, r6, pc}
    35d6:	0021      	movs	r1, r4
    35d8:	4091      	lsls	r1, r2
    35da:	000a      	movs	r2, r1
    35dc:	210b      	movs	r1, #11
    35de:	1a08      	subs	r0, r1, r0
    35e0:	40c4      	lsrs	r4, r0
    35e2:	055b      	lsls	r3, r3, #21
    35e4:	0324      	lsls	r4, r4, #12
    35e6:	0b24      	lsrs	r4, r4, #12
    35e8:	0d5b      	lsrs	r3, r3, #21
    35ea:	e7e3      	b.n	35b4 <__aeabi_i2d+0x30>
    35ec:	2500      	movs	r5, #0
    35ee:	2300      	movs	r3, #0
    35f0:	2400      	movs	r4, #0
    35f2:	2200      	movs	r2, #0
    35f4:	e7de      	b.n	35b4 <__aeabi_i2d+0x30>
    35f6:	46c0      	nop			; (mov r8, r8)
    35f8:	0000041e 	.word	0x0000041e
    35fc:	00000433 	.word	0x00000433
    3600:	00000413 	.word	0x00000413
    3604:	800fffff 	.word	0x800fffff

00003608 <__aeabi_ui2d>:
    3608:	b510      	push	{r4, lr}
    360a:	1e04      	subs	r4, r0, #0
    360c:	d028      	beq.n	3660 <__aeabi_ui2d+0x58>
    360e:	f000 f833 	bl	3678 <__clzsi2>
    3612:	4b15      	ldr	r3, [pc, #84]	; (3668 <__aeabi_ui2d+0x60>)
    3614:	4a15      	ldr	r2, [pc, #84]	; (366c <__aeabi_ui2d+0x64>)
    3616:	1a1b      	subs	r3, r3, r0
    3618:	1ad2      	subs	r2, r2, r3
    361a:	2a1f      	cmp	r2, #31
    361c:	dd15      	ble.n	364a <__aeabi_ui2d+0x42>
    361e:	4a14      	ldr	r2, [pc, #80]	; (3670 <__aeabi_ui2d+0x68>)
    3620:	1ad2      	subs	r2, r2, r3
    3622:	4094      	lsls	r4, r2
    3624:	2200      	movs	r2, #0
    3626:	0324      	lsls	r4, r4, #12
    3628:	055b      	lsls	r3, r3, #21
    362a:	0b24      	lsrs	r4, r4, #12
    362c:	0d5b      	lsrs	r3, r3, #21
    362e:	2100      	movs	r1, #0
    3630:	0010      	movs	r0, r2
    3632:	0324      	lsls	r4, r4, #12
    3634:	0d0a      	lsrs	r2, r1, #20
    3636:	0b24      	lsrs	r4, r4, #12
    3638:	0512      	lsls	r2, r2, #20
    363a:	4322      	orrs	r2, r4
    363c:	4c0d      	ldr	r4, [pc, #52]	; (3674 <__aeabi_ui2d+0x6c>)
    363e:	051b      	lsls	r3, r3, #20
    3640:	4022      	ands	r2, r4
    3642:	4313      	orrs	r3, r2
    3644:	005b      	lsls	r3, r3, #1
    3646:	0859      	lsrs	r1, r3, #1
    3648:	bd10      	pop	{r4, pc}
    364a:	0021      	movs	r1, r4
    364c:	4091      	lsls	r1, r2
    364e:	000a      	movs	r2, r1
    3650:	210b      	movs	r1, #11
    3652:	1a08      	subs	r0, r1, r0
    3654:	40c4      	lsrs	r4, r0
    3656:	055b      	lsls	r3, r3, #21
    3658:	0324      	lsls	r4, r4, #12
    365a:	0b24      	lsrs	r4, r4, #12
    365c:	0d5b      	lsrs	r3, r3, #21
    365e:	e7e6      	b.n	362e <__aeabi_ui2d+0x26>
    3660:	2300      	movs	r3, #0
    3662:	2400      	movs	r4, #0
    3664:	2200      	movs	r2, #0
    3666:	e7e2      	b.n	362e <__aeabi_ui2d+0x26>
    3668:	0000041e 	.word	0x0000041e
    366c:	00000433 	.word	0x00000433
    3670:	00000413 	.word	0x00000413
    3674:	800fffff 	.word	0x800fffff

00003678 <__clzsi2>:
    3678:	211c      	movs	r1, #28
    367a:	2301      	movs	r3, #1
    367c:	041b      	lsls	r3, r3, #16
    367e:	4298      	cmp	r0, r3
    3680:	d301      	bcc.n	3686 <__clzsi2+0xe>
    3682:	0c00      	lsrs	r0, r0, #16
    3684:	3910      	subs	r1, #16
    3686:	0a1b      	lsrs	r3, r3, #8
    3688:	4298      	cmp	r0, r3
    368a:	d301      	bcc.n	3690 <__clzsi2+0x18>
    368c:	0a00      	lsrs	r0, r0, #8
    368e:	3908      	subs	r1, #8
    3690:	091b      	lsrs	r3, r3, #4
    3692:	4298      	cmp	r0, r3
    3694:	d301      	bcc.n	369a <__clzsi2+0x22>
    3696:	0900      	lsrs	r0, r0, #4
    3698:	3904      	subs	r1, #4
    369a:	a202      	add	r2, pc, #8	; (adr r2, 36a4 <__clzsi2+0x2c>)
    369c:	5c10      	ldrb	r0, [r2, r0]
    369e:	1840      	adds	r0, r0, r1
    36a0:	4770      	bx	lr
    36a2:	46c0      	nop			; (mov r8, r8)
    36a4:	02020304 	.word	0x02020304
    36a8:	01010101 	.word	0x01010101
	...

000036b4 <__libc_init_array>:
    36b4:	b570      	push	{r4, r5, r6, lr}
    36b6:	2600      	movs	r6, #0
    36b8:	4d0c      	ldr	r5, [pc, #48]	; (36ec <__libc_init_array+0x38>)
    36ba:	4c0d      	ldr	r4, [pc, #52]	; (36f0 <__libc_init_array+0x3c>)
    36bc:	1b64      	subs	r4, r4, r5
    36be:	10a4      	asrs	r4, r4, #2
    36c0:	42a6      	cmp	r6, r4
    36c2:	d109      	bne.n	36d8 <__libc_init_array+0x24>
    36c4:	2600      	movs	r6, #0
    36c6:	f000 f8af 	bl	3828 <_init>
    36ca:	4d0a      	ldr	r5, [pc, #40]	; (36f4 <__libc_init_array+0x40>)
    36cc:	4c0a      	ldr	r4, [pc, #40]	; (36f8 <__libc_init_array+0x44>)
    36ce:	1b64      	subs	r4, r4, r5
    36d0:	10a4      	asrs	r4, r4, #2
    36d2:	42a6      	cmp	r6, r4
    36d4:	d105      	bne.n	36e2 <__libc_init_array+0x2e>
    36d6:	bd70      	pop	{r4, r5, r6, pc}
    36d8:	00b3      	lsls	r3, r6, #2
    36da:	58eb      	ldr	r3, [r5, r3]
    36dc:	4798      	blx	r3
    36de:	3601      	adds	r6, #1
    36e0:	e7ee      	b.n	36c0 <__libc_init_array+0xc>
    36e2:	00b3      	lsls	r3, r6, #2
    36e4:	58eb      	ldr	r3, [r5, r3]
    36e6:	4798      	blx	r3
    36e8:	3601      	adds	r6, #1
    36ea:	e7f2      	b.n	36d2 <__libc_init_array+0x1e>
    36ec:	00003834 	.word	0x00003834
    36f0:	00003834 	.word	0x00003834
    36f4:	00003834 	.word	0x00003834
    36f8:	00003838 	.word	0x00003838
    36fc:	682f2e2e 	.word	0x682f2e2e
    3700:	732f6c61 	.word	0x732f6c61
    3704:	682f6372 	.word	0x682f6372
    3708:	615f6c61 	.word	0x615f6c61
    370c:	735f6364 	.word	0x735f6364
    3710:	2e636e79 	.word	0x2e636e79
    3714:	00000063 	.word	0x00000063
    3718:	682f2e2e 	.word	0x682f2e2e
    371c:	732f6c61 	.word	0x732f6c61
    3720:	682f6372 	.word	0x682f6372
    3724:	645f6c61 	.word	0x645f6c61
    3728:	735f6361 	.word	0x735f6361
    372c:	2e636e79 	.word	0x2e636e79
    3730:	00000063 	.word	0x00000063
    3734:	682f2e2e 	.word	0x682f2e2e
    3738:	732f6c61 	.word	0x732f6c61
    373c:	682f6372 	.word	0x682f6372
    3740:	695f6c61 	.word	0x695f6c61
    3744:	00632e6f 	.word	0x00632e6f
    3748:	682f2e2e 	.word	0x682f2e2e
    374c:	732f6c61 	.word	0x732f6c61
    3750:	682f6372 	.word	0x682f6372
    3754:	735f6c61 	.word	0x735f6c61
    3758:	735f6970 	.word	0x735f6970
    375c:	6e79735f 	.word	0x6e79735f
    3760:	00632e63 	.word	0x00632e63

00003764 <_adcs>:
    3764:	02000000 07010000 00460001 00000000     ..........F.....
	...
    3780:	02000001 01110000 00460001 00000000     ..........F.....
	...
    379c:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    37ac:	632e6364 00000000 682f2e2e 642f6c70     dc.c....../hpl/d
    37bc:	682f6361 645f6c70 632e6361 00000000     ac/hpl_dac.c....
    37cc:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    37dc:	65735f6c 6d6f6372 0000632e 00002880     l_sercom.c...(..
    37ec:	00002862 0000281c 0000273a 0000281c     b(...(..:'...(..
    37fc:	00002854 0000281c 0000273a 00002862     T(...(..:'..b(..
    380c:	00002862 00002854 0000273a 00002732     b(..T(..:'..2'..
    381c:	00002732 00002732 00002a98              2'..2'...*..

00003828 <_init>:
    3828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    382a:	46c0      	nop			; (mov r8, r8)
    382c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    382e:	bc08      	pop	{r3}
    3830:	469e      	mov	lr, r3
    3832:	4770      	bx	lr

00003834 <__init_array_start>:
    3834:	000000dd 	.word	0x000000dd

00003838 <_fini>:
    3838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    383a:	46c0      	nop			; (mov r8, r8)
    383c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    383e:	bc08      	pop	{r3}
    3840:	469e      	mov	lr, r3
    3842:	4770      	bx	lr

00003844 <__fini_array_start>:
    3844:	000000b5 	.word	0x000000b5
